<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>true</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>set</applies_to>
        <cat_item/>
        <cat_variable>IO:8ad0078ddb575010ca597b3868961968</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>populateVariablesonDesktop</name>
        <order/>
        <published_ref/>
        <script><![CDATA[/************************************************************
* Copyright (c) 2020-2023 VMware, Inc. All Rights Reserved.
* You may not use this product except in compliance with the License.
* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*************************************************************/
/*
Function Name : onChange()
Comments: This function will display , show/hide and populate values for particular resource day2 actions on Native ui.
Updated On: 10 March 2022, 24/05/2022,21/06/2022, 07/07/22
Updated By: Zabiulla M, Prajakta,Ajay,shivam
Update Comments : I have replaced the callback function's receiving type of data from string to JSON.
Prajakta Comments : Handled single default value only for dropdown. Handled valuelist for dropdown without label.
Ajay Comments:- Handled external source with request info and custom properties
shivam comments:- Handled Bind field with canvas,request info and custom properties
*/



function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == '') {
        return;
    }
	
	var getDeployment = g_form.getValue('deployment');
	if(getDeployment == ''){
		var gAjax_1 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
		gAjax_1.addParam('sysparm_name', 'getDeploymentValue');
		gAjax_1.addParam('sysparm_resourceid', newValue);
		gAjax_1.getXMLAnswer(callBack_1);	
	}
	
	function callBack_1(response){
			var answer = response;
			g_form.setValue('deployment', answer);
		}

    var catalog = g_form.getUniqueValue();
    var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
    gAjax.addParam('sysparm_name', 'getFields');
    gAjax.addParam('sysparm_catalogid', catalog);
    gAjax.getXMLAnswer(callBack);

    function callBack(response) {
        var answer = response;
        var fieldsArr = JSON.parse(answer);
        for (var i = 0; i < fieldsArr.length; i++) {
            if (fieldsArr[i] != 'deployment' && fieldsArr[i] != 'resource' && fieldsArr[i] != 'General' && fieldsArr[i] != 'resource_default_variables' && fieldsArr[i] != 'deployment_default_variables') {
                g_form.setMandatory(fieldsArr[i], false);
                g_form.setDisplay(fieldsArr[i], false);
                g_form.setReadOnly(fieldsArr[i], false);

            }
        }
        g_form.setMandatory('deployment', true);
        g_form.setDisplay('deployment', true);
        g_form.setMandatory('resource', true);
        g_form.setDisplay('resource', true);
        var gAjax2 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
        gAjax2.addParam('sysparm_name', 'getSchema');
        gAjax2.addParam('sysparm_deploymentid', newValue);
        gAjax2.addParam('sysparm_catalogid', catalog);
        gAjax2.addParam('sysparm_type', 'Machine');
        gAjax2.getXMLAnswer(callBack2);

        function callBack2(response1) {
            var fieldResponse = JSON.parse(response1);
            var answer = fieldResponse.schema;
            var version = fieldResponse.versions;
            g_form.setValue('mc_schema', response1);
            if (answer == '') {
                answer = '{"model":{ "layout" : { "pages" : [ { "id" : "page_general", "title" : "General", "sections" : [ ] } ] }, "schema" : { } }}';
            }
            var parsed = JSON.parse(answer);
            g_form.setDisplay('endpoint', true);
            g_form.setDisplay('project', true);

            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var containerJson ={};
            var externalSourceVariables = '';
            var visibility;
            var readOnly;
            var size;
            var reversedJson = {};
            var schema = parsed.model.schema;
            var length = parsed.model.layout.pages.length; //page length
            var bindings = parsed.model.binding ? parsed.model.binding.entries ? parsed.model.binding.entries : [] : [];
			var readOnlyData = {};
			var sysJson = {};
			var requiredJson = {};
			
            if (Object.keys(schema).length == '0' || Object.keys(schema).length == 0) {
                g_form.setDisplay('reason', true);
            } else {
				for (var page = 0; page < length; page++) {
					var seclength = parsed.model.layout.pages[page].sections.length;
					for (var sec = 0; sec < seclength; sec++) {
							var fieldlength = parsed.model.layout.pages[page].sections[sec].fields.length;
							for (var field = 0; field < fieldlength; field++) {
								var key = parsed.model.layout.pages[page].sections[sec].fields[field].id;
								var displayValue = parsed.model.layout.pages[page].sections[sec].fields[field].display;
								sysJson[key] = displayValue;
							}
						}
					}
				
                for (var i = 0; i < length; i++) {
                    var name = parsed.model.layout.pages[i].id;
					var nameId = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
                    if ((parsed.model.layout.pages[i].state && parsed.model.layout.pages[i].state.visible && parsed.model.layout.pages[i].state.visible == true) || parsed.model.layout.pages[i].state == undefined || parsed.model.layout.pages[i].state.visible == undefined || typeof parsed.model.layout.pages[i].state.visible == 'object') {

                        var title = parsed.model.layout.pages[i].title;
                        var seclength = parsed.model.layout.pages[i].sections.length; //section length

                        if (seclength == '0' || seclength == 0) {
                            g_form.setDisplay('reason', true);
                        }

                        for (var j = 0; j < seclength; j++) {
                            var fieldlength = parsed.model.layout.pages[i].sections[j].fields.length; // details of form field, field id(name),state(visible, read-only)
                            for (var k = 0; k < fieldlength; k++) {

                                var key = parsed.model.layout.pages[i].sections[j].fields[k].id;
                                var fieldId = key.replace(rgx, ' ').trim().replaceAll(' ', '_');

                                var displayValue = parsed.model.layout.pages[i].sections[j].fields[k].display;

                                var defaultValue = '';
								if(displayValue == 'objectField'){
									handleObjectField(schema, key, version, fieldId);
								}
								
                                if (schema[key] && schema[key]['default']) {
                                    if (schema[key]["default"]["type"] == 'scriptAction') {
                                        g_form.clearOptions(fieldId + '__' + version);
                                    } else {
                                        if (!schema[key]['default']['bind']) {
                                            defaultValue = schema[key]['default'];
                                            if (displayValue == 'dateTime') {
                                                var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
												gAjax.addParam('sysparm_name', 'DateTime');
												gAjax.addParam('sysparm_obj', defaultValue);
												gAjax.addParam('sysparm_value', fieldId + '__' + version);
												gAjax.getXMLAnswer(callBack1);

												function callBack1(response) {
													var answer = response;
													var parsedAnswer = JSON.parse(answer);
													g_form.setValue(parsedAnswer.datafields, parsedAnswer.dates, parsedAnswer.dates);
												}
											}
                                            g_form.setValue(fieldId + '__' + version, defaultValue, defaultValue);
                                        }
                                    }
                                }

                                if (parsed.model.layout.pages[i].sections[j].fields[k].state == null) {
                                    if (displayValue == 'valuePicker') {
                                        g_form.setDisplay('macro_' + fieldId + '__' + version, true);
                                        g_form.setReadOnly('macro_' + fieldId + '__' + version, false);
                                        g_form.setDisplay(fieldId + '__' + version, false);
                                    } else {
                                        g_form.setDisplay(fieldId + '__' + version, true);
                                        g_form.setReadOnly(fieldId + '__' + version, false);
                                    }
                                } else {
                                    if (typeof parsed.model.layout.pages[i].sections[j].fields[k].state.visible == 'object') {
                                        readOnly = parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'] !== undefined ? parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'] : false;
                                        if (displayValue == 'valuePicker') {
                                            g_form.setReadOnly('macro_' + fieldId + '__' + version, Boolean(readOnly));
                                        } else {
                                            if (displayValue == 'checkbox') {
                                                g_form.setReadOnly(fieldId + '_label__' + version, Boolean(readOnly));
                                            }
                                            g_form.setReadOnly(fieldId + '__' + version, Boolean(readOnly));
                                        }
                                        var valSchema = parsed.model.layout.pages[i].sections[j].fields[k].state.visible;
                                        var displayType = parsed.model.layout.pages[i].sections[j].fields[k];
										
                                        for (var p = 0; p < valSchema.length; p++) {
                                            for (var q in valSchema[p]) {
                                                if (typeof valSchema[p][q] == 'object') {
                                                    for (var m in valSchema[p][q]) {
                                                        if (sysJson[m] && sysJson[m] != 'dropDown' && sysJson[m] != 'textField' && sysJson[m] != 'integerField' && sysJson[m] != 'decimalField' && sysJson[m] != 'checkbox')
                                                            continue;
														
                                                        if (reversedJson[fieldId]) {
                                                            reversedJson[fieldId].push({
                                                                "key1": m.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version,
                                                                "visibleValue": valSchema[p].value,
                                                                "condVal": valSchema[p][q][m],
                                                                "condType": q,
                                                                "displayValue": displayValue,

                                                            });
                                                        } else {
                                                            reversedJson[fieldId] = [];
                                                            reversedJson[fieldId].push({
                                                                "key1": m.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version,
                                                                "visibleValue": valSchema[p].value,
                                                                "condVal": valSchema[p][q][m],
                                                                "condType": q,
                                                                "displayValue": displayValue,

                                                            });
                                                        }

                                                    }
                                                }
                                            }

                                        }


                                    } else {
                                        visibility = parsed.model.layout.pages[i].sections[j].fields[k].state.visible !== undefined ? parsed.model.layout.pages[i].sections[j].fields[k].state.visible : true;
                                        readOnly = parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'] !== undefined ? parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'] : false;
                                        if (displayValue == 'valuePicker') {
                                            g_form.setDisplay('macro_' + fieldId + '__' + version, Boolean(visibility));
                                            g_form.setReadOnly('macro_' + fieldId + '__' + version, Boolean(readOnly));
                                            g_form.setDisplay(fieldId + '__' + version, false);
                                        } else {
                                            if (displayValue == 'checkbox') {
                                                g_form.setDisplay(fieldId + '__' + version, Boolean(visibility));
                                                g_form.setReadOnly(fieldId + '__' + version, Boolean(readOnly));
                                                g_form.setDisplay(fieldId + '_label__' + version, Boolean(visibility));
                                                g_form.setReadOnly(fieldId + '_label__' + version, Boolean(readOnly));
                                            } else {
                                                g_form.setDisplay(fieldId + '__' + version, Boolean(visibility));
                                                g_form.setReadOnly(fieldId + '__' + version, Boolean(readOnly));
                                            }
                                        }
                                    }

                                }

                                if (schema[key] && schema[key]["valueList"] && typeof schema[key]["valueList"] == 'object') {
                                    var valuelist = schema[key]["valueList"];
                                    if (valuelist.length > 0) {
                                        g_form.clearOptions(fieldId + '__' + version);
                                    }
                                    g_form.addOption(fieldId + '__' + version, '', '--None--');
                                    for (var z = 0; z < valuelist.length; z++) {
                                        var valuelistValue = schema[key]["valueList"][z].value || schema[key]["valueList"][z];
                                        var valuelistLabelId = schema[key]["valueList"][z].label || schema[key]["valueList"][z].id || schema[key]["valueList"][z];
                                        g_form.addOption(fieldId + '__' + version, valuelistValue, valuelistLabelId);
                                        if (schema[key] && schema[key]['default'] && schema[key]["default"]["type"] != 'scriptAction' && !schema[key]['default']['bind']) {
                                            var newdefaultValue = schema[key]['default'];
                                            g_form.setValue(fieldId + '__' + version, newdefaultValue, newdefaultValue);
                                        }

                                    }
                                }


                                if (schema[key] && schema[key]["valueList"] && typeof schema[key]["valueList"] == 'object' && schema[key]["valueList"]["type"] == 'scriptAction' && displayValue != 'valuePicker') {
                                    externalSourceVariables += key + ',';
                                    var type = schema[key]["valueList"]["type"];
                                    var url = schema[key]["valueList"]["id"];
									if(parsed.model.layout.pages[i].sections[j].fields[k].state && parsed.model.layout.pages[i].sections[j].fields[k].state['read-only']){
										readOnlyData[key] = parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'];
									}

                                }
                                if (schema[key] && schema[key]["default"] && typeof schema[key]["default"] == 'object' && typeof schema[key]["default"]['bind'] != 'object' && schema[key]["default"]['bind']) {
                                    if(!externalSourceVariables.includes(key)){
                                		 externalSourceVariables += key + ',';
									}
                                }

                                if (schema[key] && schema[key]["default"] && typeof schema[key]["default"] == 'object' && schema[key]["default"]["type"] == 'scriptAction' && displayValue != 'valuePicker') {
                                    if(!externalSourceVariables.includes(key)){
										externalSourceVariables += key + ',';
									}
                                    var type = schema[key]["default"]["type"];
                                    var url = schema[key]["default"]["id"];
									if (!readOnlyData[key]) {
										if(parsed.model.layout.pages[i].sections[j].fields[k].state && parsed.model.layout.pages[i].sections[j].fields[k].state['read-only']){
                                        	readOnlyData[key] = parsed.model.layout.pages[i].sections[j].fields[k].state['read-only'];
										}
                                    }

                                }
                                var visible = '';
                                var minValue = '';
                                var maxValue = '';
                                var pattern = '';
                                if (schema[key] && schema[key].constraints) {
                                    g_form.hideFieldMsg(fieldId + '__' + version, 'true');
                                    for (var validation in schema[key].constraints) {
                                        if (validation == 'required') {
                                            if (displayValue != 'valuePicker') {
                                                visible = schema[key].constraints[validation];
												requiredJson[fieldId] = visible;
												if(containerJson[nameId]){
													containerJson[nameId].push({
														"field" : fieldId,
														"mandatory" : visible,
												});
												}else{
												containerJson[nameId]=[];
                                                containerJson[nameId].push({
													"field":fieldId,
													"mandatory" : visible,
												});
												}
                                                g_form.setMandatory(fieldId + '__' + version, Boolean(visible));
                                            }
                                        }
                                        if (validation == 'min-value') {
                                            minValue = schema[key].constraints[validation];
                                            if (schema[key]["type"]["dataType"] == "decimal" || schema[key]["type"]["dataType"] == "integer") {
                                                g_form.showFieldMsg(fieldId + '__' + version, "Minimum value for " + schema[key].label + " should be " + minValue);
                                            } else {
                                                g_form.showFieldMsg(fieldId + '__' + version, "Minimum field length for " + schema[key].label + " should be " + minValue);
                                            }
                                        }
                                        if (validation == 'max-value') {
                                            maxValue = schema[key].constraints[validation];
                                            if (schema[key]["type"]["dataType"] == "decimal" || schema[key]["type"]["dataType"] == "integer") {
                                                g_form.showFieldMsg(fieldId + '__' + version, "Maximum value for " + schema[key].label + " should be " + maxValue);
                                            } else {
                                                g_form.showFieldMsg(fieldId + '__' + version, "Maximum field length for " + schema[key].label + " should be " + maxValue);
                                            }
                                        }
                                        if (validation == 'pattern') {
                                            pattern = schema[key].constraints[validation].value;
                                            g_form.showFieldMsg(fieldId + '__' + version, "Input Format! " + pattern);
                                        }
                                    }
                                }

                                for (var field = 0; field < bindings.length; field++) {
                                    if (bindings[field].key === key) {
                                        if (bindings[field].value.value && typeof bindings[field].value.value === 'object') {
                                            defaultValue = bindings[field].value.value;
                                            g_form.addOption(fieldId + '__' + version, defaultValue.value, defaultValue.id || defaultValue.label);
                                        } else if (bindings[field].value.value) {
                                            defaultValue = bindings[field].value.value;
                                            g_form.addOption(fieldId + '__' + version, defaultValue, defaultValue);
                                            g_form.setValue(fieldId + '__' + version, defaultValue, defaultValue);

                                        }
                                    }
                                }
                            }
                        }

						if (parsed.model.layout.pages[i].state && parsed.model.layout.pages[i].state.visible && typeof parsed.model.layout.pages[i].state.visible == 'object') {
                            var valSchema = parsed.model.layout.pages[i].state.visible;
                            for (var p = 0; p < valSchema.length; p++) {
                                for (var q in valSchema[p]) {
                                    if (typeof valSchema[p][q] == 'object') {
                                        for (var m in valSchema[p][q]) {
                                            if (reversedJson[nameId]) {
                                                reversedJson[nameId].push({
                                                    "key1": m.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version,
                                                    "visibleValue": valSchema[p].value,
                                                    "condVal": valSchema[p][q][m],
                                                    "condType": q,
													"type":'container',

                                                });
                                            } else {
                                                reversedJson[nameId] = [];
                                                reversedJson[nameId].push({
                                                    "key1": m.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version,
                                                    "visibleValue": valSchema[p].value,
                                                    "condVal": valSchema[p][q][m],
                                                    "condType": q,
													"type":'container',
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                }

                var supportedOps = ["equals", "notEqual", "within", ">", ">=", "<", "<="];
                for (var keyName in reversedJson) {
                    var condition = "";
                    var condArr = reversedJson[keyName];
                    var hasContainer = false;
                    for (var n = 0; n < condArr.length; n++) {
                        var visibleValue = condArr[n].visibleValue;
                        var condVal = condArr[n].condVal;
                        var condType = condArr[n].condType + "";
                        var key1 = condArr[n].key1 + "";
                        var displayValues = condArr[n].displayValue + '';
                        var visibleVal = 'false';
                        if (supportedOps.indexOf(condArr[n].condType) == -1)
                            continue;


                        switch (condArr[n].condType) {
                            case "equals":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) == condVal+'') visibleVal = visibleValue;
                                break;

                            case "notEqual":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) != condVal+'') visibleVal = visibleValue;
                                break;

                            case "within":
                                if (g_form.getValue(key1) != '' && condVal.indexOf(g_form.getValue(key1)) != -1) visibleVal = visibleValue;
                                break;

                            case ">":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) > condVal) visibleVal = visibleValue;
                                break;

                            case ">=":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) >= condVal) visibleVal = visibleValue;
                                break;

                            case "<":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) < condVal) visibleVal = visibleValue;
                                break;

                            case "<=":
                                if (g_form.getValue(key1) != '' && g_form.getValue(key1) <= condVal) visibleVal = visibleValue;
                                break;
                        }
						if (condArr[n].type + '' == 'container') {
								var cont = containerJson[keyName];
								if (cont) {
									for (var p = 0; p < cont.length; p++) {
										var contField = cont[p].field;
										var man = cont[p].mandatory;
										g_form.setMandatory(contField + '__' + version, visibleVal);
									}
								}
							}
						if (displayValues == 'valuePicker') {
							if( requiredJson[keyName] && requiredJson[keyName] == true) 
								g_form.setMandatory('macro_' + keyName + '__' + version, visibleVal);
							g_form.setDisplay('macro_' + keyName + '__' + version, visibleVal);
							g_form.setDisplay(keyName + '__' + version, false);
						} else {
						
							if (displayValues == 'checkbox') {
								if( requiredJson[keyName] && requiredJson[keyName] == true) 
									g_form.setMandatory(keyName + '_label__' + version, visibleVal);
								g_form.setDisplay(keyName + '_label__' + version, visibleVal);
							}   
							if(requiredJson[keyName] && requiredJson[keyName] == true){
								g_form.setMandatory(keyName + '__' + version, visibleVal);
							}
							g_form.setDisplay(keyName + '__' + version, visibleVal);
						}
                    }
                }
            }

            var arr = externalSourceVariables.split(',');
            for (var k = 0; k < arr.length - 1; k++) {
                var field = arr[k];
				var newReadOnly = '';
				for (var readVal in readOnlyData){
					if(field == readVal){
						newReadOnly = readOnlyData[readVal];
						break;
					}
				}
                if (schema[field] && schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                    var datasource = schema[field]["valueList"]["type"];
                    var uri = schema[field]["valueList"]["id"];
                    var type = schema[field]["valueList"]["type"];
                    //var uri = schema[field]["valueList"]["id"];
                    var parameters = [];
                    var dependency = [];
                    var bind = 'false';
                    var ext_default = 'false';
                    if (schema[field]["valueList"]["parameters"]) {
                        for (var param = 0; param < schema[field]["valueList"]["parameters"].length; param++) {
                            for (var param1 in schema[field]["valueList"]["parameters"][param]) {
                                if (param1 != "$type") {
                                    if (schema[field]["valueList"]["parameters"][param][param1] == null) {
                                        parameters.push({
                                            "name": param1,
                                            "value": null
                                        });
                                    } else if (schema[field]["valueList"]["parameters"][param][param1].startsWith('`') && schema[field]["valueList"]["parameters"][param][param1].endsWith('`')) {
                                        var value = schema[field]["valueList"]["parameters"][param][param1].slice(1, -1);
                                        value = value.replaceAll('`', '');
                                        parameters.push({
                                            "name": param1,
                                            "value": value
                                        });

                                    } else if (schema[field]["valueList"]["parameters"][param][param1].startsWith('_')) {
                                        var value = schema[field]["valueList"]["parameters"][param][param1];

                                        parameters.push({
                                            "name": param1,
                                            "value": value
                                        });
                                    } else {

                                        var value = schema[field]["valueList"]["parameters"][param][param1];
                                        value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                        dependency.push(param1);
                                        dependency.push(value + '__' + version);
                                    }
                                }
                            }
                        }
                    }
					if (schema[field] && schema[field]["default"] && typeof schema[field]["default"] == 'object' && typeof schema[field]["default"]['bind'] != 'object' && schema[field]["default"]['bind']) {
                        bind = true;
                    }
					if(schema[field] && schema[field]["default"] && typeof schema[field]["default"] == 'object' && schema[field]["default"]["type"] == 'scriptAction' && displayValue != 'valuePicker'){
						ext_default = true;
					}
                    g_form.setReadOnly('resource', true);
                    g_form.setReadOnly(field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version, true);
                    var finalParameters = parameters;
                    if (!finalParameters) {

                        finalParameters = [];
                    } else {

                        var bindValueList = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                        bindValueList.addParam('sysparm_name', 'bindField');
                        bindValueList.addParam('sysparm_parameters', JSON.stringify(finalParameters));
                        bindValueList.addParam('sysparm_dependency', dependency);
                        bindValueList.addParam('sysparm_field', field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version);
                        bindValueList.addParam('sysparm_uri', uri);
                        bindValueList.addParam('sysparm_resource', newValue);
                        bindValueList.addParam('sysparm_bind', bind);
						bindValueList.addParam('sysparm_readOnly', newReadOnly);
                        bindValueList.getXMLAnswer(callBackBind);
                    }

                    function callBackBind(responseBind) {
                        var valueList = responseBind;
                        var modifiedDependency = JSON.parse(valueList);
                        finalParameters = modifiedDependency.response;
                        dependency = modifiedDependency.depend + '';
                        var dependencyArr = '';
                        if (dependency) {
                            dependencyArr = dependency.split(',');
                        }
                        for (var i = 0; i < dependencyArr.length; i = i + 2) {
                            var value = g_form.getValue(dependencyArr[i + 1]);
                            finalParameters.push({
                                'name': dependencyArr[i],
                                'value': value
                            });
                        }

                        var catItemSysid = g_form.getUniqueValue();
                        var deploymentSysId = g_form.getValue('deployment');
                        var gAjax3 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                        gAjax3.addParam('sysparm_name', 'dynamicDropDownActionsValue');
                        gAjax3.addParam('sysparm_sys_id', catItemSysid);
                        gAjax3.addParam('sysparm_deployment_sys_id', deploymentSysId);
                        gAjax3.addParam('sysparm_url', modifiedDependency.uri + '');
                        gAjax3.addParam('sysparm_datasource', datasource);
                        gAjax3.addParam('sysparm_parameter', JSON.stringify(finalParameters));
                        gAjax3.addParam("sysparm_field", modifiedDependency.field + '');
                        gAjax3.addParam("sysparm_bind", modifiedDependency.bind + '');
						gAjax3.addParam("sysparm_readOnly", modifiedDependency.readOnly + '');

                        gAjax3.getXMLAnswer(callBack3);


                        function callBack3(response) {
                            var answer3 = JSON.parse(response);
                            var newField = answer3.field;
                            var bind = answer3.bind;
                            g_form.setReadOnly(newField, answer3.readOnly);
                            if (typeof answer3.response.data == 'object') {
                                g_form.clearOptions(newField);
                                g_form.addOption(newField, '', '--None--');
                                sessionStorage.setItem(newField, answer3.response.data);
                                for (i = 0; i < answer3.response.data.length; i++) {
                                    if (typeof answer3.response.data[i] == 'object') {
                                        g_form.addOption(newField, answer3.response.data[i].value, answer3.response.data[i].id || answer3.response.data[i].label);
                                    } else {
                                        g_form.addOption(newField, answer3.response.data[i] + '', answer3.response.data[i] + '');
                                    }
                                }
								if(ext_default == 'true'){
									var extDefault = sessionStorage.getItem('Default_' + newField);
                                    if ((answer3.response.data).lastIndexOf(extDefault) != -1) {
                                        g_form.setValue(newField, extDefault);
                                    }
								}
                                if (bind == 'true') {
                                    var bindDefault = sessionStorage.getItem('Bind_' + newField);
                                    if ((answer3.response.data).lastIndexOf(bindDefault) != -1) {
                                        g_form.setValue(newField, bindDefault);
                                    }
                                }
                            } else {
                                if (answer3.response.data) {
                                    g_form.addOption(newField, answer3.response.data, answer3.response.data);
                                    g_form.setValue(newField, answer3.response.data, answer3.response.data);

                                }
                            }
                            g_form.setReadOnly('resource', false);
                        }

                    }
                }


          if (schema[field] && schema[field]["default"] && typeof schema[field]["default"] == 'object' && typeof schema[field]["default"]['bind'] != 'object' && schema[field]["default"]['bind']) {
                    var parameters = [];
                    var dependency = [];
                    var dataType = '';
                    var newField = '';
                    var valueList = 'false';
                    if (schema[field]["valueList"]) {
                        dataType = 'dropDown';
                    }
                    if (schema[field] && schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                        valueList = 'true';
                    }
                    if (schema[field]["default"]["bind"] == null) {
                        parameters.push({
                            "name": field.replace(rgx, ' ').trim().replaceAll(' ', '_'),
                            "value": null
                        });
                    } else if (schema[field]["default"]["bind"].startsWith('_')) {
                        var bindValue = schema[field]["default"]["bind"];
                        parameters.push({
                            "name": field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version,
                            "value": bindValue
                        });
                    } else {
                        var value = schema[field]["default"]["bind"];
                        value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                        dependency.push(field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version);
                        dependency.push(value + '__' + version);
                    }

                    var finalParameters = parameters;
                    if (!finalParameters) {
                        finalParameters = [];
                    } else {
                        var bindValueList = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                        bindValueList.addParam('sysparm_name', 'bindField');
                        bindValueList.addParam('sysparm_parameters', JSON.stringify(finalParameters));
                        bindValueList.addParam('sysparm_dependency', dependency);
                        bindValueList.addParam('sysparm_field', field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version);
                        bindValueList.addParam('sysparm_uri', '');
                        bindValueList.addParam('sysparm_resource', newValue);
                        bindValueList.addParam('sysparm_bind', valueList);
                        bindValueList.addParam('sysparm_dataType', dataType);
                        bindValueList.getXMLAnswer(callBackBinddef);
                    }

                    function callBackBinddef(responseDefault) {
                        var DefaultValue = responseDefault;
                        var modifiedDependency = JSON.parse(DefaultValue);
                        finalParameters = modifiedDependency.response;
                        dependency = modifiedDependency.depend + '';
                        var valueList = modifiedDependency.bind + '';
                        var dataType = modifiedDependency.dataType + '';
                        var dependencyArr = '';
                        if (dependency.toString()) {
                            dependencyArr = dependency.toString().split(',');
                        }
                        for (var i = 0; i < dependencyArr.length; i = i + 2) {
                            var value = g_form.getValue(dependencyArr[i + 1]);
                            finalParameters.push({
                                'name': dependencyArr[i],
                                'value': value
                            });
                        }

                        for (var onChange1 = 0; onChange1 < finalParameters.length; onChange1 = onChange1 + 2) {
                            value = finalParameters[onChange1].value;
                            newField = finalParameters[onChange1].name;
                            if (dataType == 'dropDown') {
                                if (valueList == 'true') {
                                    if (!(sessionStorage.getItem(newField) == null || sessionStorage.getItem(newField) == 'null')) {
                                        var val = sessionStorage.getItem(newField);
                                        sessionStorage.setItem('Bind_' + newField, value);
                                        if (val.lastIndexOf(value) != -1) {
                                            g_form.setValue(newField, value);
                                        } else {
                                            g_form.clearValue(newField);
                                        }
                                    } else {
                                        sessionStorage.setItem('Bind_' + newField, value);
                                    }
                                } else {
                                    var catItemSysid = g_form.getUniqueValue();
                                    var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                                    gAjax.addParam('sysparm_name', 'dropDownValueList');
                                    gAjax.addParam('sysparm_sys_id', catItemSysid);
                                    gAjax.addParam('sysparm_field', newField);
                                    gAjax.addParam('sysparm_value', value);
                                    gAjax.getXMLAnswer(callBack);

                                    function callBack(response) {
                                        var parsedResponse = JSON.parse(response);
                                        var newField = parsedResponse.field;
                                        var list = parsedResponse.list;
                                        var val = parsedResponse.value;
                                        if (list.length == 0 && val != '') {
                                            g_form.clearOptions(newField);
                                            g_form.addOption(newField, '', '--None--');
                                            g_form.addOption(newField, val, val);
                                            g_form.setValue(newField, val);
                                        } else {
                                            if (list.lastIndexOf(val) != -1) {
                                                g_form.setValue(newField, val);
                                            } else {
                                                g_form.clearValue(newField);
                                            }
                                        }
                                    }
                                }

                            } else {
                                g_form.setValue(newField, value);
                            }

                        }

                    }
                }

                if (schema[field] && schema[field]["default"] && typeof schema[field]["default"] == 'object' && schema[field]["default"]["type"] == 'scriptAction') {
                    var datasource = schema[field]["default"]["type"];
                    var uri = schema[field]["default"]["id"];
                    var parameters = [];
                    var dependency = [];
                    var dataType = '';
                    var valueList = 'false';
                    if (schema[field]["valueList"]) {
                        dataType = 'dropDown';
                    }
                    if (schema[field] && schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                        valueList = 'true';
                    }
                    if (schema[field]["default"]["parameters"]) {
                        for (var param = 0; param < schema[field]["default"]["parameters"].length; param++) {
                            for (var param1 in schema[field]["default"]["parameters"][param]) {
                                if (param1 != "$type") {
                                    if (schema[field]["default"]["parameters"][param][param1] == null) {
                                        parameters.push({
                                            "name": param1,
                                            "value": null
                                        });
                                    } else if (schema[field]["default"]["parameters"][param][param1].startsWith('`') && schema[field]["default"]["parameters"][param][param1].endsWith('`')) {
                                        var value = schema[field]["default"]["parameters"][param][param1].slice(1, -1);
                                        value = value.replaceAll('`', '');
                                        parameters.push({
                                            "name": param1,
                                            "value": value
                                        });
                                    } else if (schema[field]["default"]["parameters"][param][param1].startsWith('_')) {
                                        var value = schema[field]["default"]["parameters"][param][param1];
                                        parameters.push({
                                            "name": param1,
                                            "value": value
                                        });
                                    } else {
                                        var value = schema[field]["default"]["parameters"][param][param1];
                                        value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                        dependency.push(param1);
                                        dependency.push(value + '__' + version);
                                    }


                                }
                            }

                        }
                    }

                    g_form.setReadOnly('resource', true);
                    g_form.setReadOnly(field.replace(rgx, ' ').trim().replaceAll(' ', '_'), true);
                    var finalParameters = parameters;
                    if (!finalParameters) {
                        finalParameters = [];
                    } else {
                        var bindDefaultList = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                        bindDefaultList.addParam('sysparm_name', 'bindField');
                        bindDefaultList.addParam('sysparm_parameters', JSON.stringify(finalParameters));
                        bindDefaultList.addParam('sysparm_dependency', dependency);
                        bindDefaultList.addParam('sysparm_field', field.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version);
                        bindDefaultList.addParam('sysparm_uri', uri);
                        bindDefaultList.addParam('sysparm_resource', newValue);
                        bindDefaultList.addParam('sysparm_bind', valueList);
                        bindDefaultList.addParam('sysparm_dataType', dataType);
						bindDefaultList.addParam('sysparm_readOnly', newReadOnly);
                        bindDefaultList.getXMLAnswer(callBackBindDefault);
                    }

                    function callBackBindDefault(responseBindDefault) {
                        var DefaultValue = responseBindDefault;
                        var modifiedDependency = JSON.parse(DefaultValue);
                        finalParameters = modifiedDependency.response;
                        dependency = modifiedDependency.depend + '';
                        var dependencyArr = '';
                        if (dependency) {
                            dependencyArr = dependency.split(',');
                        }
                        for (var i = 0; i < dependencyArr.length; i = i + 2) {
                            var value = g_form.getValue(dependencyArr[i + 1]);
                            finalParameters.push({
                                'name': dependencyArr[i],
                                'value': value
                            });
                        }
                        var catItemSysid = g_form.getUniqueValue();
                        var deploymentSysId = g_form.getValue('deployment');
                        var gAjax4 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                        gAjax4.addParam('sysparm_name', 'dynamicDropDownActionsValue');
                        gAjax4.addParam('sysparm_sys_id', catItemSysid);
                        gAjax4.addParam('sysparm_deployment_sys_id', deploymentSysId);
                        gAjax4.addParam('sysparm_url', modifiedDependency.uri + '');
                        gAjax4.addParam('sysparm_datasource', datasource);
                        gAjax4.addParam('sysparm_parameter', JSON.stringify(finalParameters));
                        gAjax4.addParam("sysparm_field", modifiedDependency.field + '');
                        gAjax4.addParam("sysparm_bind", modifiedDependency.bind + '');
                        gAjax4.addParam("sysparm_dataType", modifiedDependency.dataType + '');
						gAjax4.addParam("sysparm_readOnly", modifiedDependency.readOnly+ '');
                        gAjax4.getXMLAnswer(callBack4);

                        function callBack4(response) {
                            var answer4 = JSON.parse(response);
                            var newField = answer4.field;
                            var dataType = answer4.dataType;
                            var valueList = answer4.bind;
                            g_form.setReadOnly(newField, answer4.readOnly);
                            if (dataType == 'dropDown') {
                                if (valueList == 'true') {
                                    if ((!(sessionStorage.getItem(newField) == null || sessionStorage.getItem(newField) == 'null'))) {
                                        var val = sessionStorage.getItem(newField);
										sessionStorage.setItem('Default_' + newField,answer4.response.data);
                                        if (val.lastIndexOf(answer4.response.data) != -1) {
                                            g_form.setValue(newField, answer4.response.data, answer4.response.data);
                                        }else{
											g_form.clearValue(newField);
										}
                                    }else{
										sessionStorage.setItem('Default_' + newField, answer4.response.data);
									}
                                } else {
                                    var catItemSysid = g_form.getUniqueValue();
                                    var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                                    gAjax.addParam('sysparm_name', 'dropDownValueList');
                                    gAjax.addParam('sysparm_sys_id', catItemSysid);
                                    gAjax.addParam('sysparm_field', newField);
                                    gAjax.addParam('sysparm_value', answer4.response.data);
                                    gAjax.getXMLAnswer(callBack);

                                    function callBack(response) {
                                        var parsedResponse = JSON.parse(response);
                                        var newField = parsedResponse.field;
                                        var list = parsedResponse.list;
                                        var val = parsedResponse.value;
                                        if (list.length == 0 && val != '') {
                                            g_form.clearOptions(newField);
                                            g_form.addOption(newField, '', '--None--');
                                            g_form.addOption(newField, val, val);
                                            g_form.setValue(newField, val);
                                        } else {
                                            if (list.lastIndexOf(val) != -1) {
                                                g_form.setValue(newField, val);
                                            } else {
                                                g_form.clearValue(newField);
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (typeof answer4.response.data == 'object') {
                                    g_form.clearOptions(newField);
                                    g_form.addOption(newField, '', '--None--');
                                    for (i = 0; i < answer4.response.data.length; i++) {
                                        if (typeof answer4.response.data[i] == 'object') {
                                            g_form.addOption(newField, answer4.response.data[i].value, answer4.response.data[i].id || answer4.response.data[i].label);
                                        } else {
                                            g_form.addOption(newField, answer4.response.data[i] + '', answer4.response.data[i] + '');
                                        }
                                    }
                                } else {
                                    if (answer4.response.data) {
                                        if (newField.startsWith('dateTime')) {
                                            var datefield = newField;
                                            var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');
                                            gAjax.addParam('sysparm_name', 'DateTime');
                                            gAjax.addParam('sysparm_obj', answer4.response.data);
                                            gAjax.addParam('sysparm_value', datefield);
                                            gAjax.getXMLAnswer(callBack1);

                                            function callBack1(response5) {
                                                var answer = response5;
                                                var parsedAnswer = JSON.parse(answer);
                                                g_form.setValue(parsedAnswer.datafields, parsedAnswer.dates, parsedAnswer.dates);
                                            }
                                        } else {
                                            g_form.setValue(newField, answer4.response.data, answer4.response.data);
                                        }
                                    }
                                }
                            }
                            g_form.setReadOnly('resource', false);
                        }
                    }
                }
            }
        }

    }
}
/* Function Name :handleObjectField()
Comments : This function is used to show the 'objectfield' type field on resource day-2 action form on native portal.
Created On : 20 January 2023
Created by : Prajakta Kamble
*/
	
function handleObjectField(schema, key, version, fieldId){
	
		var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
		var type_schema = schema[key]['type'];
		var custom_property_length = type_schema.fields.length;
		for (var c = 0; c < custom_property_length; c++) {
			var custom_property_datatype = type_schema.fields[c]['type']['dataType'];
			var custom_property_key = type_schema.fields[c]['id'];
			var custom_property_fieldId = 'custom_property' + '__' + fieldId +'__'+ custom_property_key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			if(custom_property_datatype == 'string'){
				g_form.setDisplay(custom_property_fieldId + '__' + version,  true);
				
			}
			if(custom_property_datatype == 'complex'){
				var obj_schema1 = {};
				var obj_schema = type_schema['fields'][c];
				var obj_key = type_schema['fields'][c].id;
				obj_schema1[obj_key] = {};
				obj_schema1[obj_key] = obj_schema;
				var len = obj_schema1[obj_key]['type']['fields'].length;
				var obj_fieldId = obj_key.replace(rgx, ' ').trim().replaceAll(' ', '_');  
				handleObjectField( obj_schema1, obj_key, version, obj_fieldId);
				
			}
	}
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-09-15 13:29:48</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c7e48341db975010ca597b38689619af</sys_id>
        <sys_mod_count>566</sys_mod_count>
        <sys_name>populateVariablesonDesktop</sys_name>
        <sys_overrides/>
        <sys_package display_value="VMware Aria Automation Plugin" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware Aria Automation Plugin">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>catalog_script_client_c7e48341db975010ca597b38689619af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-11 11:36:40</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>0</ui_type>
        <va_supported>true</va_supported>
        <variable_set display_value="Resource Default Variables">50000b4ddb575010ca597b386896199b</variable_set>
        <view/>
    </catalog_script_client>
</record_update>
