<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_vmw_cloudservice.CASDaoUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>All Glide Record Call in VMware Aria Automation Plugin 8.x </description>
        <name>CASDaoUtil</name>
        <script><![CDATA[/**********************************************************
* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.
* You may not use this product except in compliance with the License.
* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*************************************************************/


var CASDaoUtil = Class.create();
CASDaoUtil.prototype = {
    initialize: function() {
        this.appUtil = new CASAppUtil();
        this.clientscriptorder = 0;

    },

    checkNull: function(responseBody) {
        if (responseBody == '' || responseBody == null || responseBody == 'null' || responseBody == undefined || responseBody == 'undefined') {
            return false;
        } else {
            return true;
        }
    },

    /*
      Function Name: checkThreadLimit
      Comments: This function checks the value of 'ThreadActivated' property.
      Updated On: 11 Oct 2021
      Updated By: Shivam Goyal
      Update Comments: Check the 'ThreadActivated' system Property value.
   
   */


    checkThreadLimit: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.checkThreadLimit. ');
            var grSys = new GlideRecord(this.appUtil.configuration.table.sys_properties);
            grSys.addQuery('name', 'x_vmw_cloudservice.ThreadActivated');
            grSys.query();
            if (grSys.next()) {
                var val = grSys.value;
                val = val.toLowerCase();
                CASLogger.debug('Inside CASDaoUtil.checkThreadLimit: val: ' + val);
                if (val == 'false') {
                    grSys.value = 'true';
                    grSys.update();
                } else {
                    CASLogger.debug('Inside  CASDaoUtil.checkThreadLimit : ThreadActivated property is already set to true: val: ' + val);
                }
            }

        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.checkThreadLimit: val: ' + val);
            CASLogger.error("Exception caught Inside CASDaoUtil.checkThreadLimit:   " + e + ". Error found" + e.stack);
        }
    },

    /*
      Function Name: actionForEndpoint
      Comments: This function is use for Activate/Deactivate/Deletion of endpoint.
      Created On: 13 July 2022
      Created By: Shivam Goyal
        */

    actionForEndpoint: function() {

        try {

            var action = current.request;
            var org = current.organization;

            if (action == 'true') {

                //Activate the Project and Catalog-item associated with Endpoint.
                CASLogger.debug('Inside CASDaoUtil.actionForEndpoint: Activate Endpoint: ' + org);

                var grProj = new GlideRecord(this.appUtil.configuration.table.project);
                grProj.addQuery('organization', org);
                grProj.query();
                while (grProj.next()) {
                    grProj.active = true;
                    grProj.update();
                }

                var grCatlg = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                grCatlg.addQuery('organisation_name', org);
                grCatlg.query();
                while (grCatlg.next()) {
                    grCatlg.active = true;
                    grCatlg.update();
                }

            } else if (action == 'false') {

                //Deactivate the Data associated with Endpoint.
                CASLogger.debug('Inside CASDaoUtil.actionForEndpoint: DeActivate Endpoint: ' + org);

                var grPro = new GlideRecord(this.appUtil.configuration.table.project);
                grPro.addQuery('organization', org);
                grPro.query();
                while (grPro.next()) {
                    grPro.active = false;
                    grPro.update();
                }

                var grCatlog = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                grCatlog.addQuery('organisation_name', org);
                grCatlog.query();
                while (grCatlog.next()) {
                    grCatlog.active = false;
                    grCatlog.update();
                }

                var grDeploy = new GlideRecord(this.appUtil.configuration.table.deployments);
                grDeploy.addQuery('u_project.organization', org);
                grDeploy.query();
                while (grDeploy.next()) {
                    grDeploy.operational_status = '6';
                    grDeploy.update();
                }

                var grMachine = new GlideRecord(this.appUtil.configuration.table.machines);
                grMachine.addQuery('project.organization', org);
                grMachine.query();
                while (grMachine.next()) {
                    grMachine.operational_status = '6';
					grMachine.remote_console_url ='';
                    grMachine.update();
                }

            } else if (action == 'delete') {
                //Delete the Data associated with Endpoint.
                CASLogger.debug('Inside CASDaoUtil.actionForEndpoint: Deletion of Endpoint: ' + org);

                var grCatalog = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                grCatalog.addQuery('organisation_name', org);
                grCatalog.query();
                while (grCatalog.next()) {
                    grCatalog.deleteMultiple();
                }

                var grDeployment = new GlideRecord(this.appUtil.configuration.table.deployments);
                grDeployment.addQuery('u_project.organization', org);
                grDeployment.query();
                while (grDeployment.next()) {
                    grDeployment.operational_status = '6';
                    grDeployment.update();
                }

                var grMachines = new GlideRecord(this.appUtil.configuration.table.machines);
                grMachines.addQuery('project.organization', org);
                grMachines.query();
                while (grMachines.next()) {
                    grMachines.operational_status = '6';
					grMachines.remote_console_url ='';
                    grMachines.update();
                }

                var grActions = new GlideRecord(this.appUtil.configuration.table.action);
                grActions.addQuery('deployment.u_project.organization', org);
                grActions.query();
                while (grActions.next()) {
                    grActions.deleteMultiple();
                }

                var grActionM = new GlideRecord(this.appUtil.configuration.table.action);
                grActionM.addQuery('machine.project.organization', org);
                grActionM.query();
                while (grActionM.next()) {
                    grActionM.deleteMultiple();
                }

                var grEndpoint = new GlideRecord(this.appUtil.configuration.table.register_cas);
                grEndpoint.addQuery('sys_id', org);
                grEndpoint.query();
                if (grEndpoint.next()) {
                    grEndpoint.deleteMultiple();
                }

            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.actionForEndpoint: action: ' + action);
            CASLogger.error("Exception caught Inside CASDaoUtil.actionForEndpoint:   " + e + ". Error found" + e.stack);
            return "exceptionError";
        }
    },


    /*
    Function Name: checkReconciledActions
    Comments: This function checks and deletes reconciled action catalogs
    Updated On: 17 May 2021
    Updated By: Bharat
    Update Comments: NA
    */
    checkReconciledActions: function(actList, organization, type) {
        try {
			var tCategory ='';
			if(type == 'resource'){
             tCategory = gs.getProperty(this.appUtil.configuration.properties.machineCategory) + "";
			} else if (type == 'deployment'){
				 tCategory = gs.getProperty(this.appUtil.configuration.properties.deploymentCategory) + "";
			}
            CASLogger.debug('Inside  CASDaoUtil.checkReconciledActions: ' + ' actList: ' + actList + ' Category: ' + tCategory);
            var ds_plugin1 = GlidePluginManager.isActive("com.glide.domain");
            var ds_plugin2 = GlidePluginManager.isActive("com.glideapp.servicecatalog.domain_separation");
            var grActCatalog = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            if ((ds_plugin1 == true || ds_plugin1 == 'true') && (ds_plugin2 == true || ds_plugin2 == 'true')) {
                grActCatalog.addEncodedQuery("organisation_name=" + organization);
            }
            grActCatalog.addEncodedQuery("category=" + tCategory);
            grActCatalog.query();
            while (grActCatalog.next()) {
                // Check if action catalog is not present in action response
                //CASLogger.debug('Inside grActCatalog gliderecord of CASDaoUtil.checkReconciledActions:');
                if (actList.indexOf(grActCatalog.name + "") == -1) {
                    CASLogger.debug('Inside if block of CASDaoUtil.checkReconciledActions:');
                    var grVariables = new GlideRecord(this.appUtil.configuration.table.variable);
                    grVariables.addQuery('cat_item', grActCatalog.sys_id + "");
                    grVariables.query();
                    while (grVariables.next()) {
                        // CASLogger.debug('Inside grVariables gliderecord of CASDaoUtil.checkReconciledActions:');
                        var item = new sn_sc.CatalogItemVariable(grVariables.sys_id + "");
                        item.deleteRecord('true'); // Delete variables
                    }

                    var catItem = new sn_sc.CatItem(grActCatalog.sys_id + "");
                    catItem.deleteRecord('true'); // Delete action catalog

                    CASLogger.info('Deleted Catalog: ' + grActCatalog.name + "");
                }
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkReconciledActions: Exception Block: ' + ' tCategory: ' + tCategory);
            CASLogger.error("Exception caught Inside CASDaoUtil.checkReconciledActions   " + e + ". Error found" + e.stack);
        }
    },

    inActiveDay2Variable: function(day2Present, organization) {
        try {
            var parse = JSON.parse(day2Present);
            var ds_plugin1 = GlidePluginManager.isActive("com.glide.domain");
            var ds_plugin2 = GlidePluginManager.isActive("com.glideapp.servicecatalog.domain_separation");
            var machineCategory = gs.getProperty(this.appUtil.configuration.properties.machineCategory) + "";
            var deploymentCategory = gs.getProperty(this.appUtil.configuration.properties.deploymentCategory) + "";
            var grActCatalog = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            grActCatalog.addEncodedQuery("category=" + machineCategory + '^ORcategory=' + deploymentCategory);
            if ((ds_plugin1 == true || ds_plugin1 == 'true') && (ds_plugin2 == true || ds_plugin2 == 'true')) {
                grActCatalog.addEncodedQuery("organisation_name=" + organization);
            }
            grActCatalog.query();
            while (grActCatalog.next()) {
                var name = grActCatalog.name + '';
                if (parse[name]) {
                    var allDay2 = grActCatalog.day2_actions.split(',');
                    for (var i = 0; i < allDay2.length - 1; i++) {
                        if (parse[name].indexOf(allDay2[i]) == -1) {
                            var grVariables1 = new GlideRecord(this.appUtil.configuration.table.variable);
                            grVariables1.addEncodedQuery('cat_item=' + grActCatalog.sys_id + "" + '^x_vmw_cloudservice_vra_day2_action=' + allDay2[i]);
                            grVariables1.query();
                            while (grVariables1.next()) {
                                grVariables1.active = 'false';
                                grVariables1.update();
                            }
                        }
                    }
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.inActiveDay2Variable: Exception Block: ' + ' day2Present: ' + day2Present);
            CASLogger.error("Exception caught Inside CASDaoUtil.inActiveDay2Variable   " + e + ". Error found" + e.stack);
        }

    },
	/*
    Function Name: insertcatalogclientscript
    Comments: This function creates client script for Confirmation popup before delete deployment or resource day-2
    Updated On: 04 aug 2023, 22 aug 23
    created By: Subhadip, Vrushali
    Update Comments: Added support of other day-2 actions to confirmation pop up.
    */
    insertcatalogclientscript: function(catalogId, resource,action) {
        try {
			CASLogger.debug('Inside CASDaoUtil.insertcatalogclientscript catalogId : '+ catalogId + ' resource : '+ resource + ' action :'+ action);
            var script = '';
			var confirmationMsg = '';
			resource = (resource=='Machine') ? 'resource': 'deployment';
			action = action + '';
			switch(action){
				case "Delete" :
					confirmationMsg = (resource == 'resource')? ' confirmationMessage = \'This action cannot be undone. Do you want to delete "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'This action cannot be undone. Do you want to delete "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \'; }' : 'confirmationMessage = \'This action cannot be undone. By deleting "\' + g_form.getDisplayValue("'+resource +'") + \'", you might also be deleting multiple resources.\';} else { confirmationMessage = \'This action cannot be undone. By deleting "\' + g_form.getDisplayBox("'+resource +'").value + \'", you might also be deleting multiple resources.\';}';
					break;
				case 'delete':
					confirmationMsg = (resource == 'resource')? ' confirmationMessage = \'This action cannot be undone. Do you want to delete "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'This action cannot be undone. Do you want to delete "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \'; }' : 'confirmationMessage = \'This action cannot be undone. By deleting "\' + g_form.getDisplayValue("'+resource +'") + \'", you might also be deleting multiple resources.\';} else { confirmationMessage = \'This action cannot be undone. By deleting "\' + g_form.getDisplayBox("'+resource +'").value + \'", you might also be deleting multiple resources.\';}';
					break;
				case 'Power On':
					confirmationMsg = 'confirmationMessage = \'Do you want to power on "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to power on "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Power Off':
					confirmationMsg = 'confirmationMessage = \'Do you want to power off "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to power off "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'PowerOn':
					confirmationMsg = 'confirmationMessage = \'Do you want to power on "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to power on "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'PowerOff':
					confirmationMsg = 'confirmationMessage = \'Do you want to power off "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to power off "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Reboot':
					confirmationMsg = 'confirmationMessage = \'Do you want to reboot "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to reboot"\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Reset':
					confirmationMsg = 'confirmationMessage = \'Do you want to reset "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to reset "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Restart':
					confirmationMsg = 'confirmationMessage = \'Do you want to restart "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to restart "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Shutdown':
					confirmationMsg = 'confirmationMessage = \'Do you want to shutdown "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to shutdown "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;
				case 'Suspend':
					confirmationMsg = 'confirmationMessage = \'Do you want to suspend "\' + g_form.getDisplayValue("'+resource +'") + \'" ? \'; } else { confirmationMessage = \'Do you want to suspend "\' + g_form.getDisplayBox("'+resource +'").value + \'" ? \';}';
					break;

			}
             script ="/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n" + "function onSubmit(){var confirmationMessage =''; if (window === null){"+ confirmationMsg +"var confirmed = confirm(confirmationMessage);return confirmed;}";
            
			var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': 'Popup before Onsubmit delete',
                'description': 'x_vmw_clientScript_',
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onSubmit',
                'sys_scope': app_scope,
                'cat_item': catalogId,
                'active': 'true',
            });
            this.clientscriptorder++;
            catalogClientScript.appliesToCatalogItem(true);
            catalogClientScript.addScript(script);           
      
            var existingClientScriptGr = new GlideAggregate(this.appUtil.configuration.table.clientScript);
            existingClientScriptGr.addQuery('cat_item', catalogId);
            existingClientScriptGr.addQuery('name', 'Popup before Onsubmit delete');
            existingClientScriptGr.addAggregate('COUNT');
            existingClientScriptGr.query();			
           existingClientScriptGr.next();
			var existingCount = existingClientScriptGr.getAggregate('COUNT');
			if (existingCount > 1) {
            // If the ClientScript already exists, delete the duplicates
            var existingClientScript = new GlideRecord(this.appUtil.configuration.table.clientScript);
            existingClientScript.addQuery('cat_item', catalogId);
            existingClientScript.addQuery('name', 'Popup before Onsubmit delete');
            existingClientScript.query();
            while (existingClientScript.next()) {
                 var catalogClientScripta = new sn_sc.CatalogClientScript();
                     catalogClientScripta.deleteRecord(existingClientScript.sys_id);                  
            }
				existingCount = 0;
        }
            if (existingCount < 1) {
                var catalogClientScriptId = catalogClientScript.create();
            }
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.insertcatalogclientscript');
            CASLogger.error("Exception caught Inside CASDaoUtil.insertcatalogclientscript:   " + e + ". Error found" + e.stack);
        }

    },

    /*
    Function Name: reconcileActions
    Comments: This function is used for getting the action list of resources
    Updated On: 28 May 2021
    Updated By: Bharat
    Update Comments: Added condition for organization is empty
    */
    reconcileActions: function() {
        try {
            var resDay2 = gs.getProperty(this.appUtil.configuration.properties.Fetch_Resource_Day2);
            if (resDay2 == 'true') {
                var actNameArray = [];
                var day2Present = {};
                var grResources = new GlideRecord(this.appUtil.configuration.table.machines);
                grResources.addEncodedQuery("operational_status=1^project.organizationISNOTEMPTY");
                grResources.query();
                while (grResources.next()) {
                    //  CASLogger.debug('Inside while block of grResources gliderecord of CASDaoUtil.reconcileActions:');
                    var organization = grResources.project.organization;
                    var endPoint = '';
                    var midserver = '';
                    var token = '';
                    var deploymentId = grResources.deploymentid;
                    var MachineId = grResources.machine_id;

                    if (organization.select_automation_service == 'vRealiseAutomationCloud') {
                        token = organization.api_token.getDecryptedValue().toString();
                        endPoint = organization.cas_url + this.appUtil.configuration.api.deployment + deploymentId + "/resources/" + MachineId + "/actions";
                        //CASLogger.debug('Inside CASDaoUtil.reconcileActions: cloud endpoint: ' + endPoint);
                    }

                    if (organization.select_automation_service == 'vrealizeAutomationService') {
                        endPoint = organization.hostname + this.appUtil.configuration.api.deployment + deploymentId + "/resources/" + MachineId + "/actions";
                        midserver = organization.mid_server.name;
                        token = organization.api_token.getDecryptedValue().toString();
                        // CASLogger.debug('Inside CASDaoUtil.reconcileActions: cloud endpoint: ' + endPoint + ' midserver: ' + midserver);

                    }

                    var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                    CASLogger.debug('Inside CASDaoUtil.reconcileActions:endPoint ' + endPoint + ' midserver: ' + midserver + ' response: ' + response.getBody());
                    if (response.haveError()) {
                        var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                        for (var s = 0; s < propertyStatus.length; s++) {
                            if (propertyStatus[s] == response.getStatusCode()) {
                                CASLogger.error('Import::: Resources: \n deploymentId: ' + deploymentId + ' \n resourceId: ' + MachineId + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CASDaoUtil.reconcileActions):");
                            } else {
                                CASLogger.error('Import::: Resources: \n deploymentId: ' + deploymentId + '\n resourceId: ' + MachineId + '\n endPoint: ' + endPoint + '\n REST call error found inside ImportStart.reconcileActions:\n Error found: ' + response.getErrorMessage());
                            }
                        }

                        return false;
                    } else {
                        var actResponse = response.getBody();
                        var res = this.checkNull(actResponse);
                        if (res == false || res == 'false') {
                            CASLogger.error('Inside null/empty if block of CASDaoUtil.reconcileActions :actResponse: ' + actResponse);
                            return false;
                        } else {
                            var parsedActBody = this.appUtil.parse(actResponse);
                            CASLogger.debug('Inside Else Block of CASDaoUtil.reconcileActions: actResponse ' + actResponse);
                            var parsedLength = parsedActBody.length;
                            for (var j = 0; j < parsedLength; j++) {

                                if (parsedActBody[j].valid == true || parsedActBody[j].valid == 'true') {

                                    if (day2Present[parsedActBody[j].displayName]) {
                                        if (day2Present[parsedActBody[j].displayName].indexOf(parsedActBody[j].id + "") == -1) {
                                            day2Present[parsedActBody[j].displayName].push(parsedActBody[j].id);
                                        }
                                    } else {
                                        day2Present[parsedActBody[j].displayName] = [];
                                        day2Present[parsedActBody[j].displayName].push(parsedActBody[j].id);
                                    }
                                }
                                if (actNameArray.indexOf(parsedActBody[j].displayName + "") == -1) {
                                    actNameArray.push(parsedActBody[j].displayName + "");
                                }
                            }
                        }
                    }
                }
                CASLogger.debug('Inside CASDaoUtil.reconcileActions: actNameArray: ' + actNameArray + 'day2Present: ' + JSON.stringify(day2Present));
                this.checkReconciledActions(actNameArray, organization,'resource');
                this.inActiveDay2Variable(JSON.stringify(day2Present), organization);

                CASLogger.debug('Inside  CASDaoUtil.reconcileActions');
            }
            return true;

        } catch (e) {
            CASLogger.error("Import::: Day2Actions: \n deploymentId: " + deploymentId + '\n resourceId: ' + MachineId + '\n endPoint: ' + endPoint + "\n Resource: Exception caught Inside CASDaoUtil.reconcileActions " + e + ".\n Error found" + e.stack);
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileActions: Exception Block: ' + 'response: ' + response + ' actNameArray: ' + actNameArray + ' deploymentId: ' + deploymentId + ' MachineId: ' + MachineId + ' actResponse: ' + actResponse + ' parsedLength: ' + parsedLength);
            return "exceptionError";
        }
    },

	
	reconcileActionsDep: function() {
        try {
			
            var resDay2 = gs.getProperty(this.appUtil.configuration.properties.Fetch_Deployment_Day2);
            if (resDay2 == 'true') {
                var actNameArray = [];
                var day2Present = {};
                var grResources = new GlideRecord(this.appUtil.configuration.table.deployments);
                grResources.addEncodedQuery("operational_status=1^organization_idISNOTEMPTY");
                grResources.query();
                while (grResources.next()) {
                    
                    var organization = grResources.u_project.organization;	
                    var endPoint = '';
                    var midserver = '';
                    var token = '';
                    var deploymentId = grResources.deployment_id;
                   
                    if (organization.select_automation_service == 'vRealiseAutomationCloud') {
                        token = organization.api_token.getDecryptedValue().toString();
                        endPoint = organization.cas_url + this.appUtil.configuration.api.deployment + deploymentId + "/actions";
                        
                    }
                    if (organization.select_automation_service == 'vrealizeAutomationService') {
                        endPoint = organization.hostname + this.appUtil.configuration.api.deployment + deploymentId + "/actions";
                        midserver = organization.mid_server.name;
                        token = organization.api_token.getDecryptedValue().toString();
                        

                    }
                    var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                    CASLogger.debug('Inside CASDaoUtil.reconcileActionsDep:endPoint ' + endPoint + ' midserver: ' + midserver + ' response: ' + response.getBody());
                    if (response.haveError()) {
                        var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                        for (var s = 0; s < propertyStatus.length; s++) {
                            if (propertyStatus[s] == response.getStatusCode()) {
                                CASLogger.error('Import::: Resources: \n deploymentId: ' + deploymentId +  '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CASDaoUtil.reconcileActions):");
                            } else {
                                CASLogger.error('Import::: Resources: \n deploymentId: ' + deploymentId +  '\n endPoint: ' + endPoint + '\n REST call error found inside ImportStart.reconcileActions:\n Error found: ' + response.getErrorMessage());
                            }
                        }

                        return false;
                    } else {
                        var actResponse = response.getBody();
                        var res = this.checkNull(actResponse);
                        if (res == false || res == 'false') {
                            CASLogger.error('Inside null/empty if block of CASDaoUtil.reconcileActions :actResponse: ' + actResponse);
                            return false;
                        } else {
                            var parsedActBody = this.appUtil.parse(actResponse);
                            CASLogger.debug('Inside Else Block of CASDaoUtil.reconcileActionsDep: actResponse ' + actResponse);
                            var parsedLength = parsedActBody.length;
                            for (var j = 0; j < parsedLength; j++) {
                                if (actNameArray.indexOf(parsedActBody[j].displayName + "") == -1) {
                                    actNameArray.push(parsedActBody[j].displayName + "");
                                }
                            }
                        }
                    }
                }
                CASLogger.debug('Inside CASDaoUtil.reconcileActionsDep: actNameArray: ' + actNameArray + 'day2Present: ' + JSON.stringify(day2Present));
                this.checkReconciledActions(actNameArray, organization,'deployment');
                CASLogger.debug('Inside  CASDaoUtil.reconcileActionsDep');
            }
            return true;

        } catch (e) {
            CASLogger.error("Import::: Day2Actions: \n deploymentId: " + deploymentId + '\n endPoint: ' + endPoint + "\n Resource: Exception caught Inside CASDaoUtil.reconcileActionsDep " + e + ".\n Error found" + e.stack);
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileActionsDep: Exception Block: ' + 'response: ' + response + ' actNameArray: ' + actNameArray + ' deploymentId: ' + deploymentId +  ' actResponse: ' + actResponse + ' parsedLength: ' + parsedLength);
            return "exceptionError";
        }
    },

    //     portalCapitalize: function(str1) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.portalCapitalize: Used for capitalizing the string: str1: ' + str1);
    //             var parsedStr = str1.split('.');
    //             parsedStr = parsedStr[parsedStr.length - 1];
    //             var arr = parsedStr.split('_');
    //             CASLogger.debug('Inside portalCapitalize:--- arr: ' + arr);
    //             var str = '';
    //             for (var i = 0; i < arr.length; i++) {
    //                 str += arr[i].charAt(0).toUpperCase() + arr[i].slice(1) + ' ';
    //                 if (str.startsWith("U ")) {
    //                     str = str.replace("U ", "");
    //                 } else if (str.startsWith("Sc "))
    //                     str = str.replace("Sc", "");
    //                 else if (str.startsWith("Vra"))
    //                     str = str.replace("Vra", "vRA");
    //             }
    //             CASLogger.debug('Inside portalCapitalize:--- str: ' + str);
    //             return str;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.portalCapitalize: Exception Block: ' + ' parsedStr: ' + parsedStr + ' arr: ' + arr + ' str: ' + str);
    //             CASLogger.error("Exception caught Inside CASDaoUtil.portalCapitalize   " + e + ". Error found" + e.stack);
    //         }
    //     },

    /*
    Function Name: insertDeploymentActionTable
    Comments: This function is inserting the Deployments Day2 Actions into Day2 Action Table.
    Updated On: 24 Sep 2021
    Updated By: Ayush
    Update Comments: Changed the value of recordCount field from 2000000000 to 50 into Day2 Action Table.
    */
    insertDeploymentActionTable: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertDeploymentActionTable: Insert Into Deployment Action Table:' + 'response: ' + current.response);
            var queueDeploymentId = current.request;
            var deploymentId = '';
            var endpoint = current.organization;
            var obj = this.appUtil.parse(current.response);
            var objLength = obj.length;
            CASLogger.debug('Inside insertDeploymentActionTable:---- queueDeploymentId: ' + queueDeploymentId + ' objLength: ' + objLength);
            var Actions = gs.getProperty(this.appUtil.configuration.properties.actions);
            CASLogger.debug('Inside  CASDaoUtil.insertDeploymentActionTable: Actions: ' + Actions);
            var grId = new GlideRecord(this.appUtil.configuration.table.deployments);
            grId.addQuery("deployment_id", queueDeploymentId);
            grId.query();
            if (grId.next()) {
                deploymentId = grId.sys_id;
                CASLogger.debug('Inside if block of table.deployments gliderecord of CASDaoUtil.insertDeploymentActionTable: deploymentId: ' + deploymentId);
            }
            for (i = 0; i < objLength; i++) {
                var check = Actions.indexOf(obj[i].name);
                CASLogger.debug('Inside for block of  CASDaoUtil.insertDeploymentActionTable: check: ' + check);
                if (check > -1 || obj[i].id.includes('custom')) {

                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("deployment", deploymentId);
                    vr.addQuery("action_id", obj[i].id);
                    vr.query();
                    if (vr.next()) {
                        CASLogger.debug('Inside if block of table.action gliderecord of CASDaoUtil.insertDeploymentActionTable: ');
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.deployment = deploymentId;
                        vr.description = obj[i].description + ' .';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.endpoint = endpoint;
                        if (vr.recordcount.toString().length == 50) {
                            vr.recordcount = '';
                        } else {
                            var count = vr.recordcount;
                            vr.recordcount = count + 1;
                            CASLogger.debug('Value of count for table.action gliderecord in CASDaoUtil.insertDeploymentActionTable is: count' + count);
                        }
                        //vr.setForceUpdae(true);
                        vr.setWorkflow(true);
                        vr.update();



                    } else {

                        vr.initialize();
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.deployment = deploymentId;
                        vr.description = obj[i].description + '.';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.endpoint = endpoint;
                        vr.setWorkflow(true);
                        var data = vr.insert();
                        CASLogger.debug('Inside else block of table.action gliderecord of CASDaoUtil.insertDeploymentActionTable: data: ' + data);
                    }
                }

            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertDeploymentActionTable: Exception Block: ' + ' queueDeploymentId: ' + queueDeploymentId + ' deploymentId: ' + deploymentId + ' objLength: ' + objLength + ' Actions: ' + Actions + ' check: ' + check + 'data: ' + data);
            CASLogger.error("Exception caught Inside CASDaoUtil.insertDeploymentActionTable.   " + e + ". Error found" + e.stack);
            return "exceptionError";
        }
    },


    /*
    Function Name : insertResourceActionTable
    Comments: This function is inserting the Resource Day2 Actions into Day2 Action Table.
    Updated On: 24 Sep 2021
    Updated By: Ayush
    Update Comments: Changed the value of recordCount field from 2000000000 to 50 into Day2 Action Table..
    */
    insertResourceActionTable: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertResourceActionTable: Insert Into Resource Action Table: response: ' + current.response);
            var queueMachineId = current.request;
            var machineId = '';
            var obj = this.appUtil.parse(current.response);
            var endpoint = current.organization;
            var objLength = obj.length;
            CASLogger.debug('Inside insertResourceActionTable:---- queueMachineId: ' + queueMachineId + '----- objLength: ' + objLength);
            var Actions = gs.getProperty(this.appUtil.configuration.properties.actions);
            CASLogger.debug('Inside  CASDaoUtil.insertResourceActionTable: Actions' + Actions);
            var grMid = new GlideRecord(this.appUtil.configuration.table.machines);
            grMid.addQuery("machine_id", queueMachineId);
            grMid.query();
            if (grMid.next()) {
                machineId = grMid.sys_id;
                CASLogger.debug('Inside if block of table.machines gliderecord of CASDaoUtil.insertResourceActionTable: machineId: ' + machineId);
            }
            for (i = 0; i < objLength; i++) {
                var check = Actions.indexOf(obj[i].name);
                CASLogger.debug('Inside for loop of CASDaoUtil.insertResourceActionTable: check: ' + check);
                if (check > -1 || obj[i].id.includes('custom')) {

                    var vr = new GlideRecord(this.appUtil.configuration.table.action);
                    vr.addQuery("machine", machineId);
                    vr.addQuery("action_id", obj[i].id);
                    vr.query();
                    if (vr.next()) {
                        CASLogger.debug('Inside if block of table.action gliderecord of CASDaoUtil.insertResourceActionTable:');
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.machine = machineId;
                        vr.description = obj[i].description + ' .';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.endpoint = endpoint;
                        if (vr.recordcount.toString().length == 50) {
                            vr.recordcount = '';
                        } else {
                            var count = vr.recordcount;
                            vr.recordcount = count + 1;
                            CASLogger.debug('Value of count for table.action gliderecord in CASDaoUtil.insertResourceActionTable is: count' + count);
                        }
                        //vr.setForceUpdate(true);
                        vr.setWorkflow(true);
                        vr.update();

                    } else {

                        vr.initialize();
                        vr.action_id = obj[i].id;
                        vr.name = obj[i].name;
                        vr.valid = obj[i].valid;
                        vr.machine = machineId;
                        vr.description = obj[i].description + '.';
                        vr.display_name = obj[i].displayName;
                        vr.action_type = obj[i].actionType;
                        vr.endpoint = endpoint;
                        vr.setWorkflow(true);
                        var data = vr.insert();
                        CASLogger.debug('Inside else block of table.action gliderecord of CASDaoUtil.insertDeploymentActionTable: data: ' + data);

                    }
                }
            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertResourceActionTable: Exception Block: ' + ' queueMachineId: ' + queueMachineId + ' machineId: ' + machineId + ' objLength: ' + objLength + ' Actions: ' + Actions + ' check: ' + check + 'data: ' + data);

            //need to change - machineId = resource id, deplyID, action name before Exception
            CASLogger.error("Import::: Day2 Action: \n resourceId: " + queueMachineId + "\n endPoint: " + current.organization.cas_url + "\n Exception caught inside CASDaoUtil.insertResourceActionTable  " + e + ".\n Error found" + e.stack);
            return "exceptionError";
        }
    },

    insertActionChoice: function(response, variable) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertActionChoice: Variable: ' + variable + 'response: ' + response);
            var grChoices = new GlideRecord(this.appUtil.configuration.table.choice);
            grChoices.initialize();
            grChoices.text = response;
            grChoices.value = response;
            grChoices.question = variable;
            var data = grChoices.insert();
            CASLogger.debug('Inside  CASDaoUtil.insertActionChoice: data: ' + data);
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.insertActionChoice: data: ' + data + ' variable: ' + variable + ' response: ' + response);
            CASLogger.error("Exception Caught inside CASDaoUtil.insertActionChoice " + e + ". Error found" + e.stack);
        }
    },

    insertActionChoiceString: function(title, value, variable) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertActionChoiceString: Title---' + title + ' value: ' + value + ' variable: ' + variable);
            var grChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            grChoice.addQuery('text', title);
            grChoice.addQuery('question', variable);
            grChoice.query();
            if (grChoice.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.insertActionChoiceString:');
                grChoice.value = value;
                grChoice.update();
            } else {
                grChoice.initialize();
                grChoice.text = title;
                grChoice.value = value;
                grChoice.question = variable;
                var data = grChoice.insert();
                CASLogger.debug('Inside else block of CASDaoUtil.insertActionChoiceString: data: ' + data);
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertActionChoiceString: Exception Block: ' + ' title: ' + title + ' value: ' + value + ' variable: ' + variable + ' data: ' + data);
            CASLogger.error("Exception Caught inside CASDaoUtil.insertActionChoiceString " + e + ". Error found" + e.stack);
        }
    },



    activeDeactiveCMDB: function(deploymentId, choice, resourceId, ActionName) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.activeDeactiveCMDB :activeDeactiveCMDB after day2 action:  DeploymentId: ' + deploymentId);
            var DeactiveDeployment = new GlideRecord(this.appUtil.configuration.table.deployments);
            DeactiveDeployment.addQuery("deployment_id", deploymentId);
            DeactiveDeployment.addQuery("operational_status", "1");
            DeactiveDeployment.query();
            CASLogger.debug('Inside  activeDeactiveCMDB : DeactiveDeployment' + DeactiveDeployment + ' resourceId: ' + resourceId);
            if (DeactiveDeployment.next()) {
				if(ActionName == 'Delete'){
                CASLogger.debug('Inside if block of table.deployments gliderecord of CASDaoUtil.activeDeactiveCMDB:');
                var DeactiveResource = new GlideRecord(this.appUtil.configuration.table.machines);
                if (resourceId != '' ) {
                    DeactiveResource.addQuery("machine_id", resourceId);
                } else {
                    DeactiveResource.addQuery("deploymentid", deploymentId);
                }
                DeactiveResource.query();
                while (DeactiveResource.next()) {
                    CASLogger.debug("This is delete for " + DeactiveResource.machine_id + 'and  resource has been retired');

                        DeactiveResource.operational_status = '6';
						DeactiveResource.remote_console_url ='';
                        this.deleteDay2ActionRecords("", DeactiveResource.machine_id);
                        DeactiveResource.active = choice;
                        DeactiveResource.update(); 
                }
				}
            if (resourceId == '' && ActionName == 'Delete') {
                CASLogger.debug("This is delete for " + deploymentId + 'and deployment has been retired');
                DeactiveDeployment.operational_status = '6';
                this.deleteDay2ActionRecords(deploymentId, '');
            }
            DeactiveDeployment.active = choice;
            DeactiveDeployment.update();
		}
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.activeDeactiveCMDB: Exception Block: ' + ' deploymentId: ' + deploymentId + ' resourceId: ' + resourceId + ' ActionName:' + ActionName);
            CASLogger.error("Exception Caught inside CASDaoUtil.activeDeactiveCMDB " + e + ". Error found" + e.stack);
        }
    },

    deleteDay2ActionRecords: function(deploymentId, resourceId, actionId) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.deleteDay2ActionRecords :deleteDay2ActionRecords after status retired:  resourceId: ' + resourceId);
            var vr = new GlideRecord(this.appUtil.configuration.table.action);
			
            if (deploymentId) {
                CASLogger.debug('Inside If---- deleteDay2ActionRecords:--- deploymentId: ' + deploymentId);
                vr.addQuery("deployment.deployment_id", deploymentId);
            } 
			if(resourceId){
                CASLogger.debug('Inside Else---- deleteDay2ActionRecords: ---resourceId: ' + resourceId);
                vr.addQuery("machine.machine_id", resourceId);
            }
			if(!(actionId == 'undefined' || actionId == undefined)){
				CASLogger.debug('Inside Else---- deleteDay2ActionRecords: ---actionId: ' + actionId);
				vr.addQuery("action_id", actionId);
			}
			vr.query();
            while (vr.next()) {
                vr.deleteMultiple();
                CASLogger.debug('Inside while loop of table.action gliderecord of CASDaoUtil.deleteDay2ActionRecords:');

            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteDay2ActionRecords: Exception Block: ' + ' deploymentId: ' + deploymentId + ' resourceId: ' + resourceId + ' actionId:'+ actionId);
            CASLogger.error("Exception Caught inside CASDaoUtil.deleteDay2ActionRecords " + e + ". Error found" + e.stack);
        }
    },



    deleteItemOptionRecord: function(actionID) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.deleteItemOptionRecord : Deletion of Item Option Record : ActionID: ' + actionID);
            var grVariable = new GlideRecord(this.appUtil.configuration.table.variable);
            grVariable.addQuery("x_vmw_cloudservice_vra_action", actionID);
            grVariable.query();
            while (grVariable.next()) {
                var item = new sn_sc.CatalogItemVariable(grVariable.sys_id);
                CASLogger.debug('Inside table.variable gliderecord of CASDaoUtil.deleteItemOptionRecord: item: ' + item);
                item.deleteRecord('true');
                //grVariable.active=false;
                //grVariable.update();
                //grVariable.deeleteMultile() ;
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteItemOptionRecord: Exception Block: ' + ' actionID: ' + actionID);
            CASLogger.error("Exception caught inside CASDaoUtil.deleteItemOptionRecord  " + e + ". Error found" + e.stack);
        }
    },

    reconcileDeployment: function(List, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileDeployment: reconcile of Deployment');
            var grDeployments = new GlideRecord(this.appUtil.configuration.table.deployments);
            grDeployments.addEncodedQuery("u_project.organization=" + current.organization + "^operational_status=1");
            grDeployments.query();
            while (grDeployments.next()) {
                var check = List.indexOf(grDeployments.deployment_id + '');
                if (check > -1) {
                    CASLogger.debug('Inside CASDaoUtil.reconcileDeployment: The record exists in the deployment table  ' + grDeployments.deployment_id);
                    grDeployments.operational_status = '6';
                    grDeployments.install_status = '7';
                    this.deleteDay2ActionRecords(grDeployments.deployment_id, '');
                    grDeployments.update();
                    var machineGr = new GlideRecord(this.appUtil.configuration.table.machines);
                    machineGr.addEncodedQuery('deploymentid=' + grDeployments.deployment_id + '^operational_status=1');
                    machineGr.query();
                    while (machineGr.next()) {
                        machineGr.operational_status = '6';
						machineGr.remote_console_url ='';
                        machineGr.install_status = '7';
                        machineGr.update();
                    }
                } else {
                    CASLogger.debug('Inside  CASDaoUtil.reconcileDeployment: The record does not exists in the deployment table or the status is not operational ' + grDeployments.deployment_id);
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileDeployment: Exception Block: ' + ' check: ' + check + 'DeploymentList: ' + List);
            CASLogger.error("Exception caught inside CASDaoUtil.reconcileDeployment  " + e + ". Error found" + e.stack);
        }
    },


   reconcileResourceForEachDeployment: function(deploymentId, existingResourceId, org, deletedResourceId) {
        try {
			CASLogger.debug('Inside  CASDaoUtil.reconcileResourceForEachDeployment: reconcile of resources based on deployment Id');
			var flag='false';
            var grMachine = new GlideRecord(this.appUtil.configuration.table.machines);
			
           if(!(deletedResourceId == 'undefined'|| deletedResourceId == undefined ) &&  existingResourceId == ''){
				grMachine.addEncodedQuery('deploymentid=' + deploymentId + '^machine_id='+ deletedResourceId + '^project.organization=' + org + '^operational_status=1');	
				flag='true';
			}else{
				grMachine.addEncodedQuery('deploymentid=' + deploymentId + '^project.organization=' + org + '^operational_status=1');
			}
            grMachine.query();
			while (grMachine.next()) {
				if (flag != 'true') {
					var Check = existingResourceId.indexOf(grMachine.machine_id + '');
					if (Check > -1) {
						CASLogger.debug('Inside CASDaoUtil.reconcileResourceForEachDeployment: The record exists in the resource table' + grMachine.machine_id);
					} else {
						CASLogger.debug('Inside CASDaoUtil.reconcileResourceForEachDeployment: The record does not exists at the server ' + grMachine.machine_id);
						flag = 'true';
					}
				}
				if (flag == 'true') {
					grMachine.operational_status = '6';
					grMachine.remote_console_url = '';
					grMachine.install_status = '7';
					this.deleteDay2ActionRecords('', grMachine.machine_id);
					grMachine.update();
					flag = 'false';
				}
			}
         } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileResourceForEachDeployment: Exception Block: ' + ' check: ' + check + 'existingResourceId: ' + existingResourceId + 'deploymentId' + deploymentId);
            CASLogger.error("Exception caught inside CASDaoUtil.reconcileResourceForEachDeployment  " + e + ". Error found" + e.stack);
        }
    },


    // 	ActionReconcileResource: function(machineList, current) {
    //     try {
    //         gr = new GlideRecord(this.appUtil.configuration.table.machines);
    //         gr.addEncodedQuery("project.organization=" + current.organization);
    //         gr.query();
    //         while (gr.next()) {
    //             var Check = machineList.indexOf(gr.machine_id);

    //             if (Check > -1) {

    //                 CASLogger.debug('The record exists in the list machine' + gr.name);
    //             } else {
    //                 var vr = new GlideRecord(this.appUtil.configuration.table.action);
    //                 vr.addQuery("machine.machine_id", gr.machine_id);  
    //                 vr.query;
    //                 while (vr.next()) {

    //                     vr.deleteMultiple();

    //                 }
    //                 gr.operational_status = '6';
    //                 gr.install_status = '7';
    //                 gr.update();
    //             }
    //         }
    //     } catch (e) {
    //         CASLogger.error("Exception caught inside CASDaoUtil.ActionReconcileResource  " + e) ;
    //     }
    // },


    //     updateActionRequest: function(current, response) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.updateActionRequest: update of Action Request: response: ' + response);
    //             var obj = this.appUtil.parse(response);
    //             var grAction = new GlideRecord(this.appUtil.configuration.table.actionRequests);
    //             grAction.addQuery("sys_id", current.sys_id);
    //             grAction.query();
    //             if (grAction.next()) {
    //                 var count = grAction.description;
    //                 CASLogger.debug('Inside If Block---updateActionRequest--- count: ' + count);
    //                 grAction.description = count + 1;
    //                 if (grAction.description == '111111111111111111111111111') {
    //                     grAction.status = 'FAILED';
    //                     grAction.state = 'Closed Incomplete';
    //                 }
    //                 grAction.action_name = obj.name;
    //                 if (obj.statusDetails != null) {
    //                     grAction.comment = obj.statusDetails;
    //                 }
    //                 grAction.requestedby = obj.requestedBy;
    //                 grAction.requester = obj.requester;
    //                 grAction.request_id = obj.id;
    //                 grAction.status = obj.status;
    //                 CASLogger.debug('Inside If Block---updateActionRequest--- status: ' + grAction.status);
    //                 if (grAction.status == "PENDING" || grAction.status == 'INPROGRESS' || grAction.status == 'CHECKING_APPROVAL' || grAction.status == 'APPROVAL_PENDING' || grAction.status == 'INITIALIZATION') {
    //                     grAction.state = 'INPROGRESS';
    //                 }
    //                 if (grAction.status == 'FAILED' || grAction.status == 'ABORTED') {
    //                     grAction.state = 'Closed Incomplete';
    //                 }
    //                 if (grAction.status == "SUCCESSFUL" || grAction.status == "COMPLETION") {
    //                     grAction.state = 'Closed Complete';
    //                 }

    //                 grAction.update();

    //             }

    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.updateActionRequest: Exception Block:' + 'status: ' + grAction.status);
    //             CASLogger.error("Exception caught inside CASDaoUtil.updateActionRequest  " + e + ". Error found" + e.stack);
    //         }
    //     },

    /*
    Function Name: getProjectId
    Comments: This function is returning projectsysid and projectid for Resource
    Updated On: 29 sep 2021
    Updated By: Vaibhav Dane
    */
    getProjectId: function(deploymentid) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.getProjectId----deploymentid: ' + deploymentid);
            var grDeploy = new GlideRecord(this.appUtil.configuration.table.deployments);
            grDeploy.addQuery("deployment_id", deploymentid);
            grDeploy.addEncodedQuery('operational_status=1');
            grDeploy.query();
            var project_details = '';
            if (grDeploy.next()) {
                var projectsysid = grDeploy.u_project;
                var projectid = grDeploy.project_id;
                project_details = projectsysid + ',' + projectid;
                CASLogger.debug('Inside if block of CASDaoUtil.getProjectId: project_detail: ' + project_details);
            }
            return project_details;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getProjectId: Exception Block: ' + ' deploymentid: ' + deploymentid + ' project_details: ' + project_details);
            CASLogger.error("Exception caught inside CASDaoUtil.getProjectId  " + e + ". Error found" + e.stack);

        }

    },

    /*
    Function Name: insertResource
    Comments: This function is inserting the Resource data into Resource_import_set table for Bulk Rsources.
    Updated On: 08 Sep 2022
    Updated By: Zabi M
    Update Comments: Added the condition for Deployment have Multiple Resource.
    */
    insertResource: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insertResource: insert of Resource: response: ' + current.response);
            var obj = this.appUtil.parse(current.response);
			if (obj.content != undefined) {
            var contentLength = obj.content.length;
            CASLogger.debug('Inside CASDaoUtil.insertResource: contentLength: ' + contentLength);
            for (i = 0; i < contentLength; i++) {
                var resourceId = obj.content[i].id;
                CASLogger.debug('Inside for loop of CASDaoUtil.insertResource: resourceId: ' + resourceId);
                var grImport = new GlideRecord(this.appUtil.configuration.table.machineImport);
                grImport.initialize();
                var keys = Object.keys(obj.content[i]);
                for (var k in keys) {
                    var par = obj.content[i][keys[k]];
                    if (par)
                        grImport[keys[k].toLowerCase()] = (par.constructor === Array || par.constructor === Object) ? JSON.stringify(par) : par;
                }
                if (current.request != "") {
                    grImport.deploymentid = current.request;
                }

                grImport.organization = current.organization;
                grImport.insert();
            }
			}else{
				var resourceId = obj.id;
                CASLogger.debug('Inside for loop of CASDaoUtil.insertResource: resourceId: ' + resourceId);
                var grImport = new GlideRecord(this.appUtil.configuration.table.machineImport);
                grImport.initialize();
                var keys = Object.keys(obj);
                for (var k in keys) {
                    var par = obj[keys[k]];
                    if (par)
                        grImport[keys[k].toLowerCase()] = (par.constructor === Array || par.constructor === Object) ? JSON.stringify(par) : par;
                }
                if (current.request != "") {
                    grImport.deploymentid = current.request;
                }

                grImport.organization = current.organization;
                grImport.insert();
				
			}
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertResource: Exception Block: ' + ' resourceId: ' + resourceId);
            CASLogger.error("Import::: Resource: \n endPoint: " + current.organization.cas_url + "\n Exception caugth inside CASDaoUtil.insertResource " + e + ".\n Error found" + e.stack);
            return "exceptionError";
        }
    },

    /*
    Function Name: insertCMDBData
    Comments: This function is inserting the Deployments data into deployment_import_set table.
    Updated On: 23 sep 2021
    Updated By: Shivam Goyal
    Update Comments: Added the condition for Handle Multiple deployments.
    */


    insertCMDBData: function(current) {
        try {

            CASLogger.debug('Inside  CASDaoUtil.insertCMDBData:insert of CMDB Data: response: ' + current.response);
            var obj = this.appUtil.parse(current.response);
            if (obj.content != undefined) {
                CASLogger.debug('Inside if block of CASDaoUtil.insertCMDBData:');

                //This code is to parse the deployments schema after running CMDB job schedule.

                for (var i = 0; i < obj.content.length; i++) {
                    var deploymentId = obj.content[i].id;
                    CASLogger.debug('Inside for loop of CASDaoUtil.insertCMDBData: deploymentId: ' + deploymentId);
                    var inputs = this.appUtil.stringify(obj.content[i].inputs);
                    var expense = this.appUtil.stringify(obj.content[i].expense);
                    var grDimport = new GlideRecord(this.appUtil.configuration.table.deploymentImport);
                    grDimport.initialize();
                    grDimport.deployment_id = obj.content[i].id;
                    grDimport.u_name = obj.content[i].name;
                    grDimport.orgid = obj.content[i].orgId;
                    grDimport.organization = current.organization;
                    if (obj.content[i].catalogItemId != null) {
                        grDimport.catalog_item_id = obj.content[i].catalogItemId;
                    }
                    if (obj.content[i].catalogItemVersion != null) {
                        grDimport.catalog_item_version = obj.content[i].catalogItemVersion;
                    }

                    grDimport.blueprintid = obj.content[i].blueprintId;
                    if (obj.content[i].blueprintVersion != null) {
                        grDimport.blueprint_version = obj.content[i].blueprintVersion;
                    }

                    grDimport.deployment_createdat = obj.content[i].createdAt;
                    grDimport.deployment_createdby = obj.content[i].createdBy;
                    grDimport.deployment_ownedby = obj.content[i].ownedBy;
                    grDimport.deployment_lastupdatedat = obj.content[i].lastUpdatedAt;
                    grDimport.deploymebt_lastupdatedby = obj.content[i].lastUpdatedBy;
                    grDimport.deployment_stimulated = obj.content[i].simulated;
                    grDimport.deployment_inputs = inputs;
                    grDimport.expense = expense;
                    if (obj.content[i].description != null) {
                        grDimport.description = obj.content[i].description;
                    }
                    grDimport.projectid = obj.content[i].projectId;
                    if (obj.content[i].status != null) {
                        grDimport.deployment_status = obj.content[i].status;
                    }
                    if (obj.content[i].leaseExpireAt !== null) {
                        grDimport.expires_on = obj.content[i].leaseExpireAt;
                    }
                    grDimport.insert();
                    this.insert("preImportResource", deploymentId, '', current.organization);
                }

            } else {

                //This code is to parse the deployments schema after the request(RITM) is fulfilled.

                var inputs = this.appUtil.stringify(obj.inputs);
                var deploymentId = obj.id;
                CASLogger.debug('Inside Else Block of insertCMDBData---inputs: ' + inputs + '----- deploymentId: ' + deploymentId);

                var expense = this.appUtil.stringify(obj.expense);
                var grDep = new GlideRecord(this.appUtil.configuration.table.deploymentImport);
                grDep.initialize();
                grDep.deployment_id = obj.id;
                grDep.u_name = obj.name;
                grDep.orgid = obj.orgId;
                grDep.organization = current.organization;
                if (obj.catalogItemId != null) {
                    grDep.catalog_item_id = obj.catalogItemId;
                }
                if (obj.catalogItemVersion != null) {
                    grDep.catalog_item_version = obj.catalogItemVersion;
                }

                grDep.blueprintid = obj.blueprintId;
                if (obj.blueprintVersion != null) {
                    grDep.blueprint_version = obj.blueprintVersion;
                }

                grDep.deployment_createdat = obj.createdAt;
                grDep.deployment_createdby = obj.createdBy;
                grDep.deployment_ownedby = obj.ownedBy;
                grDep.deployment_lastupdatedat = obj.lastUpdatedAt;
                grDep.deploymebt_lastupdatedby = obj.lastUpdatedBy;
                grDep.deployment_stimulated = obj.simulated;
                grDep.deployment_inputs = inputs;
                grDep.expense = expense;
                if (obj.description != null) {
                    grDep.description = obj.description;
                }
                grDep.projectid = obj.projectId;
                if (obj.status != null) {
                    grDep.deployment_status = obj.status;
                }
                if (obj.leaseExpireAt !== null) {
                    grDep.expires_on = obj.leaseExpireAt;
                }
                grDep.insert();
                this.insert("preImportResource", deploymentId, '', current.organization);

            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertCMDBData: Exception Block: ' + ' deploymentId: ' + deploymentId + ' inputs: ' + inputs + ' expense: ' + expense);
            CASLogger.error('Import::: CMDB: \n DeploymentId: ' + deploymentId + "\n Exception caugth inside CASDaoUtil.insertCMDBData " + e + ".\n Error found" + e.stack);
            return false;
        }
    },

    transformProjectCheck: function(projectId, organization) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.transformProjectCheck: projectId: ' + projectId);
            var grProject = new GlideRecord(this.appUtil.configuration.table.project);
            grProject.addQuery("project_id", projectId);
            grProject.addQuery('organization', organization);
            grProject.query();
            while (grProject.next()) {

                var projectSysId = grProject.sys_id;
                CASLogger.debug('Inside while Block---transformProjectCheck: projectSysId: ' + projectSysId);
                return projectSysId;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.transformProjectCheck: Exception Block: ' + ' projectId: ' + projectId + ' projectSysId: ' + projectSysId);
            CASLogger.error("Exception caugth inside CASDaoUtil.transformProjectCheck " + e + ". Error found" + e.stack);
        }
    },

    /*
       Function Name: ScheduleJobForCMDB
               Comments:  
               Updated On: 28-sep-2021
      		 Updated By:Ajay Gunjal
               Update Comments: Added multiple conditions to check AriaAutomation outage before insert CMDB topics.
      */

    ScheduleJobForCMDB: function(source, time) {
        try {

            this.vRAStatus = new ImportStart();
            var runPostUpgradeScript = gs.getProperty(this.appUtil.configuration.properties.runPostUpgradeScript);
            CASLogger.debug('Inside  CASDaoUtil.ScheduleJobForCMDB: runPostUpgradeScript: ' + runPostUpgradeScript);
            if (runPostUpgradeScript + '' != 'true') {
                var grCas = new GlideRecord(this.appUtil.configuration.table.register_cas);
                grCas.addQuery("active", "true");
                grCas.query();
                while (grCas.next()) {
                    var g = new AvoidParallelScheduleJobs();
                    var check = g.checkQueueEmpty('CMDB Import', grCas.sys_id);
                    CASLogger.debug('Inside While Block CASDaoUtil.ScheduleJobForCMDB: Value of Check: ' + check);

                    if (check == true) {
                        var checkStatus = this.vRAStatus.checkStatusCMDB(grCas);
                        CASLogger.debug('Inside CASDaoUtil.ScheduleJobForCMDB: CheckStatus: ' + checkStatus);
                        switch (checkStatus) {
                            case 'true':
                                if (!gs.nil(time)) {
                                    this.insert("StartImportCMDB", source, time, grCas.sys_id + '');
									this.insert("reconcileCMDBDeployments", source, time, grCas.sys_id + '');
                                } else {
                                    this.insert("StartImportCMDB", source, " ", grCas.sys_id + '');
									this.insert("reconcileCMDBDeployments", source, " ", grCas.sys_id + '');
                                }
                                break;
                            case 'NoOutage':
                                CASLogger.error("Unable to run  Import Resources and CMDB scheduled job for " + grCas.name + " endpoint. REST call error found inside ImportStart.checkStatusCMDB. Please find error logs for more details");
                                break;
                            case 'Outage':
                                CASLogger.error("There is an outage for " + grCas.name + " endpoint and unable to connect with . Aborting the scheduled job execution. Next job will run based on the defined schedule");
                                break;
                            case 'Exception':
                                CASLogger.error("Exception found during Import Resources and CMDB scheduled job run for " + grCas.name + " endpoint. Aborting the scheduled job execution. Next job will run based on the defined schedule");
                                break;
                        }


                    }
                    if (check == false) {
                        CASLogger.info('Schedule Job is already running for CMDB Import');
                    }

                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.ScheduleJobForCMDB: Exception Block: ' + ' runPostUpgradeScript: ' + runPostUpgradeScript + ' checkStatus: ' + checkStatus);
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduleJobForCMDB" + e + ". Error found" + e.stack);
        }
    },

	
	

    runPostUpgradeScript: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.runPostUpgradeScript:');
            var checkEntitlement = '';
            var resource = new GlideRecord(this.appUtil.configuration.table.machines);
            resource.addQuery('operational_status', 1);
            resource.query();
            while (resource.next()) {
                //     CASLogger.debug('Inside while block of table.machines gliderecord of CASDaoUtil.runPostUpgradeScript:');
                if (resource.object_id == '') {
                    resource.object_id = resource.machine_id;
                }
                if (resource.discovery_source == '') {
                    resource.discovery_source = 'ITSM 8.x';
                }
                resource.setWorkflow(false);
                resource.update();
            }

            var checkEnt = new GlideRecord(this.appUtil.configuration.table.entitlement);
            checkEnt.query();
            if (checkEnt.next()) {
                checkEntitlement = 'true';
                CASLogger.debug('Inside if block of table.entitlement gliderecord of CASDaoUtil.runPostUpgradeScript: checkEntitlement: ' + checkEntitlement);
            }



            var projectGR = new GlideRecord(this.appUtil.configuration.table.project);
            projectGR.query();
            while (projectGR.next()) {
                projectGR.sc_catalog = (gs.getProperty(this.appUtil.configuration.properties.catalogSysID).trim());
                projectGR.parent = (gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID).trim());
                projectGR.update();
                // CASLogger.debug('Inside table.project gliderecord of CASDaoUtil.runPostUpgradeScript:');
            }
            if (checkEntitlement == 'true') {
                var usercriteria = '';
                var usercriteriaGR = new GlideRecord('user_criteria');
                usercriteriaGR.addEncodedQuery('name=VMware Aria Automation default entitlement');
                usercriteriaGR.query();
                if (usercriteriaGR.next()) {
                    usercriteria = usercriteriaGR.sys_id;
                    CASLogger.debug('Inside user_criteria gliderecord of CASDaoUtil.runPostUpgradeScript: usercriteria: ' + usercriteria);
                }
                var catalogGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                //catalogGR.addEncodedQuery('organisation_nameISNOTEMPTY');
                catalogGR.query();
                while (catalogGR.next()) {
                    var catalog = catalogGR.sys_id;
                    // CASLogger.debug('Inside table.catalogItem gliderecord of CASDaoUtil.runPostUpgradeScript: catalogGR_sysid: ' + catalog);
                    var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                    mtomGR.initialize();
                    mtomGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                    mtomGR.sc_cat_item = catalog;
                    mtomGR.user_criteria = usercriteria;
                    mtomGR.insert();

                }

                var deployment = '';
                var machine = '';
                var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                var grEnt = new GlideRecord(this.appUtil.configuration.table.entitlement);
                grEnt.addEncodedQuery('deployment_actionsISNOTEMPTY^ORmachine_actionsISNOTEMPTY');
                grEnt.query();
                while (grEnt.next()) {
                    var UserCriteria = new sn_uc.UserCriteria();
                    //   CASLogger.debug('Inside table.entitlement gliderecord of CASDaoUtil.runPostUpgradeScript: UserCriteria: ' + UserCriteria);
                    var attributes = {
                        'sys_scope': app_scope,
                        'name': grEnt.name + '_vRACS_day2Actions',
                        'user': grEnt.entitled_users + '',
                        'group': grEnt.entitled_groups + ''
                    };
                    var inserted_record_id = UserCriteria.create(attributes, true);

                    if (grEnt.deployment_actions) {
                        deployment = grEnt.deployment_actions;
                        CASLogger.debug('Type of table.entitlement in CASDaoUtil.runPostUpgradeScript is:  deployment_action: ' + deployment);

                    }
                    if (grEnt.machine_actions) {
                        machine = grEnt.machine_actions;
                        CASLogger.debug('Type of table.entitlement in CASDaoUtil.runPostUpgradeScript is:  machine_action: ' + machine);
                    }
                    var id = deployment + ',' + machine;
                    var deployment_name = '';
                    var machine_name = '';
                    var dayGR = new GlideRecord(this.appUtil.configuration.table.actionEntitlement);
                    dayGR.addEncodedQuery('sys_idIN' + id);

                    dayGR.query();
                    while (dayGR.next()) {
                        CASLogger.debug('Inside table.actionEntitlement gliderecord of CASDaoUtil.runPostUpgradeScript:');
                        if (dayGR.type == 'Deployment') {
                            deployment_name = deployment_name + dayGR.display_name + ',';
                        }
                        if (dayGR.type == 'Resource') {
                            machine_name = machine_name + dayGR.display_name + ',';
                        }
                    }
                    var catGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                    var deploymentCategory = gs.getProperty(this.appUtil.configuration.properties.deploymentCategory);
                    catGR.addEncodedQuery('category=' + deploymentCategory + '^nameIN' + deployment_name);
                    catGR.query();
                    while (catGR.next()) {
                        var catalog = catGR.sys_id;
                        CASLogger.debug('Inside table.catalogItem gliderecord for deploymentCategory in  CASDaoUtil.runPostUpgradeScript: catalog_sys_id: ' + catalog);
                        var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                        mtomGR.initialize();
                        mtomGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                        mtomGR.sc_cat_item = catalog;
                        mtomGR.user_criteria = inserted_record_id;
                        mtomGR.insert();

                    }
                    var catGR1 = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                    var resourceCategory = gs.getProperty(this.appUtil.configuration.properties.machineCategory);
                    catGR1.addEncodedQuery('category=' + resourceCategory + '^nameIN' + machine_name);
                    catGR1.query();
                    while (catGR1.next()) {
                        var catalog = catGR1.sys_id;
                        CASLogger.debug('Inside table.catalogItem gliderecord for machineCategory in  CASDaoUtil.runPostUpgradeScript: catalog_sys_id: ' + catalog);
                        var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                        mtomGR.initialize();
                        mtomGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                        mtomGR.sc_cat_item = catalog;
                        mtomGR.user_criteria = inserted_record_id;
                        mtomGR.insert();



                    }

                    //}

                }
            }


            gs.setProperty(this.appUtil.configuration.properties.runPostUpgradeScript, false);

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.runPostUpgradeScript: Exception Block: ' + ' attributes: ' + attributes + ' inserted_record_id' + inserted_record_id + ' deployment: ' + deployment + ' machine: ' + machine + ' app_scope: ' + app_scope + ' id: ' + id + ' deployment_name: ' + deployment_name + ' machine_name: ' + machine_name + ' deploymentCategory: ' + deploymentCategory + ' resourceCategory: ' + resourceCategory + ' catalog: ' + catalog);
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduleJobForCMDB" + e + ". Error found" + e.stack);
        }
    },


    ScheduledJobProjectImport: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.ScheduledJobProjectImport:');
            var grCas = new GlideRecord(this.appUtil.configuration.table.register_cas);
            grCas.addQuery("active", "true");
            grCas.query();
            while (grCas.next()) {
                var g = new AvoidParallelScheduleJobs();
                var check = g.checkQueueEmpty('Project Import', grCas.sys_id);
                CASLogger.debug('Inside while block of CASDaoUtil.ScheduledJobProjectImport: check: ' + check);
                if (check == true) {
                    this.insert("StartImportProject", " ", " ", grCas.sys_id + '');
                    this.insert("ReconcileImportProject", " ", " ", grCas.sys_id + '');
                }

                if (check == false) {
                    CASLogger.info('Schedule job is already running for Project Import');
                }


            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.ScheduledJobProjectImport: Exception Block: ' + ' check: ' + check);
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduledJobProjectImport" + e + ". Error found" + e.stack);
        }

    },


    ScheduledJobCatalogImport: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.ScheduledJobCatalogImport:');
            var grCat = new GlideRecord(this.appUtil.configuration.table.register_cas);
            grCat.addQuery("active", "true");
            grCat.query();
            while (grCat.next()) {
                var g = new AvoidParallelScheduleJobs();
                var check = g.checkQueueEmpty('Catalog Import', grCat.sys_id);
                CASLogger.debug('Inside while block of CASDaoUtil.ScheduledJobCatalogImport: check: ' + check);
                if (check == true) {
                    this.insert("ScheduledImportCatalog", " ", "", grCat.sys_id + '');
                    this.insert("ReconcileImportCatalog", " ", " ", grCat.sys_id + '');
                }
                if (check == false) {

                    CASLogger.info('Schedule job is already running for Catalog Import');
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.ScheduledJobCatalogImport: Exception Block: ' + ' check: ' + check);
            CASLogger.error("Exception caught inside CASDaoUtil.ScheduledJobCatalogImport" + e + ". Error found" + e.stack);
        }

    },


    ScheduledJobForDeleteQueue: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.ScheduledJobForDeleteQueue:');
            var grQueue = new GlideRecord(this.appUtil.configuration.table.queue);
            var duration = gs.getProperty(this.appUtil.configuration.properties.duration);
            grQueue.addEncodedQuery('sys_created_on<=javascript:gs.daysAgo(' + duration + ')');
            grQueue.deleteMultiple();
            CASLogger.info('Inside CASDaoUtil: Record Deleted from CAS Queue');
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.ScheduledJobForDeleteQueue: Exception Block: ' + ' duration: ' + duration);
            CASLogger.error('Exception caught inside CASDaoUtil.ScheduledJobForDeleteQueue: ' + e + ". Error found" + e.stack);
            this.errorHandler.notify("Exception caught inside CASDaoUtil.ScheduledJobForDeleteQueue: " + e);
        }
    },


    deleteDuplicate: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.deleteDuplicate:');
            var prop1 = gs.getProperty(this.appUtil.configuration.properties.machineCategory);
            var prop2 = gs.getProperty(this.appUtil.configuration.properties.deploymentCategory);
            var grCat = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            grCat.addEncodedQuery('category=' + prop1 + '^ORcategory=' + prop2);
            grCat.query();
            while (grCat.next()) {
                var grVar = new GlideAggregate(this.appUtil.configuration.table.variable);
                grVar.addEncodedQuery('cat_item=' + grCat.sys_id);
                grVar.groupBy('name');
                grVar.query();
                while (grVar.next()) {
                    var testGR1 = new GlideAggregate(this.appUtil.configuration.table.variable);
                    testGR1.addEncodedQuery('name=' + grVar.name + '^cat_item=' + grCat.sys_id);
                    testGR1.addAggregate('COUNT');
                    testGR1.query();
                    var count = '';
                    if (testGR1.next()) {
                        count = testGR1.getAggregate('COUNT');
                    }
                    if (count > 1) {
                        var testGR2 = new GlideRecord(this.appUtil.configuration.table.variable);
                        testGR2.addEncodedQuery('name=' + grVar.name + '^cat_item=' + grCat.sys_id);
                        testGR2.query();
                        testGR2.next();
                        while (testGR2.next()) {
                            CASLogger.info('Inside while CASDaoUtil.deleteDuplicate-Deleted Record name: ' + testGR2.name);
                            testGR2.deleteRecord();
                        }
                    }
                }
            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteDuplicate: Exception Block: ' + e);
            CASLogger.error("Exception caught inside CASDaoUtil.deleteDuplicate" + e + ". Error found" + e.stack);
        }
    },

    UpdateApiToken: function() {
        try {
            CASLogger.debug('Inside CASDaoUtil.updateApiToken: ');
            var runPostUpgradeScript = gs.getProperty(this.appUtil.configuration.properties.runPostUpgradeScript);
            if (runPostUpgradeScript + '' == 'true') {
                CASLogger.debug('Inside if block of CASDaoUtil.updateApiToken:');
                this.runPostUpgradeScript();
            }
            var grReg = new GlideRecord(this.appUtil.configuration.table.register_cas);
            grReg.addQuery("active", "true");
            grReg.query();
            while (grReg.next()) {

                var updateToken = new EndpointRegister().generateApiToken(grReg);
                CASLogger.debug('Inside while block of CASDaoUtil.updateApiToken: updateToken: ' + updateToken);
                if (updateToken != "")
                    grReg.api_token = updateToken;
                grReg.update();
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.updateApiToken: Exception Block: ' + ' runPostUpgradeScript: ' + runPostUpgradeScript + ' updateToken: ' + updateToken);
            CASLogger.error("Exception caught inside CASDaoUtil.updateApiToken" + e + ". Error found" + e.stack);
        }
    },



    insert: function(topic, response, request, selectedOrganization, state) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.insert: Topic: ' + topic + ' response: ' + response + ' request: ' + request);
            //this.appUtil = new CASAppUtil();
            var queueGR = new GlideRecord(this.appUtil.configuration.table.queue);
            queueGR.initialize();
            queueGR.topic = topic;
            queueGR.response = response;
            queueGR.request = request;
            if (topic == "makeActionSchemaCalls") {
                queueGR.day_2_record = response;
            }
            queueGR.organization = selectedOrganization;
            if (!gs.nil(state)) {
                queueGR.state = state;
            } else {
                queueGR.state = 'Ready';
            }
            if (topic == 'actionSchema') {
                var unique = response + '--' + request + "--" + queueGR.state + "--" + new GlideDateTime() + '';
                var key = this.appUtil.stringToHash(unique);
                queueGR.uniquefield = key;
            }
            queueGR.insert();

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insert: Exception Block: ' + ' topic: ' + topic + ' response: ' + response + ' request: ' + request);
            CASLogger.error("Exception caught inside CASDaoUtil.InsertIntoQueueTable" + e + ". Error found" + e.stack);
        }

    },

    GetOrganizationId: function(selectedProjects) {

        try {
            CASLogger.debug('Inside  CASDaoUtil.GetOrganizationId : getting of organizationId---selectedProjects: ' + selectedProjects);
            var grPid = new GlideRecord(this.appUtil.configuration.table.project);
            grPid.addQuery("sys_id", selectedProjects);
            grPid.query();
            while (grPid.next()) {

                //return grPid.organization;
                return grPid;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.GetOrganizationId: Exception Block: ' + ' selectedProjects: ' + selectedProjects);
            CASLogger.error("Exception caught inside CASDaoUtil.GetOrganizationId" + e + ". Error found" + e.stack);
        }
    },



    SelectedOrganizationCheck: function(selectedOrganization) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.SelectedOrganizationCheck---SelectedOrganization: ' + selectedOrganization);
            var casGR = new GlideRecord(this.appUtil.configuration.table.register_cas);
            casGR.addQuery("sys_id", selectedOrganization);
            casGR.query();
            if (casGR.next()) {

                return true;
            }
        } catch (e) {
            CASLogger.error("Exception caught inside CASDaoUtil.SelectedOrganizationCheck" + e + ". Error found" + e.stack);
        }
    },

    /*
    Function Name: createProject
    Comments: This function used to create the project
    Updated On: 26 Aug 2021
    Updated By: Ajay
    Update Comments: Handle System property value .
    */

    createProject: function(current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.createProject: response: ' + current.response);
            //by Manish.
            var queueResponse = this.appUtil.parse(current.response);
            var organization = current.organization;

            //var casHost=this.appUtil.configuration.api.hostname;

            //             var endPoint = '';
            //             var midserver = '';
            //             var token = '';
            //             var numOfDeploy = '';

            //             //for cas.
            //             if (organization.select_automation_service == 'vRealiseAutomationCloud') {
            //                 token = current.organization.api_token.getDecryptedValue().toString();
            //                 endPoint = organization.cas_url + "/deployment/api/projects/" + queueResponse.id + "/deployment-count";
            //             }

            //             //for vra.
            //             if (organization.select_automation_service == 'vrealizeAutomationService') {

            //                 endPoint = organization.hostname + "/deployment/api/projects/" + queueResponse.id + "/deployment-count";
            //                 midserver = organization.mid_server.name;
            //                 token = current.organization.api_token.getDecryptedValue().toString();
            //             }
            //             var response1 = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);

            //             if (response1.haveError()) {
            //                 CASLogger.error('REST call error found inside CASDaoUtil.createProject: ' + response.getErrorMessage());
            //                 return;

            //             } else {
            //                 var responsebody = response1.getBody();
            //                 var obj1 = this.appUtil.parse(responsebody);

            //                 numOfDeploy = obj1.totalElements;
            //             }

            //var groupName = gs.getProperty(this.appUtil.configuration.properties.projectGroupName);
            var obj = this.appUtil.parse(current.response);
            var ProjectGR = new GlideRecord(this.appUtil.configuration.table.project);
            ProjectGR.addQuery("project_id", obj.id);
            ProjectGR.addQuery('organization', organization);
            ProjectGR.query();
            if (ProjectGR.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.createProject:');
                ProjectGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                ProjectGR.sc_catalog = (gs.getProperty(this.appUtil.configuration.properties.catalogSysID).trim());
                ProjectGR.parent = (gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID).trim());
                ProjectGR.title = obj.name;
                ProjectGR.project_name = obj.name;
                ProjectGR.project_description = obj.description;
                ProjectGR.project_id = obj.id;
                ProjectGR.organization_id = obj.orgId;
                ProjectGR.administrator_user = obj.administrators;
                ProjectGR.member_user = obj.members;
                // 				var groupTable = new GlideRecord(this.appUtil.configuration.table.groups_table);
                // 				groupTable.addQuery("name", groupName + obj.name);
                // 				groupTable.query();
                // 				if(groupTable.next()){
                // 				ProjectGR.project_group = groupTable.sys_id;
                // 				}
                ProjectGR.cost = obj.cost + " " + obj.costUnit;
                ProjectGR.organization = current.organization;
                //by Manish
                //ProjectGR.u_deployments = numOfDeploy;
                //
                ProjectGR.update();

            } else {

                ProjectGR.initialize();
                ProjectGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                ProjectGR.sc_catalog = (gs.getProperty(this.appUtil.configuration.properties.catalogSysID).trim());
                ProjectGR.parent = (gs.getProperty(this.appUtil.configuration.properties.parentCategorySysID).trim());
                ProjectGR.title = obj.name;
                ProjectGR.project_name = obj.name;
                ProjectGR.project_description = obj.description;
                ProjectGR.project_id = obj.id;
                ProjectGR.organization_id = obj.orgId;
                ProjectGR.administrator_user = obj.administrators;
                ProjectGR.member_user = obj.members;
                // 				var grpTable = new GlideRecord(this.appUtil.configuration.table.groups_table);
                // 				grpTable.addQuery("name", groupName + obj.name);
                // 				grpTable.query();
                // 				if(grpTable.next()){
                // 					ProjectGR.project_group = grpTable.sys_id;
                // 				}
                ProjectGR.cost = obj.cost + " " + obj.costUnit;
                ProjectGR.organization = current.organization;
                //by Manish
                //ProjectGR.u_deployments = numOfDeploy;
                //
                var data = ProjectGR.insert();
                CASLogger.debug('Inside Else Block of CASDaoUtil.createProject: data: ' + data);
            }
            return true;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.createProject: Exception Block: ' + ' response: ' + current.response);
            CASLogger.error("Import::: Project: " + "\n ProjectId: " + obj.id + "\n Project Name: " + obj.name + "\n Exception Caught inside CASDaoUtil.createProject" + e + ".\n Error found" + e.stack);
            return "exceptionError";
        }

    },



    /*
															USAGE: This function is used to create catalog categories for catalog
															PARAM: catalog-> Contains the sysid of the catalog.
															parsedCatalogItem -> json for all the categories(projects)
 															*/
    insertCatalolgCategory: function(catalog, parsedCatalogItem) {
        try {
            CASLogger.debug("Inside CASDaoUtil.insertCatalolgCategoory: Catalog : " + catalog);
            var categoryid = '';
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);

            for (var i = 0; i < parsedCatalogItem.projects.length; i++) {
                CASLogger.debug('Inside for loop of CASDaoUtil.insertCatalolgCategoory: parsedCatalogItem.projects.length: ' + parsedCatalogItem.projects.length);
                var grCategory = new GlideRecord(this.appUtil.configuration.table.project);
                grCategory.addQuery('project_id', parsedCatalogItem.projects[i].id);
                grCategory.query();
                if (grCategory.next()) {
                    //categoryid = categoryid + grCategory.sys_id + ',';

                    CASLogger.debug('Inside table.project gliderecord of CASDaoUtil.insertCatalolgCategoory:');
                    var grCatCategory = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
                    grCatCategory.addQuery("sc_category", grCategory.sys_id);
                    grCatCategory.addQuery('sc_cat_item', catalog);
                    grCatCategory.query();
                    if (grCatCategory.next()) {
                        CASLogger.debug('Inside if block of table.catalogCategory gliderecord of CASDaoUtil.insertCatalolgCategoory:');
                        grCatCategory.sys_scope = app_scope;
                        grCatCategory.sc_category = grCategory.sys_id;
                        grCatCategory.sc_cat_item = catalog;
                        grCatCategory.update();
                    } else {
                        CASLogger.debug('Inside if block of table.catalogCategory gliderecord of CASDaoUtil.insertCatalolgCategoory:');
                        grCatCategory.initialize();
                        grCatCategory.sys_scope = app_scope;
                        grCatCategory.sc_category = grCategory.sys_id;
                        grCatCategory.sc_cat_item = catalog;
                        grCatCategory.insert();
                    }


                }
            }

            //return categoryid.slice(0,-1);
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertCatalolgCategoory: Exception Block: ' + ' catalog: ' + catalog + ' categoryid: ' + grCategory.sys_id + ' app_scope: ' + app_scope);
            CASLogger.error("Exception Caught inside CASDaoUtil.insertCatalolgCategoory " + e + ". Error found" + e.stack);
        }
    },

    reconcileCatalogCategory: function(catalog, parsedCatalogItem) {
        try {
            CASLogger.debug("Inside CASDaoUtil.reconcileCatalogCategory: catalog: " + catalog);
            var categorySysID = '';
            for (var i = 0; i < parsedCatalogItem.projects.length; i++) {
                // CASLogger.debug('Inside for loop of CASDaoUtil.reconcileCatalogCategory:');
                var grCategory = new GlideRecord(this.appUtil.configuration.table.project);
                grCategory.addQuery('project_id', parsedCatalogItem.projects[i].id);
                grCategory.query();
                while (grCategory.next()) {
                    categorySysID = categorySysID + grCategory.sys_id + ',';
                    CASLogger.debug('Inside table.project gliderecord of CASDaoUtil.reconcileCatalogCategory: categorySysID: ' + categorySysID);
                }
            }
            var grCatCategory = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            grCatCategory.addQuery('sc_cat_item', catalog);
            grCatCategory.query();
            while (grCatCategory.next()) {
                if ((grCatCategory.sc_category != undefined && grCatCategory.sc_category != 'undefined') && (grCatCategory.sc_category.project_id != undefined && grCatCategory.sc_category.project_id != 'undefined')) {
                    var checkId = categorySysID.indexOf(grCatCategory.sc_category);
                    // CASLogger.debug('Inside While Block--- CASDaoUtil.reconcileCatalogCategory: CheckId: ' + checkId);
                    if (checkId > -1) {
                        CASLogger.debug("The Record Exist in the list");
                    } else {
                        grCatCategory.deleteRecord();
                    }
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileCatalogCategory: Exception Block: ' + ' categorySysID: ' + categorySysID + ' checkId: ' + checkId);
            CASLogger.error("Exception Caught inside CASDaoUtil.reconcileCatalogCategory " + e + ". Error found" + e.stack);
        }
    },



    checkIREPluginAccess: function() {
        try {
            var pMgr = new GlidePluginManager();
            var isActive = pMgr.isActive('com.snc.cmdb.scoped');
            CASLogger.debug('Inside CASDaoUtil.checkIREPluginAccess: isActive: ' + isActive);

            if (isActive) {
                return false;
            }

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkIREPluginAccess: Exception Block: ' + ' isActive: ' + isActive);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkIREPluginAccess " + e + ". Error found" + e.stack);
        }

    },

    checkUserCriteriaPluginAccess: function() {
        try {
            var pMgr = new GlidePluginManager();
            var isActive = pMgr.isActive('com.glideapp.user_criteria.scoped.api');
            CASLogger.debug('Inside CASDaoUtil.checkUserCriteriaPluginAccess: isActive: ' + isActive);
            if (isActive) {
                return false;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkUserCriteriaPluginAccess: Exception Block: ' + ' isActive: ' + isActive);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkUserCriteriaPluginAccess " + e + ". Error found" + e.stack);
        }
    },


    /*
     Function Name: checkUserCriteriaTableAccess
     Comments: This function will check for "sc_cat_item_user_criteria_mtom" table pre-configurations required in ITSM plugin.
     Updated On: 14 July 2021
     Updated By: Ajay Gunjal
     Update Comments: Replace hard coded table to table properties.
     */


    checkUserCriteriaTableAccess: function() {
        try {
            var table_array_string = this.appUtil.configuration.table.user_criteria_mtom;
            var query_string = 'nameIN' + table_array_string;
            CASLogger.debug('Inside CASDaoUtil.checkUserCriteriaTableAccess: query_string: ' + query_string);
            var db_objectGR = new GlideRecord(this.appUtil.configuration.table.db_object);
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.checkUserCriteriaTableAccess:');
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkUserCriteriaTableAccess: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkUserCriteriaTableAccess " + e + ". Error found" + e.stack);
        }

    },

    /*
	Function Name: checkQuestionChoiceTableAccess
    Comments: This function will check for "question_choice" table pre-configurations required in ITSM plugin.
    Updated On: 14 July 2021
    Updated By: Ajay Gunjal
    Update Comments: Replace hard coded table to table properties.
    */


    checkQuestionChoiceTableAccess: function() {
        try {
            var table_array_string = this.appUtil.configuration.table.choice;
            var query_string = 'nameIN' + table_array_string;
            CASLogger.debug('Inside CASDaoUtil.checkQuestionChoiceTableAccess: query_string: ' + query_string);
            var db_objectGR = new GlideRecord(this.appUtil.configuration.table.db_object);
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.checkQuestionChoiceTableAccess:');
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true && db_objectGR.delete_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkQuestionChoiceTableAccess: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkQuestionChoiceTableAccess " + e + ". Error found" + e.stack);
        }
    },

    checkVariableTableAccess: function() {
        try {
            var table_array_string = this.appUtil.configuration.table.variable;
            var query_string = 'nameIN' + table_array_string;
            CASLogger.debug('Inside CASDaoUtil.checkVariableTableAccess: query_string: ' + query_string);
            var db_objectGR = new GlideRecord(this.appUtil.configuration.table.db_object);
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.checkVariableTableAccess:');
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true && db_objectGR.delete_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkVariableTableAccess: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkVariableTableAccess " + e + ". Error found" + e.stack);
        }
    },

    /*
	Function Name: checkCatalogCategoryTableAccess
    Comments: This function will check for "sc_cat_item_category" table pre-configurations required in ITSM plugin.
    Updated On: 14 July 2021
    Updated By: Ajay Gunjal
    Update Comments: Replace hard coded table to table properties.
    */

    checkCatalogCategoryTableAccess: function() {
        try {
            var table_array_string = this.appUtil.configuration.table.catalogCategory;
            var query_string = 'nameIN' + table_array_string;
            CASLogger.debug('Inside CASDaoUtil.checkCatalogCategoryTableAccess: query_string: ' + query_string);
            var db_objectGR = new GlideRecord(this.appUtil.configuration.table.db_object);
            db_objectGR.addEncodedQuery(query_string);
            db_objectGR.query();
            if (db_objectGR.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.checkCatalogCategoryTableAccess:');
                if (db_objectGR.read_access == true && db_objectGR.create_access == true && db_objectGR.update_access == true && db_objectGR.delete_access == true) {
                    return false;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkCatalogCategoryTableAccess: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkCatalogCategoryTableAccess " + e + ". Error found" + e.stack);
        }
    },

    /*
	Function Name: checkIREConfiguration
    Comments: This function will check for IRE pre-configurations required in ITSM plugin.
    Updated On: 14 July 2021
    Updated By: Ajay Gunjal
    Update Comments: Replace hard coded table to table properties and added conditions for table name and element name.
    */

    checkIREConfiguration: function() {
        try {
            var grList = new GlideRecord(this.appUtil.configuration.table.choice_list);
            var query_string = "name=cmdb_ci^element=discovery_source^value=ITSM 8.x^label=ITSM 8.x";
            CASLogger.debug('Inside CASDaoUtil.checkIREConfiguration: query_string: ' + query_string);
            grList.addEncodedQuery(query_string);

            grList.query();
            if (grList.next()) {
                return false;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkIREConfiguration: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkIREConfiguration " + e + ". Error found" + e.stack);
        }
    },


    /*
	Function Name: checkJSUtilConfiguration
    Comments: This function will check for JSUtil pre-configurations required in ITSM plugin.
    Updated On: 14 July 2021
    Updated By: Ajay Gunjal
    Update Comments: Replace hard coded table to table properties.
	*/

    checkJSUtilConfiguration: function() {
        try {
            var grSys = new GlideRecord(this.appUtil.configuration.table.system_script);
            var query_string = "name=jsutil^access=public";
            CASLogger.debug('Inside CASDaoUtil.checkJSUtilConfiguration: query_string: ' + query_string);
            grSys.addEncodedQuery(query_string);
            grSys.query();
            if (grSys.next()) {
                return false;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkJSUtilConfiguration: Exception Block: ' + ' query_string: ' + query_string);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkJSUtilConfiguration " + e + ". Error found" + e.stack);
        }
    },



    /*This function will check for all pre-configurations
      required in ITSM plugin.
      Error message displayed for every missed configuration is generated from
      sys_ui_message table.. */
    checkConfigurations: function() {
        try {
            var missingConfiguration = [];

            var checkIREPlugin = this.checkIREPluginAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkIREPlugin: ' + checkIREPlugin);
            if (checkIREPlugin != false) {
                missingConfiguration.push('IREPluginAccess');
            }
            var checkUserCriteriaPlugin = this.checkUserCriteriaPluginAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkUserCriteriaPlugin: ' + checkUserCriteriaPlugin);
            if (checkUserCriteriaPlugin != false) {
                missingConfiguration.push('UserCriteriaPluginAccess');
            }
            var checkUserCriteriaAccess = this.checkUserCriteriaTableAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkUserCriteriaAccess: ' + checkUserCriteriaAccess);
            if (checkUserCriteriaAccess != false) {
                missingConfiguration.push('UserCriteriaTableAccess');
            }

            var checkQuestionChoiceAccess = this.checkQuestionChoiceTableAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkQuestionChoiceAccess: ' + checkQuestionChoiceAccess);
            if (checkQuestionChoiceAccess != false) {
                missingConfiguration.push('QuestionChoiceTableAccess');
            }
            var checkVariableTableAccess = this.checkVariableTableAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkVariableTableAccess: ' + checkVariableTableAccess);
            if (checkVariableTableAccess != false) {
                missingConfiguration.push('ItemOptionNewTableAccess');
            }

            var checkCatalogCategoryAccess = this.checkCatalogCategoryTableAccess();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkCatalogCategoryAccess: ' + checkCatalogCategoryAccess);
            if (checkCatalogCategoryAccess != false) {
                missingConfiguration.push('CatalogCategoryTableAccess');
            }

            var checkIREConfig = this.checkIREConfiguration();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkIREConfig: ' + checkIREConfig);
            if (checkIREConfig != false) {
                missingConfiguration.push('IREConfiguration');
            }

            var checkJSUtil = this.checkJSUtilConfiguration();
            CASLogger.debug('Inside CASDaoUtil.checkConfigurations: Value of checkJSUtil: ' + checkJSUtil);
            if (checkJSUtil != false) {
                missingConfiguration.push('JSUtilConfiguration');
            }
            if (missingConfiguration.length > 0) {
                return missingConfiguration.toString();
            } else {
                return true;
            }
        } catch (e) {
            CASLogger.error("Exception Caught inside CASDaoUtil.checkConfigurations " + e + ". Error found" + e.stack);
        }
    },

    RegisterRecordCheck: function(current) {
        try {
            var nme = current.name.trim();
            CASLogger.debug('Inside  CASDaoUtil.RegisterRecordCheck : Check of Registered Record----name: ' + nme);
            var grTable = new GlideAggregate(current.getTableName());
            var ds_plugin1 = GlidePluginManager.isActive("com.glide.domain");
            var ds_plugin2 = GlidePluginManager.isActive("com.glideapp.servicecatalog.domain_separation");
            if ((ds_plugin1 == true || ds_plugin1 == 'true') && (ds_plugin2 == true || ds_plugin2 == 'true')) {
                var ga = new GlideAggregate(current.getTableName());
                if (current.select_automation_service == 'vRealiseAutomationCloud') {
                    ga.addEncodedQuery('refresh_key=' + current.refresh_key + '^ORname=' + current.name.trim() + '^ORsys_domain=' + current.sys_domain);
                }
                if (current.select_automation_service == 'vrealizeAutomationService') {
                    ga.addEncodedQuery('sys_domain=' + current.sys_domain + '^ORname=' + current.name.trim());
                }
                ga.addAggregate('count');
                ga.query();
                if (ga.next()) {
                    var count1 = ga.getAggregate('count');
                    return count1;
                }
            } else {
                if (current.select_automation_service == 'vRealiseAutomationCloud') {
                    grTable.addEncodedQuery('refresh_key=' + current.refresh_key + '^ORname=' + current.name.trim());
                }

                if (current.select_automation_service == 'vrealizeAutomationService') {
                    grTable.addEncodedQuery('name=' + current.name.trim() + '^ORhostname=' + current.hostname.trim());
                }

                grTable.addAggregate('COUNT');
                grTable.query();

                if (grTable.next()) {
                    var count = grTable.getAggregate('COUNT');
                    return count;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.RegisterRecordCheck : Exception Block: ' + ' name: ' + nme);
            CASLogger.error("Exception caught inside CASDaoUtil.RegisterRecordCheck" + e + ". Error found" + e.stack);
        }


    },

    reconcileProjectCheck: function(projectId, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileProjectCheck : Check of reconcile project' + ' projectId: ' + projectId);
            var grProject = new GlideRecord(this.appUtil.configuration.table.project);
            grProject.addQuery("organization", current.organization);
            grProject.query();
            while (grProject.next()) {
                var checkId = projectId.indexOf(grProject.project_id);
                CASLogger.debug('Inside While block CASDaoUtil.reconcileProjectCheck---checkId: ' + checkId);
                if (checkId > -1) {

                    CASLogger.debug("The Record Exist in the list" + grProject.name);
                } else {
                    CASLogger.debug('Inside Else Block CASDaoUtil.reconcileProjectCheck');
                    var Catalog = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
                    Catalog.addEncodedQuery("sc_category", grProject.sys_id);
                    Catalog.query();
                    while (Catalog.next()) {
                        Catalog.deleteRecord();
                    }
                    grProject.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.error("Import::: Project: '+'\n ProjectId : '+ projectId+'\n Exception Caught inside CASDaoUtil.reconcileProjectCheck " + e + ".\n Error found" + e.stack);
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileProjectCheck : Exception Block: ' + ' projectId: ' + projectId);
        }

    },


    reconcileCatalogCheck: function(catalogId, current) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.reconcileCatalogCheck : Check of reconcile catalog Items: catalogId: ' + catalogId);
            var grCatItems = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            grCatItems.addQuery("organisation_name", current.organization);
            grCatItems.query();
            while (grCatItems.next()) {
                var checkId = catalogId.indexOf(grCatItems.cas_uid);
                CASLogger.debug('Inside  CASDaoUtil.reconcileCatalogCheck---checkId: ' + checkId);
                if (checkId > -1) {

                    CASLogger.debug("The Record Exist in the list catalog item" + grCatItems.name);
                } else {
                    //  CASLogger.debug('Inside Else Block CASDaoUtil.reconcileCatalogCheck');
                    grCatItems.active = 'false';
                    grCatItems.update();
                }
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.reconcileProjectCheck : Exception Block: ' + ' checkId: ' + checkId + ' catalogId: ' + catalogId);
            CASLogger("Exception Caught inside CASDaoUtil.reconcileCatalogCheck " + e + ". Error found" + e.stack);
        }

    },

    //reports
    //     getReportData: function(tablename, group_by, filter) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.getReportData: tablename: ' + tablename + ' filter: ' + filter);
    //             var grTab = new GlideAggregate(tablename);
    //             grTab.addEncodedQuery(filter);
    //             grTab.addAggregate('COUNT');
    //             grTab.groupBy(group_by);
    //             grTab.query();
    //             //gs.addInfoMessage('tab'+tablename+grTab.getRowCount())
    //             var inputdata = [];
    //             while (grTab.next()) {
    //                 CASLogger.debug('Inside while loop of CASDaoUtil.getReportData:');
    //                 inputdata.push({
    //                     'name': (grTab[options.group_by + '']) ? grTab[options.group_by + ''].getDisplayValue() : '',
    //                     'value': grTab.getAggregate('COUNT')

    //                 });
    //             }
    //             CASLogger.debug('Inside  CASDaoUtil.getReportData: inputdata: ' + inputdata);
    //             return inputdata;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.getReportData : Exception Block: ' + ' inputdata: ' + inputdata + ' tablename: ' + tablename);
    //             CASLogger.error("Exception caught inside CASDaoUtil.getReportData  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     fetchRequestReportList: function(tablename, limit, group_by, filter) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.fetchRequestReportList:' + ' tablename: ' + tablename + ' limit: ' + limit + ' filter: ' + filter);

    //             var arr = [];
    //             var tableGR = new GlideRecord(tablename);
    //             tableGR.setLimit(limit);
    //             tableGR.addEncodedQuery(filter);
    //             tableGR.orderByDesc('sys_created_on');
    //             tableGR.query();
    //             while (tableGR.next()) {
    //                 // CASLogger.debug('Inside while block of CASDaoUtil.fetchRequestReportList:');
    //                 arr.push({
    //                     "item": (tableGR.cat_item.name) ? tableGR.cat_item.name + '' : '',
    //                     "name": (tableGR.number) ? tableGR.number + '' : '',
    //                     "createdAt": (tableGR.sys_created_on) ? tableGR.sys_created_on + '' : '',
    //                     "status": (tableGR[group_by + ''].getDisplayValue()) ? tableGR[group_by + ''].getDisplayValue() : '',
    //                     "link": "/" + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + "?id=" + this.appUtil.configuration.page.activitiesForm + "&table=" + this.appUtil.configuration.table.requests + "&sysId=" + tableGR.getUniqueValue() + "&order=6"
    //                 });
    //             }
    //             CASLogger.debug('Inside  CASDaoUtil.fetchRequestReportList: arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchRequestReportList : Exception Block: ' + ' arr: ' + arr + ' tablename: ' + tablename + ' limit: ' + limit);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchRequestReportList  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     fetchDeploymentReportList: function(tablename, limit, group_by, filter) {
    //         try {
    //             CASLogger.debug('Inside CASDaoUtil.fetchDeploymentReportList: ' + tablename + ' limit: ' + limit + ' filter: ' + filter);
    //             var arr = [];
    //             var grTable = new GlideRecord(tablename);
    //             grTable.setLimit(limit);
    //             grTable.addEncodedQuery(filter);
    //             grTable.orderByDesc('created_at');
    //             grTable.query();
    //             while (grTable.next()) {
    //                 //  CASLogger.debug('Inside while loop of CASDaoUtil.fetchDeploymentReportList:');
    //                 arr.push({
    //                     "name": (grTable.name) ? grTable.name + '' : '',
    //                     "createdAt": (grTable.created_at) ? grTable.created_at + '' : '',
    //                     "status": (grTable[group_by + ''].getDisplayValue()) ? grTable[group_by + ''].getDisplayValue() + '' : '',
    //                     "link": "/" + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + "?id=" + this.appUtil.configuration.page.deploymentDetail + "&sysId=" + grTable.getUniqueValue() + "&list=false"
    //                 });
    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchDeploymentReportList: arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchDeploymentReportList : Exception Block: ' + ' arr: ' + arr + ' tablename: ' + tablename + ' limit: ' + limit);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchDeploymentReportList  " + e + ". Error found" + e.stack);

    //         }
    //     },

    //     fetchExpiredDeploymentReportList: function(tablename, limit, filter) {
    //         try {
    //             CASLogger.debug('Inside CASDaoUtil.fetchExpiredDeploymentReportList: ' + 'tablename: ' + tablename + ' limit: ' + limit + ' filter: ' + filter);
    //             var arr = [];
    //             var grTabName = new GlideRecord(tablename);
    //             grTabName.setLimit(limit);
    //             grTabName.addEncodedQuery(filter);
    //             grTabName.orderBy('expires_on');

    //             grTabName.query();
    //             while (grTabName.next()) {
    //                 CASLogger.debug('Inside while loop of CASDaoUtil.fetchExpiredDeploymentReportList:');
    //                 arr.push({
    //                     "name": (grTabName.name) ? grTabName.name + '' : '',
    //                     "project": (grTabName.u_project.getDisplayValue()) ? grTabName.u_project.getDisplayValue() + '' : '',
    //                     "createdAt": (grTabName.expires_on) ? grTabName.expires_on + '' : '',
    //                     //"status":grTabName[group_by+''].getDisplayValue(),
    //                     "link": "/" + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + "?id=" + this.appUtil.configuration.page.deploymentDetail + "&sysId=" + grTabName.getUniqueValue()
    //                 });
    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchExpiredDeploymentReportList: arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchExpiredDeploymentReportList : Exception Block: ' + ' arr: ' + arr + ' tablename: ' + tablename + ' limit: ' + limit + ' filter: ' + filter);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchExpiredDeploymentReportList  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     fetchApprovalReportList: function(tablename, limit) {
    //         try {
    //             CASLogger.debug('Inside CASDaoUtil.fetchApprovalReportList: ' + 'tablename: ' + tablename + ' limit: ' + limit);
    //             var arr = [];
    //             var assignment_group = gs.getProperty(this.appUtil.configuration.properties.assignment_group);
    //             var grTab = new GlideRecord(tablename);
    //             grTab.setLimit(limit);
    //             //grTab.addQuery('state=requested^group.assignment_group='+assignment_group+'^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
    //             grTab.addQuery('state=requested^group.assignment_group.nameIN' + assignment_group + '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
    //             grTab.orderByDesc('sys_created_on');
    //             grTab.query();
    //             while (grTab.next()) {
    //                 //  CASLogger.debug('Inside while loop of CASDaoUtil.fetchApprovalReportList:');
    //                 arr.push({
    //                     //"item":(grTab.sysapproval.cat_item.getDisplayValue())?grTab.sysapproval.cat_item.getDisplayValue()+'':'',
    //                     "name": (grTab.sysapproval.getDisplayValue()) ? grTab.sysapproval.getDisplayValue() + '' : '',
    //                     "createdAt": (grTab.sys_created_on) ? grTab.sys_created_on + '' : '',
    //                     "link": "/" + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + "?id=" + this.appUtil.configuration.page.activitiesForm + "&table=" + this.appUtil.configuration.table.approvals + "&sysId=" + grTab.getUniqueValue() + "&order=7&filter=Awaiting Approval"
    //                 });

    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchApprovalReportList: arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchApprovalReportList : Exception Block: ' + ' arr: ' + arr + ' assignment_group: ' + assignment_group + ' tablename: ' + tablename + ' limit: ' + limit);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchApprovalReportList  " + e + ". Error found" + e.stack);

    //         }
    //     },

    getTotalRecordCount: function(tablename, filter) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.getTotalRecordCount:' + ' tablename: ' + tablename + ' filter: ' + filter);
            /*	
			var gr=new GlideRecord(tablename);
			if(filter!='')
				gr.addEncodedQuery(filter);
			gr.query();
			return gr.getRowCount();
*/

            var gaTable = new GlideAggregate(tablename);
            if (filter != '')
                gaTable.addEncodedQuery(filter);
            gaTable.addAggregate('COUNT');
            //gs.addErrorMessage('que '+gaTable.getEncodedQuery())

            gaTable.query();
            if (gaTable.next())
                return gaTable.getAggregate('COUNT');



        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getTotalRecordCount : Exception Block: ' + ' tablename: ' + tablename);
            CASLogger.error("Exception caught inside CASDaoUtil.getTotalRecordCount  " + e + ". Error found" + e.stack);
        }

    },

    //     fetchEntitledCategory: function(org_sys_id, category) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.fetchEntitledCategory: org_sys_id: ' + org_sys_id);
    //             //gs.addInfoMessage(org_sys_id+" "+category);
    //             var ent = new GlideRecordSecure(this.appUtil.configuration.table.entitlement);
    //             ent.addEncodedQuery('endpoint=' + org_sys_id);
    //             ent.addEncodedQuery('entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^active=true');
    //             ent.query();
    //             while (ent.next()) {
    //                 var projects = ent.select_projects.split(',');
    //                 CASLogger.debug('Inside while loop of CASDaoUtil.fetchEntitledCategory: projects: ' + projects);
    //                 if (projects.indexOf(category) != -1) {
    //                     return true;
    //                 }
    //             }
    //             return false;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchEntitledCategory : Exception Block: ' + ' org_sys_id: ' + org_sys_id);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchEntitledCategory  " + e + ". Error found" + e.stack);
    //         }

    //     },


    //     fetchCatalogItems: function(paramObject) {

    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchCatalogItems----paramObject: ' + paramObject);
    //             var grObjTable = new GlideRecord(paramObject.table);

    //             if (paramObject && paramObject.query) {
    //                 if (paramObject.query.includes('category=')) {
    //                     var newQuery = paramObject.query.split('^');
    //                     grObjTable.addEncodedQuery(newQuery[0] + '^' + newQuery[2]);
    //                 } else {
    //                     grObjTable.addEncodedQuery(paramObject.query);
    //                 }

    //             }

    //             if (paramObject.hasAdminRole == 'true') {
    //                 grObjTable.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
    //                 grObjTable.addEncodedQuery('active=true^cas_uidISNOTEMPTY');
    //                 grObjTable.orderBy('name');
    //             }

    //             grObjTable.query();
    //             var catalogGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
    //             var catlog_items_arr = [];
    //             var heading;
    //             var entitled_sys_ids = '';

    //             if (paramObject.hasAdminRole == 'true') {

    //                 if ((paramObject.query) && paramObject.query.includes('category=')) {

    //                     var curCategory = newQuery[1].replace('category=', '');
    //                     var newGr = new GlideRecord('sc_cat_item_category');
    //                     newGr.addEncodedQuery('sc_category=' + curCategory);
    //                     newGr.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
    //                     newGr.orderBy('sc_cat_item');
    //                     newGr.query();
    //                     while (newGr.next()) {
    //                         catlog_items_arr.push({
    //                             "item_name": (newGr.sc_cat_item.name) ? (newGr.sc_cat_item.name) + '' : '',
    //                             "parent_name": (newGr.sc_category) ? newGr.sc_category.getDisplayValue() + '' : '',
    //                             "icon": "",
    //                             "description": (newGr.sc_cat_item.short_description) ? newGr.sc_cat_item.short_description + '' : 'No Description',
    //                             "deploymentLink": '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentCard + '&catalogSysId=' + newGr.sc_cat_item,
    //                             "item_id": newGr.sc_cat_item + '',
    //                             "parent_id": (newGr.sc_cat_item.category) ? newGr.sc_cat_item.category + '' : '',
    //                             "org_id": (newGr.sc_cat_item.category) ? newGr.sc_cat_item.category.organization + '' + '' : '',
    //                             "deployment_count": this.fetchPortalDeployments({
    //                                 'catalogSysId': newGr.sc_cat_item,
    //                                 'getCount': true
    //                             }) //this.fetchDeploymentCount(grObjTable.getUniqueValue())
    //                         });
    //                     }

    //                 }
    //                 CASLogger.debug('Inside if block of paramObject.hasAdminRole: CASDaoUtil.fetchCatalogItems: ');
    //             }

    //             while (grObjTable.next()) {

    //                 if (paramObject.hasAdminRole == 'true') {

    //                     if ((paramObject.query) && paramObject.query.includes('category=')) {
    //                         heading = (grObjTable.category) ? grObjTable.category.getDisplayValue() + ' - ' + 'Catalog Items' : '';
    //                     } else {
    //                         heading = (grObjTable.organisation_name) ? grObjTable.organisation_name.getDisplayValue() + ' - ' + 'Catalog Items' : '';

    //                         var categories = '';
    //                         var cat = new GlideRecord('sc_cat_item_category');
    //                         cat.addEncodedQuery('sc_cat_item=' + grObjTable.sys_id);
    //                         cat.query();
    //                         while (cat.next()) {
    //                             categories += cat.sc_category.getDisplayValue() + ', ';
    //                             CASLogger.debug('Inside while loop of cat.next(): CASDaoUtil.fetchCatalogItems: categories: ' + categories);
    //                         }

    //                         catlog_items_arr.push({
    //                             "item_name": (grObjTable.name) ? (grObjTable.name) + '' : '',
    //                             "parent_name": (grObjTable.category) ? categories.replace(/,\s*$/, "") + '' : '',
    //                             "icon": "",
    //                             "description": (grObjTable.short_description) ? grObjTable.short_description + '' : 'No Description',
    //                             "deploymentLink": '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentCard + '&catalogSysId=' + grObjTable.getUniqueValue(),
    //                             "item_id": grObjTable.getUniqueValue() + '',
    //                             "parent_id": (grObjTable.category) ? grObjTable.category + '' : '',
    //                             "org_id": (grObjTable.category) ? grObjTable.category.organization + '' + '' : '',
    //                             "deployment_count": this.fetchPortalDeployments({
    //                                 'catalogSysId': grObjTable.getUniqueValue(),
    //                                 'getCount': true
    //                             }) //this.fetchDeploymentCount(grObjTable.getUniqueValue())
    //                         });
    //                     }

    //                 }
    //                 //not admin
    //                 else if (paramObject.hasAdminRole == 'false') {
    //                     var entitlement = new GlideRecord(this.appUtil.configuration.table.entitlement);
    //                     var sysId = grObjTable.user_criteria.name.split('_')[0] + '';
    //                     CASLogger.debug('Inside Else if Block of CASDaoUtil.fetchCatalogItems----sysId: ' + sysId);
    //                     entitlement.addQuery('sys_id', sysId);
    //                     entitlement.query();
    //                     if (entitlement.next()) {
    //                         if (entitlement.active) {
    //                             entitled_sys_ids += grObjTable.sc_cat_item + ',';
    //                         }
    //                     }
    //                 }
    //             }

    //             if (paramObject.hasAdminRole == 'false') {
    //                 var pageId = paramObject.pageId.split('/');
    //                 CASLogger.debug('Inside the CASDaoUtil.fetchCatalogItems----pageId: ' + pageId);
    //                 catalogGR.addQuery('sys_idIN' + entitled_sys_ids);
    //                 if (pageId[0] == 'organization') {
    //                     catalogGR.addQuery('organisation_name=' + pageId[1]);
    //                 }
    //                 if (pageId[0] == 'project') {
    //                     catalogGR.addQuery('^organisation_name=' + pageId[1]);
    //                 }
    //                 catalogGR.addEncodedQuery('active=true');
    //                 catalogGR.orderBy('name');
    //                 if (pageId[0] != 'project')
    //                     catalogGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

    //                 catalogGR.query();
    //                 if (pageId[0] == 'project') {

    //                     var newGr1 = new GlideRecord('sc_cat_item_category');
    //                     newGr1.addEncodedQuery('sc_category=' + pageId[2]);
    //                     newGr1.addEncodedQuery('sc_cat_item.sys_idIN' + entitled_sys_ids);
    //                     newGr1.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);
    //                     newGr1.orderBy('sc_cat_item');
    //                     newGr1.query();
    //                     while (newGr1.next()) {
    //                         catlog_items_arr.push({
    //                             "item_name": (newGr1.sc_cat_item.name) ? (newGr1.sc_cat_item.name) + '' : '',
    //                             "parent_name": (newGr1.sc_cat_item.category) ? newGr1.sc_category.getDisplayValue() + '' : '',
    //                             "icon": "",
    //                             "description": (newGr1.sc_cat_item.short_description) ? newGr1.sc_cat_item.short_description + '' : 'No Description',
    //                             "deploymentLink": '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentCard + '&catalogSysId=' + newGr1.sc_cat_item,
    //                             "item_id": newGr1.sc_cat_item + '',
    //                             "parent_id": (newGr1.sc_cat_item.category) ? newGr1.sc_cat_item.category + '' : '',
    //                             "org_id": (newGr1.sc_cat_item.category) ? newGr1.sc_cat_item.category.organization + '' + '' : '',
    //                             "deployment_count": this.fetchPortalDeployments({
    //                                 'catalogSysId': newGr1.sc_cat_item,
    //                                 'getCount': true
    //                             }) //this.fetchDeploymentCount(grObjTable.getUniqueValue())
    //                         });
    //                         CASLogger.debug('Inside while loop of newGr1.next(): CASDaoUtil.fetchCatalogItems: ');
    //                     }
    //                 }

    //                 while (catalogGR.next()) {
    //                     if (pageId[0] == 'project') {
    //                         heading = (catalogGR.category) ? catalogGR.category.getDisplayValue() + ' - ' + 'Catalog Items' : '';

    //                     } else {
    //                         heading = (catalogGR.organisation_name) ? catalogGR.organisation_name.getDisplayValue() + ' - ' + 'Catalog Items' : '';

    //                         var categories = '';
    //                         var cat = new GlideRecord('sc_cat_item_category');
    //                         cat.addEncodedQuery('sc_cat_item=' + catalogGR.sys_id);
    //                         cat.query();
    //                         while (cat.next()) {
    //                             if (this.fetchEntitledCategory(catalogGR.organisation_name, cat.sc_category.toString())) {
    //                                 categories += cat.sc_category.getDisplayValue() + ', ';
    //                             }

    //                         }


    //                         catlog_items_arr.push({
    //                             "item_name": (catalogGR.name) ? (catalogGR.name) + '' : '',
    //                             "parent_name": (catalogGR.category) ? categories.replace(/,\s*$/, "") + '' : '',
    //                             "icon": "",
    //                             "description": (catalogGR.short_description) ? catalogGR.short_description + '' : 'No description',
    //                             "deploymentLink": '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentCard + '&catalogSysId=' + catalogGR.getUniqueValue(),
    //                             "item_id": catalogGR.getUniqueValue() + '',
    //                             "parent_id": (catalogGR.category) ? catalogGR.category + '' : '',
    //                             "org_id": (catalogGR.category) ? catalogGR.category.organization + '' + '' : '',
    //                             "deployment_count": this.fetchPortalDeployments({
    //                                 'catalogSysId': catalogGR.getUniqueValue(),
    //                                 'getCount': true
    //                             }) //this.fetchDeploymentCount(grObjTable.getUniqueValue())
    //                         });
    //                     }
    //                     CASLogger.debug('Inside while loop of catalogGR.next(): CASDaoUtil.fetchCatalogItems: ');
    //                 }
    //             }

    //             CASLogger.debug('Inside CASDaoUtil.fetchCatalogItems : catlog_items_arr: ' + catlog_items_arr);
    //             return catlog_items_arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchCatalogItems : Exception Block: ' + ' entitled_sys_ids: ' + entitled_sys_ids + ' catlog_items_arr: ' + catlog_items_arr + ' sysId: ' + sysId + ' pageId: ' + pageId);
    //             CASLogger.error('Exception caught inside CASDoaUtil.fetchCatalogItems: ' + e + ". Error found" + e.stack);
    //         }
    //     },

    //     fetchCatalogClientScripts: function(cat_id) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.fetchCatalogClientScripts----cat_id: ' + cat_id);
    //             var catGR = new GlideRecord(this.appUtil.configuration.table.clientScript);
    //             catGR.addEncodedQuery('cat_item=' + cat_id);
    //             catGR.addEncodedQuery('active=true');
    //             catGR.query();
    //             var scripts = {};
    //             while (catGR.next()) {
    //                 //  CASLogger.debug('Inside while loop of table.clientScript of CASDaoUtil.fetchCatalogClientScripts:');
    //                 if (catGR.type == 'onLoad') {
    //                     CASLogger.debug('Inside if block of table.clientScript of CASDaoUtil.fetchCatalogClientScripts: catGR.type: ' + catGR.type);
    //                     if (catGR.description.toString().split('__')[0] == 'getVersions' || catGR.description.toString().split('__')[0] == 'getProjects') {

    //                         if (typeof scripts[catGR.type] == 'undefined') {
    //                             scripts[catGR.type] = [];
    //                         }
    //                         scripts[catGR.type].push({
    //                             "label": catGR.name + '',
    //                             "description": catGR.description + ''
    //                         });
    //                     }
    //                 } else if (catGR.type == 'onChange') {
    //                     CASLogger.debug('Inside else block of table.clientScript of CASDaoUtil.fetchCatalogClientScripts: catGR.type: ' + catGR.type);
    //                     // if(typeof scripts[catGR.type]=='undefined'){
    //                     // 	scripts[catGR.type]={};
    //                     // }
    //                     // var desc=catGR.description.split("__");
    //                     // var fun=desc[0];
    //                     // var field=desc[1];
    //                     // var arr=JSON.parse(desc[2]);
    //                     // for(var m=0;m<arr.length;m++){
    //                     // 	if(typeof scripts[catGR.type][arr[m]]=='undefined'){
    //                     // 		scripts[catGR.type][arr[m]]=[];
    //                     // 	}
    //                     // 	scripts[catGR.type][arr[m]].push({"label":catGR.name+'',"description":catGR.description+''});
    //                     // }
    //                 }

    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchCatalogClientScripts: scripts: ' + scripts);
    //             return scripts;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchCatalogClientScripts : Exception Block: ' + ' cat_id: ' + cat_id + ' scripts: ' + scripts);

    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogClientScripts  " + e + ". Error found" + e.stack);
    //         }
    //     },

    fetchCatalogFieldOptions: function(field_id) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchCatalogFieldOptions---field_id: ' + field_id);
            var choiceGR = new GlideRecord(this.appUtil.configuration.table.choice);
            choiceGR.addQuery('question=' + field_id);
            choiceGR.orderBy('order');
            choiceGR.query();
            var isEmpty = true;
            var choice_arr = [];
            while (choiceGR.next()) {
                CASLogger.debug('Inside while loop of CASDaoUtil.fetchCatalogFieldOptions: ');
                choice_arr.push({
                    "label": choiceGR.text + '',
                    "value": choiceGR.value + ''
                });
                isEmpty = false;
            }
            if (isEmpty) {
                CASLogger.debug('Inside if block of CASDaoUtil.fetchCatalogFieldOptions:' + ' isEmpty: ' + isEmpty);
                choice_arr = [{
                    "label": "",
                    "value": ""
                }];
            }
            CASLogger.debug('Inside  CASDaoUtil.fetchCatalogFieldOptions---choice_arr: ' + choice_arr);

            return choice_arr;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchCatalogFieldOptions : Exception Block: ' + ' isEmpty: ' + isEmpty + ' choice_arr: ' + choice_arr + ' field_id: ' + field_id);
            CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogFieldOptions  " + e + ". Error found" + e.stack);
        }

    },

    //     fetchCatalogFieldClientScripts: function(cat_id) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.fetchCatalogFieldClientScripts---cat_id: ' + cat_id);
    //             var catGR = new GlideRecord(this.appUtil.configuration.table.variable);
    //             catGR.addEncodedQuery('cat_item=' + cat_id);
    //             catGR.addEncodedQuery("active=true");
    //             catGR.orderBy('order');
    //             catGR.query();
    //             var i = 0,
    //                 parent, scriptCount = 0;
    //             var clientScripts = [];
    //             while (catGR.next()) {
    //                 CASLogger.debug('Inside while loop of CASDaoUtil.fetchCatalogFieldClientScripts---catGR.type: ' + catGR.type);
    //                 if (catGR.type == 19) {
    //                     CASLogger.debug('inside if block of CASDaoUtil.fetchCatalogFieldClientScripts:');
    //                     parent = i;
    //                     clientScripts.push({
    //                         "OnLoad": [],
    //                         "OnChange": [],
    //                         "dep": {},
    //                         "containerId": catGR.getUniqueValue() + '',
    //                         "order": parent,
    //                         "version": catGR.x_vmw_cloudservice_versions.getDisplayValue().replace(',', ''),
    //                         "executed": false
    //                     });
    //                     i++;
    //                 } else {
    //                     CASLogger.debug('inside else block of CASDaoUtil.fetchCatalogFieldClientScripts:');
    //                     if (clientScripts.length > 0 && (catGR.x_vmw_cloudservice_vra_default_value_client_script != '' || catGR.x_vmw_cloudservice_vra_value_client_script != '')) {
    //                         var defualtVS = catGR.x_vmw_cloudservice_vra_default_value_client_script + '';
    //                         var ValueS = catGR.x_vmw_cloudservice_vra_value_client_script + '';
    //                         CASLogger.debug('Inside Else--- CASDaoUtil.fetchCatalogFieldClientScripts---ValueS: ' + ValueS);
    //                         if (ValueS != '') {
    //                             var splitScript2 = ValueS.split('__');
    //                             var obj = {
    //                                 "type": splitScript2[0],
    //                                 "uri": splitScript2[1],
    //                                 "datasource": splitScript2[2],
    //                                 "parameter": splitScript2[3],
    //                                 "field_name": catGR.name.getDisplayValue(),
    //                                 "operation": 'Values',
    //                                 "refType": (splitScript2[5]) ? splitScript2[5] : '',
    //                                 "field_type": (catGR.x_vmw_cloudservice_datatype) ? catGR.x_vmw_cloudservice_datatype.getDisplayValue() : ''
    //                             }

    //                             if (splitScript2[0] == 'OnLoad') {
    //                                 scriptCount++;
    //                                 clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript2[3] != 'Nodata') ? JSON.parse(splitScript2[3]) : [];
    //                                 clientScripts[parent]['OnLoad'].push(obj);
    //                             } else if (splitScript2[0] == 'OnChange') {
    //                                 scriptCount++;
    //                                 clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript2[3] != 'Nodata') ? JSON.parse(splitScript2[3]) : [];
    //                                 clientScripts[parent]['OnChange'].push(obj);
    //                             }

    //                         }

    //                         CASLogger.debug('Inside Else--- CASDaoUtil.fetchCatalogFieldClientScripts---defualtVS: ' + defualtVS);
    //                         if (defualtVS != '') {
    //                             var splitScript = defualtVS.split('__');
    //                             var obj = {
    //                                 "type": splitScript[0],
    //                                 "uri": splitScript[1],
    //                                 "datasource": splitScript[2],
    //                                 "parameter": splitScript[3],
    //                                 "field_name": catGR.name.getDisplayValue(),
    //                                 "operation": 'Default Values',
    //                                 "refType": (splitScript[5]) ? splitScript[5] : '',
    //                                 "field_type": (catGR.x_vmw_cloudservice_datatype) ? catGR.x_vmw_cloudservice_datatype.getDisplayValue() : ''
    //                             }

    //                             if (splitScript[0] == 'OnLoad') {
    //                                 scriptCount++;
    //                                 clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript[3] != 'Nodata') ? JSON.parse(splitScript[3]) : [];
    //                                 clientScripts[parent]['OnLoad'].push(obj);
    //                             } else if (splitScript[0] == 'OnChange') {
    //                                 scriptCount++;
    //                                 clientScripts[parent].dep[catGR.name.getDisplayValue()] = (splitScript[3] != 'Nodata') ? JSON.parse(splitScript[3]) : [];
    //                                 clientScripts[parent]['OnChange'].push(obj);
    //                             }

    //                         }


    //                     }

    //                 }

    //             }
    //             clientScripts.push(scriptCount);
    //             CASLogger.debug('Inside CASDaoUtil.fetchCatalogFieldClientScripts---clientScripts: ' + clientScripts);
    //             return clientScripts;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchCatalogFieldClientScripts : Exception Block: ' + ' cat_id: ' + cat_id + ' splitScript: ' + splitScript + 'clientScripts: ' + clientScripts);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchCatalogFieldClientScripts  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     fetchDeploymentCount: function(cat_item_sysID) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.fetchDeploymentCount: cat_item_sysID: ' + cat_item_sysID);
    //             /*		var deploymentsGR=new GlideRecord(this.appUtil.configuration.table.deployments);
    // 			deploymentsGR.addQuery('u_catalog_item='+cat_item_sysID);
    // 			deploymentsGR.addQuery('operational_status',1);
    // 			deploymentsGR.query();
    // 			return deploymentsGR.getRowCount();
    // */
    //             var deploymentsGR = new GlideAggregate(this.appUtil.configuration.table.deployments);
    //             deploymentsGR.addQuery('u_catalog_item=' + cat_item_sysID);
    //             deploymentsGR.addQuery('operational_status', 1);
    //             deploymentsGR.addAggregate('COUNT');
    //             deploymentsGR.query();
    //             if (deploymentsGR.next())
    //                 return deploymentsGR.getAggregate('COUNT');



    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchDeploymentCount : Exception Block: ' + ' cat_item_sysID: ' + cat_item_sysID);
    //             CASLogger.error("Exception caught inside CASDaoUtil.fetchDeploymentCount  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //----------------------------------------checkAndSetPaginationLimit-------------------------------------
    // USAGE: This method is used to set the upper limit of request once its all records are fetched and
    //				sets the lower limit of the approval table accordingly
    // PARAMS: lower_window_request --> is the starting value of the request table value to be fetched
    //					upper_window_request --> is the ending value of the request table value to be fetched
    //					VALUES --> can accept INTEGRAL values
    checkAndSetPaginationLimit: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.checkAndSetPaginationLimit: This method is used to set the upper limit of request once its all records are fetched and sets the lower limit of the approval table accordingly.----paramObj: ' + paramObj);
            if (paramObj.upperWindow > paramObj.totalRecords) {
                return paramObj.totalRecords;
            }
            return paramObj.upperWindow;
        } catch (e) {

            CASLogger.error('Error caught inside CASDaoUtil.checkAndSetPaginationLimit widget: ' + e + ". Error found" + e.stack);
        }
    },

    //verify if endpoint's mid server status is up(true) or down(false) 
    checkMidServerConnection: function(endpoint_id) {
        try {
            CASLogger.debug('Inside CASDaoUtil.checkMidServerConnection---endpoint_id : ' + endpoint_id);
            var endpointGR = new GlideRecord(this.appUtil.configuration.table.register_cas);
            if (endpointGR.get(endpoint_id)) {
                //when endpoint is on premise
                if (endpointGR.mid_server != '') {
                    if (endpointGR.mid_server.status == 'Down') {
                        gs.addErrorMessage('Unable to process request , MID Server status is Down.');
                        return false;
                    } else if (endpointGR.mid_server.status == 'Up') {
                        CASLogger.debug('Inside Else If: CASDaoUtil.checkMidServerConnection');
                        return true;
                    }
                }
                //when endpoint is of cloud type
                return true;
            }
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.checkMidServerConnection:' + ' endpoint_id: ' + endpoint_id);
            CASLogger.error('Error caught inside CASDaoUtil.checkMidServerConnection: ' + e + ". Error found" + e.stack);
        }
    },

    //----------------------------------------createActionRequest method-------------------------
    // USAGE: This method is used to create a new record in Action request table on submission of any action on portal
    // PARAMS:	paramObject --> object containing reason string key and body json.
    //
    //VALUES --> paramObject --> Object
    createActionRequest: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.createActionRequest----paramObject: ' + paramObject);

            var deploymentGR = new GlideRecord(this.appUtil.configuration.table.deployments);
            if (deploymentGR.get(paramObject.deployment_id + '')) {
                CASLogger.debug('Inside if block of table.deployments gliderecord of CASDaoUtil.createActionRequest:');
                if (this.checkMidServerConnection(deploymentGR.u_project.organization) == false) {
                    return;
                }
            }

            var actionReqGR = new GlideRecord(this.appUtil.configuration.table.actionRequests);
            actionReqGR.initialize();
            actionReqGR.action = paramObject.actionId;
            if (actionReqGR.action.deployment != '') {
                CASLogger.debug('Inside if block of table.actionRequests gliderecord of CASDaoUtil.createActionRequest:');
                actionReqGR.u_name = actionReqGR.action.deployment.getDisplayValue();
                actionReqGR.u_endpoint = actionReqGR.action.deployment.u_project.organization.getDisplayValue();
            } else {
                CASLogger.debug('Inside else block of table.actionRequests gliderecord of CASDaoUtil.createActionRequest:');
                actionReqGR.u_name_resource = actionReqGR.action.machine.getDisplayValue();
                actionReqGR.u_endpoint = actionReqGR.action.machine.project.organization.getDisplayValue();
                var grRelationship = new GlideRecordSecure(this.appUtil.configuration.table.relationship);
                grRelationship.addQuery('child', actionReqGR.action.machine);
                grRelationship.query();
                if (grRelationship.next()) {
                    actionReqGR.u_name = grRelationship.parent.getDisplayValue();
                }
            }
            actionReqGR.reason = paramObject.reason;
            actionReqGR.body = paramObject.body;
            actionReqGR.state = paramObject.state;
            var data = actionReqGR.insert();
            CASLogger.debug('Inside CASDaoUtil.createActionRequest: data: ' + data);
            return actionReqGR.insert();
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.createActionRequest : Exception Block: ' + ' paramObject: ' + paramObject + ' deploymentGR: ' + deploymentGR + ' actionReqGR: ' + actionReqGR + ' data: ' + data);
            CASLogger.error("Exception caught inside CASDaoUtil.createActionRequest  " + e + ". Error found" + e.stack);
        }

    },


    //----------------------------------------createPaginationWindow method------------------------------------
    // USAGE: This method is used to create limits used for fetching the records from table
    // PARAMS:	current_record --> the current record passed by the user
    //		    window_size --> items to be displayed on the activity screen
    //
    //VALUES --> can accept INTEGRAL values
    createPaginationWindow: function(paramObj, callBack) {
        try {
            CASLogger.debug('Inside CASDaoUtil.createPaginationWindow: This method is used to create limits used for fetching the records from table.----paramObj: ' + paramObj);
            callBack({
                lowerWindow: paramObj.currentRecord,
                upperWindow: paramObj.currentRecord + parseInt(paramObj.windowSize)
            });
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.createPaginationWindow widget: Exception Block: ' + 'paramObj: ' + paramObj);
            CASLogger.error('Error caught inside CASDaoUtil.createPaginationWindow widget: ' + e + ". Error found" + e.stack);
        }
    },
    //--------------------------------calculatePaginationRows method-------------------------------------
    //  USAGE:  This method is used for calculating the number of records
    //					of approvals and request tables
    //  PARAMS: paramObj --> contains the every parameters required for pagination
    calculatePaginationRows: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.calculatePaginationRows: This method is used for calculating the number of records---paramObj: ' + paramObj);
            var totalRecords = 0;
            var ga = new GlideAggregate(paramObj.table);

            if (paramObj.table == this.appUtil.configuration.table.requests) {
                //===============================REQUEST LOGIC=================================
                CASLogger.debug('Inside if block of CASDaoUtil.calculatePaginationRows:' + ' state: ' + paramObj.legend);
                if (paramObj.legend == "Rejected" || paramObj.legend == "Approved") {
                    ga.addQuery('approval', '=', paramObj.legend);
                } else if (paramObj.legend == "Closed Complete" || paramObj.legend == "Closed Incomplete" || paramObj.legend == "Work In Progress" || paramObj.legend == 'Open') {
                    var requestValue;
                    if (paramObj.legend == 'Closed Complete') {
                        requestValue = 3;
                    } else if (paramObj.legend == 'Closed Incomplete') {
                        requestValue = 4;
                    } else if (paramObj.legend == 'Work In Progress') {
                        requestValue = 2;
                    } else if (paramObj.legend == 'Open') {
                        requestValue = 1;
                    }
                    ga.addQuery('state', '=', requestValue);
                }
                if (gs.getUser().hasRole('admin') || gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')) {
                    if (paramObj.showMyFilter == 'true') {
                        ga.addEncodedQuery('request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }
                ga.addEncodedQuery('cat_item.sc_catalogsLIKE533fe9dfdb2233006adb48703996191b');

            } else if (paramObj.table == this.appUtil.configuration.table.approvals) {
                //========================= APPROVAL LOGIC======================================
                if (paramObj.legend == "Rejected" || paramObj.legend == "Approved" || paramObj.legend == "Requested") {
                    ga.addQuery('state', '=', paramObj.legend);
                }
                if (gs.getUser().hasRole('admin') || gs.getUser().hasRole('x_vmw_vmware_vreal.vrealize_automation_catalog_admin')) {
                    if (paramObj.showMyFilter == 'true') {
                        ga.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }

                //				ga.addEncodedQuery('group.assignment_group=' + gs.getProperty(appUtil.configuration.properties.assignment_group));
                //.sys_idIN				
                ga.addEncodedQuery('group.assignment_group.nameIN' + gs.getProperty(this.appUtil.configuration.properties.assignment_group));
                ga.addEncodedQuery('sysapproval.descriptionSTARTSWITH533fe9dfdb2233006adb48703996191b');

                //ga.addEncodedQuery('sysapproval.cmdb_ciISNOTEMPTY');

            } else if (paramObj.table == this.appUtil.configuration.table.deployments || paramObj.table == this.appUtil.configuration.table.machines) {
                //====================== MACHINE AND DEPLOYMENT LOGIC ===============================
                if (paramObj && paramObj.catalogSysId) {
                    ga.addEncodedQuery('u_catalog_item=' + paramObj.catalogSysId);
                }
                if (!gs.hasRole('admin')) {
                    ga.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORshared_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }
                ga.addEncodedQuery('operational_status!=6^ORoperational_status=NULL');
                ga.addEncodedQuery(paramObj.query);
            } else if (paramObj.table == this.appUtil.configuration.table.shared_resources) {
                //====================== SHARED RESOURCE LOGIC ===============================
                if (gs.hasRole('admin')) {
                    if (paramObj.showMyFilter == "true") {
                        ga.addEncodedQuery('created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                    }
                } else {
                    ga.addEncodedQuery('created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                }

            } else if (paramObj.table == this.appUtil.configuration.table.user_criteria_mtom) {

                var grTable = new GlideRecord(paramObj.table);
                if (paramObj && paramObj.query)
                    grTable.addEncodedQuery(paramObj.query);

                grTable.query();
                var entitled_sys_ids = '';
                while (grTable.next()) {
                    var entitlement = new GlideRecord(this.appUtil.configuration.table.entitlement);
                    var sysId = grTable.user_criteria.name.split('_')[0] + '';
                    entitlement.addQuery('sys_id', sysId);
                    entitlement.query();
                    if (entitlement.next()) {
                        if (entitlement.active) {
                            entitled_sys_ids += grTable.sc_cat_item + ',';
                            CASLogger.debug('Inside while loop of CASDaoUtil.calculatePaginationRows: entitled_sys_ids: ' + entitled_sys_ids);
                        }
                    }
                }

                var pageId = paramObj.pageId.split('/');
                CASLogger.debug('Inside CASDaoUtil.calculatePaginationRows:---pageId: ' + pageId);
                var grCatTable = new GlideAggregate(this.appUtil.configuration.table.catalogItem);
                grCatTable.addQuery('sys_idIN' + entitled_sys_ids);
                grCatTable.addEncodedQuery('active=true');
                if (pageId[0] == 'organization') {
                    grCatTable.addQuery('organisation_name=' + pageId[1]);
                }
                if (pageId[0] == 'project') {
                    totalRecords = 0;
                    var currentCat = pageId[2];
                    grCatTable.query();
                    while (grCatTable.next()) {
                        var cat = new GlideRecord('sc_cat_item_category');
                        cat.addEncodedQuery('sc_cat_item=' + grCatTable.sys_id);
                        cat.query();
                        while (cat.next()) {

                            if (cat.sc_category.toString() == currentCat) {
                                totalRecords++;
                            }
                        }
                    }
                    CASLogger.debug('Inside CASDaoUtil.calculatePaginationRows:---totalRecords: ' + totalRecords);
                    return totalRecords;
                } else {
                    CASLogger.debug('Inside Else Block CASDaoUtil.calculatePaginationRows');
                    grCatTable.addAggregate('COUNT');
                    grCatTable.query();
                    if (grCatTable.next())
                        return grCatTable.getAggregate('COUNT');
                }


            } else if (paramObj.table == this.appUtil.configuration.table.catalogItem) {
                if (paramObj.query.includes('category=')) {

                    var newQuery = paramObj.query.split("^");
                    totalRecords = 0;
                    var currentCat = newQuery[1].split('=')[1];
                    CASLogger.debug('Inside ElseIf CASDaoUtil.calculatePaginationRows:---currentCat: ' + currentCat);

                    var ga1 = new GlideAggregate('sc_cat_item_category');
                    ga1.addEncodedQuery('sc_category=' + currentCat);
                    ga1.addAggregate('COUNT');
                    ga1.query();
                    if (ga1.next())
                        totalRecords = ga1.getAggregate('COUNT');
                    CASLogger.debug('Inside ElseIf1 CASDaoUtil.calculatePaginationRows:---totalRecords: ' + totalRecords);
                    return totalRecords;

                } else {
                    if (paramObj.query) {
                        ga.addEncodedQuery(paramObj.query);
                        ga.addEncodedQuery('active=true^cas_uidISNOTEMPTY');
                    }


                    ga.addAggregate('COUNT');
                    ga.query();
                    if (ga.next())
                        totalRecords = ga.getAggregate('COUNT');
                    CASLogger.debug('Inside ElseIf2 CASDaoUtil.calculatePaginationRows:---totalRecords: ' + totalRecords);
                    return totalRecords;
                }
            }
            if (paramObj.query)
                ga.addEncodedQuery(paramObj.query);

            ga.addAggregate('COUNT');
            ga.query();
            if (ga.next())
                totalRecords = ga.getAggregate('COUNT');
            CASLogger.debug('Inside CASDaoUtil.calculatePaginationRows:---totalRecords: ' + totalRecords);
            return totalRecords;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.calculatePaginationRows : Exception Block: ' + ' pageId: ' + pageId + ' totalRecords: ' + totalRecords);
            CASLogger.error('Error caught inside CASDaoUtil.calculatePaginationRows widget: ' + e + ". Error found" + e.stack);
        }
    },

    //---------------------------------POPULATE_ARRAY method---------------------------------------
    //  USAGE: This method is used for fetching records and creating JSON array
    //					to be rendered on the html template
    /*PARAMS: paramObject : {
    																									currentRecord: number;
    																									lowerWindow: number;
    																									upperWindow: number;
    																									legend: string;
    																									totalRecords: number;
    																									showMyFilter: boolean;
    																									legendColor: string;
    																								}*/
    populateArray: function(paramObject, callBack) {
        try {
            CASLogger.debug('Inside CASDaoUtil.populateArray: This method is used for fetching records and creating JSON array to be rendered on the html template: paramObject: ' + paramObject);
            var response = this[paramObject.method](paramObject);
            CASLogger.debug('Inside ---populateArray: response: ' + response);
            callBack(response);
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.populateArray:' + ' paramObject: ' + paramObject + ' response: ' + response);
            CASLogger.error('Error caught inside CASDaoUtil.populateArray widget: ' + e + ". Error found" + e.stack);
        }
    },
    //------------------------------------PAGINATION------------------------------------------------
    //	USAGE: This method is used to for the pagination of the records,
    /*PARAMS: paginationObj : {
    																									currentRecord: number;
    																									legend: string;
    																									showMyFilter: boolean;
    																									legendColor: string;
    																									windowSize: number;
    																									table: string;
    																									method: string;
    																									query: string;
    																								}*/
    pagination: function(paramObj) {
        try {
            CASLogger.debug('Inside CASDaoUtil.pagination: This method is used for the pagination of the records.---paramObj: ' + paramObj);
            if (paramObj.itemsArray == undefined) {
                paramObj.itemsArray = [];
            }
            paramObj.totalRecords = parseInt(this.calculatePaginationRows(paramObj));
            this.createPaginationWindow(paramObj, function(response) {
                paramObj.lowerWindow = response.lowerWindow;
                paramObj.upperWindow = response.upperWindow;
            });
            paramObj.upperWindow = parseInt(this.checkAndSetPaginationLimit(paramObj));
            this.populateArray(paramObj, function(response) {
                if (paramObj.infiniteScroll) {
                    paramObj.itemsArray = paramObj.itemsArray.concat(response);
                } else {
                    paramObj.itemsArray = response;
                }
            });
            paramObj.upperDisplay = Math.min(paramObj.upperWindow, paramObj.totalRecords);
            CASLogger.debug('Inside CASDaoUtil.pagination:---paramObj: ' + paramObj);
            return paramObj;
        } catch (e) {
            CASLogger.debug('Inside catch block of CASDaoUtil.pagination:--- paramObj: ' + paramObj);
            CASLogger.error('Error caught inside CASDaoUtil.pagination: ' + e + ". Error found" + e.stack);
        }
    },

    //     createDefaultFieldJSON: function(requestGR) {

    //         try {
    //             CASLogger.debug('Inside CASDaoUtil.createDefaultFieldJSON:---requestGR: ' + requestGR);
    //             var var_set = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
    //             var variableGR1 = new GlideRecord(this.appUtil.configuration.table.variable);
    //             var queryString = 'variable_set=' + var_set;
    //             var defaultFieldsJSON = [];
    //             variableGR1.addEncodedQuery(queryString);
    //             variableGR1.orderBy('order');
    //             variableGR1.query();
    //             while (variableGR1.next()) {
    //                 CASlogger.debug('Inside while loop of table.variable gliderecord of CASDaoUtil.createDefaultFieldJSON:');
    //                 var innerJSON = {};
    //                 innerJSON["facets"] = {};
    //                 innerJSON["facets"]["value"] = [];
    //                 innerJSON["id"] = variableGR1.name + '';
    //                 innerJSON["sysId"] = variableGR1.sys_id + '';
    //                 innerJSON["label"] = (variableGR1.question_text) ? variableGR1.question_text.getDisplayValue() + '' : '';
    //                 innerJSON["description"] = (variableGR1.description) ? variableGR1.description.getDisplayValue() + '' : '';
    //                 innerJSON["facets"]["defaultValue"] = (variableGR1.default_value) ? variableGR1.default_value.getDisplayValue() + '' : '';
    //                 innerJSON["facets"]["requestValue"] = requestGR.variable_pool[variableGR1.name] + '';
    //                 innerJSON["typeValue"] = variableGR1.type + '';
    //                 var facetsValueGR = new GlideRecord('question_choice');
    //                 facetsValueGR.addQuery('question', variableGR1.sys_id);
    //                 facetsValueGR.orderBy('text');
    //                 facetsValueGR.query();

    //                 while (facetsValueGR.next()) {
    //                     CASLogger.debug('Inside while loop of question_choice gliderecord of CASDaoUtil.createDefaultFieldJSON:');
    //                     var valueJSON = {};
    //                     valueJSON["label"] = facetsValueGR.text.getDisplayValue() + '';
    //                     valueJSON["value"] = facetsValueGR.value.getDisplayValue() + '';
    //                     innerJSON["facets"]["value"].push(valueJSON);
    //                 }
    //                 defaultFieldsJSON.push(innerJSON);
    //             }
    //             CASLogger.debug('Inside CASDaoUtil.createDefaultFieldJSON:---defaultFieldsJSON: ' + defaultFieldsJSON);
    //             return defaultFieldsJSON;

    //         } catch (e) {
    //             CASLogger.debug('Inside catch block of CASDaoUtil.createDefaultFieldJSON: ' + ' requestGR: ' + requestGR + ' defaultFieldsJSON: ' + defaultFieldsJSON);
    //             CASLogger.error('Error caught inside CASDaoUtil.createDefaultFieldJSON: ' + e + ". Error found" + e.stack);
    //         }

    //     },


    //------------------------------------createJSONFromVariableTable-----------------------------------------------
    //	USAGE: This method is used to for creating JSON structure which can be used for rendering in the tab form,
    /*PARAMS: paramObject.... : {
    																									sysId: STRING;
    																								}*/


    //     createJSONFromVariableTable: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside CASDaoUtil.createJSONFromVariableTable: This method is used to for creating JSON structure which can be used for rendering in the tab form----paramObject: ' + paramObject);

    //             if (paramObject.table == 'approval') {
    //                 CASLogger.debug('Inside if block of CASDaoUtil.createJSONFromVariableTable:---paramObject.table: ' + paramObject.table);
    //                 var approvalGR = new GlideRecord(this.appUtil.configuration.table.approvals);
    //                 if (approvalGR.get(paramObject.sysId)) {
    //                     paramObject.sysId = approvalGR.sysapproval + '';
    //                     CASLogger.debug('Inside if block of CASDaoUtil.createJSONFromVariableTable:---paramObject.sysId: ' + paramObject.sysId);
    //                 }
    //             }
    //             var requestGR = new GlideRecord(this.appUtil.configuration.table.requests);
    //             requestGR.addQuery('sys_id', paramObject.sysId);
    //             requestGR.query();
    //             if (requestGR.next()) {
    //                 var defaultFieldsJSON = this.createDefaultFieldJSON(requestGR);
    //                 var variableGR = new GlideRecord(this.appUtil.configuration.table.variable);
    //                 var queryString = 'cat_item=' + requestGR.cat_item + '^x_vmw_cloudservice_field_visibility=true^ORtype=19^ORtype=20';
    //                 CASLogger.debug('Inside If Block ---CASDaoUtil.createJSONFromVariableTable: ----queryString: ' + queryString);

    //                 variableGR.addEncodedQuery(queryString);
    //                 variableGR.orderBy('order');
    //                 variableGR.query();

    //                 var mainJSONArray = [];
    //                 var mainJSON = {};
    //                 var innerJSONArray = [];
    //                 var selected_version = defaultFieldsJSON[0]['facets'].requestValue;
    //                 var field_version;
    //                 var firstContainer = true;
    //                 while (variableGR.next()) {

    //                     //if(variableGR.name!='version' ){
    //                     //	 selected_version=(innerJSONArray[0])?innerJSONArray[0]['facets'].requestValue:'';
    //                     //}
    //                     //field_version=variableGR.name.includes('__')?variableGR.name.split('__')[1]:'';
    //                     var variableVersion = variableGR.x_vmw_cloudservice_versions.getDisplayValue().replace(',', '');
    //                     field_version = variableVersion;
    //                     CASLogger.debug('Inside While Block ---CASDaoUtil.createJSONFromVariableTable: ----field_version: ' + field_version);
    //                     if (field_version == selected_version) {
    //                         if (variableGR.type.getDisplayValue() == 'Container Start') {
    //                             mainJSON = {};
    //                             mainJSON["id"] = variableGR.name + '';
    //                             mainJSON["sysId"] = variableGR.sys_id + '';
    //                             mainJSON["label"] = variableGR.question_text.getDisplayValue() + '';
    //                             mainJSON["description"] = variableGR.description.getDisplayValue() + '';
    //                             mainJSON["isMultiValued"] = true;
    //                             mainJSON["visible"] = JSON.parse(variableGR.visible_standalone.getDisplayValue());
    //                             mainJSON["tabVisibility"] = variableGR.x_vmw_cloudservice_field_visibility.getDisplayValue();
    //                             mainJSON["typeValue"] = variableGR.type + '';
    //                             innerJSONArray = [];
    //                         } else {
    //                             if (variableGR.type.getDisplayValue() != 'Container End') {
    //                                 var innerJSON = {};
    //                                 innerJSON["facets"] = {};
    //                                 innerJSON["facets"]["value"] = [];
    //                                 innerJSON["id"] = variableGR.name + '';
    //                                 innerJSON["sysId"] = variableGR.sys_id + '';
    //                                 innerJSON["label"] = (variableGR.question_text) ? variableGR.question_text.getDisplayValue() + '' : '';
    //                                 innerJSON["description"] = (variableGR.description) ? variableGR.description.getDisplayValue() + '' : '';
    //                                 innerJSON["facets"]["defaultValue"] = (variableGR.default_value) ? variableGR.default_value.getDisplayValue() + '' : '';
    //                                 innerJSON["facets"]["requestValue"] = requestGR.variable_pool[variableGR.name] + '';
    //                                 innerJSON["typeValue"] = variableGR.type + '';
    //                                 if (variableGR.type == 10) {
    //                                     innerJSON["facets"]["defaultValue"] = variableGR.default_value.getDisplayValue() + '';
    //                                 }
    //                                 var facetsValueGR = new GlideRecord('question_choice');
    //                                 facetsValueGR.addQuery('question', variableGR.sys_id);
    //                                 facetsValueGR.orderBy('text');
    //                                 facetsValueGR.query();

    //                                 while (facetsValueGR.next()) {
    //                                     var valueJSON = {};
    //                                     valueJSON["label"] = facetsValueGR.text.getDisplayValue() + '';
    //                                     valueJSON["value"] = facetsValueGR.value.getDisplayValue() + '';
    //                                     innerJSON["facets"]["value"].push(valueJSON);
    //                                 }

    //                                 if (firstContainer) {
    //                                     for (var i = 0; i < defaultFieldsJSON.length; i++) {
    //                                         innerJSONArray.push(defaultFieldsJSON[i]);
    //                                     }
    //                                     innerJSONArray.push(innerJSON);
    //                                     firstContainer = false;
    //                                 } else {
    //                                     innerJSONArray.push(innerJSON);
    //                                 }

    //                             } else {
    //                                 if (firstContainer) {
    //                                     for (var i = 0; i < defaultFieldsJSON.length; i++) {
    //                                         innerJSONArray.push(defaultFieldsJSON[i]);
    //                                     }
    //                                     firstContainer = false;
    //                                 }

    //                                 mainJSON["values"] = innerJSONArray;
    //                                 mainJSONArray.push(mainJSON);
    //                             }
    //                         }

    //                     }
    //                 }
    //                 CASLogger.debug('Inside CASDaoUtil.createJSONFromVariableTable: ----mainJSONArray: ' + mainJSONArray);
    //                 return mainJSONArray;

    //             }
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.createJSONFromVariableTable : Exception Block: ' + ' variableVersion: ' + variableVersion + ' mainJSONArray: ' + mainJSONArray);
    //             CASLogger.error('Error caught inside CASDaoUtil.createJSONFromVariableTable: ' + e + ". Error found" + e.stack);
    //         }
    //     },



    //---------------------------------fetchPortalApprovalDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for Approval and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																													paramObject : {
    																														sysId: string;
    																													}*/
    //     fetchPortalApprovalDetails: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalDetails: Used fetching records for RITM and creating JSON array: paramObject: ' + paramObject);
    //             var mainJSON = {};
    //             mainJSON = (this.fetchPortalApprovalItems(paramObject)) ? (this.fetchPortalApprovalItems(paramObject))[0] : {};
    //             var response = this.createJSONFromVariableTable(paramObject);
    //             mainJSON.detailSection = (response) ? response : [];
    //             CASLogger.debug('Inside CASDaoUtil.fetchPortalApprovalDetails: mainJSON: ' + mainJSON);
    //             return mainJSON;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalApprovalDetails : Exception Block: ' + ' paramObject: ' + paramObject + ' mainJSON: ' + mainJSON);
    //             CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalApprovalDetails " + e + ". Error found" + e.stack);
    //         }
    //     },

    //---------------------------------fetchPortalRequestDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for RITMs and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																															paramObject : {
    																																sysId: string;
    																															}*/
    //     fetchPortalRequestDetails: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestDetails: Used fetching records for RITM and creating JSON array: paramObject: ' + paramObject);
    //             var mainJSON = {};
    //             mainJSON = (this.fetchPortalRequestItems(paramObject)) ? (this.fetchPortalRequestItems(paramObject))[0] : {};
    //             var response = this.createJSONFromVariableTable(paramObject);
    //             mainJSON.detailSection = (response) ? response : [];
    //             CASLogger.debug('Inside CASDaoUtil.fetchPortalRequestDetails: mainJSON: ' + mainJSON);
    //             return mainJSON;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalRequestDetails : Exception Block: ' + ' paramObject: ' + paramObject + ' mainJSON: ' + mainJSON);
    //             CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalRequestDetails " + e + ". Error found" + e.stack);
    //         }
    //     },

    fetchRowCount: function(table, query) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchRowCount : Get row count: table: ' + table);
            var gaTable = new GlideAggregate(table);
            gaTable.addEncodedQuery(query);
            gaTable.addAggregate('COUNT');
            gaTable.query();
            if (gaTable.next()) {
                CASLogger.debug('Inside if block of CASDaoUtil.fetchRowCount: ');
                return gaTable.getAggregate('COUNT');
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchRowCount : Exception Block: ' + ' query: ' + query + 'table: ' + table);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchRowCount " + e + ". Error found" + e.stack);
        }
    },

    //---------------------------------fetchPortalRequestItems method---------------------------------------
    //  USAGE: This method is used for fetching records for activities requests items and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		lowerWindow: number;
    																																		upperWindow: number;
    																																		legend: string;
    																																		broadcast: string;
    																																		totalRecords: string;
    																																		showMyFilter: boolean;
    																																		legendColor: string;
    																																		currentRecord: number;


    																																	}*/
    //     fetchPortalRequestItems: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestItems : creating JSON array for fetching records for activities requests items to be rendered on the html template');
    //             var url_color, arr = [],
    //                 query = '';
    //             var requestGR = new GlideRecord(this.appUtil.configuration.table.requests);
    //             if (paramObject.sysId) {
    //                 requestGR.addEncodedQuery('sys_id=' + paramObject.sysId);
    //                 requestGR.query();
    //             } else {
    //                 CASLogger.debug('Inside Else Block: (paramObject.sysId): CASDaoUtil.fetchPortalRequestItems:---state: ' + paramObject.legend);
    //                 if (paramObject.legend) {
    //                     if (paramObject.legend == 'Rejected' || paramObject.legend == 'Approved') {
    //                         requestGR.addQuery('approval', '=', paramObject.legend);
    //                     }
    //                     if (paramObject.legend == 'Approved') {
    //                         query += 'active=true';
    //                     }
    //                     if (paramObject.legend == "Closed Incomplete" || paramObject.legend == 'Closed Complete' || paramObject.legend == 'Work In Progress' || paramObject.legend == 'Open') {
    //                         var requestValue;
    //                         if (paramObject.legend == "Closed Incomplete") {
    //                             requestValue = 4;
    //                         } else if (paramObject.legend == 'Closed Complete') {
    //                             requestValue = 3;
    //                         } else if (paramObject.legend == 'Work In Progress') {
    //                             requestValue = 2;
    //                         } else if (paramObject.legend == 'Open') {
    //                             requestValue = 1;
    //                         }
    //                         requestGR.addQuery('state', '=', requestValue);
    //                     }
    //                 }

    //                 if (gs.getUser().hasRole('admin')) {
    //                     if (paramObject.showMyFilter == "true") {
    //                         query += 'request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^';
    //                     }
    //                 } else {
    //                     query += 'request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^';
    //                 }

    //                 if (paramObject.query) { //!=''){
    //                     query += paramObject.query;
    //                 }

    //                 query += 'cat_item.sc_catalogsLIKE533fe9dfdb2233006adb48703996191b';

    //                 var queryObject = {
    //                     table: this.appUtil.configuration.table.requests,
    //                     query: query
    //                 };
    //                 CASLogger.debug('Inside the CASDaoUtil.fetchPortalRequestItems : queryObject= ' + JSON.stringify(queryObject));

    //                 if (queryObject.query)
    //                     requestGR.addEncodedQuery(queryObject.query);


    //                 if (paramObject.lowerWindow != null && paramObject.upperWindow != null)
    //                     requestGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

    //                 requestGR.orderByDesc('sys_created_on');

    //                 if (paramObject.orderBy && paramObject.orderByAsc) {
    //                     requestGR.orderByDesc(paramObject.orderBy);
    //                 } else {
    //                     requestGR.orderBy(paramObject.orderBy);
    //                 }

    //                 requestGR.query();
    //                 if (paramObject.getCount) {
    //                     //return requestGR.getRowCount();
    //                     return this.fetchRowCount(this.appUtil.configuration.table.requests, requestGR.getEncodedQuery());
    //                 }
    //             }
    //             while (requestGR.next()) {
    //                 CASLogger.debug('Inside while loop of table.requests gliderecord of CASDaoUtil.fetchPortalRequestItems:');

    //                 arr.push({
    //                     item: requestGR.cat_item.getDisplayValue().toString() || "Not Available",
    //                     number: requestGR.number.getDisplayValue().toString() || 'Not Available',
    //                     state: requestGR.state.getDisplayValue().toString() || 'Not Available',
    //                     stage: requestGR.stage.getDisplayValue().toString() || 'Not Available',
    //                     sysID: requestGR.sys_id + '',
    //                     requested_for: requestGR.request.requested_for.getDisplayValue().toString() || 'Not Available',
    //                     request: requestGR.request.getDisplayValue().toString() || 'Not Available',
    //                     created: requestGR.sys_created_on.getDisplayValue().toString() || 'Not Available',
    //                     created_by: requestGR.opened_by.getDisplayValue().toString() || 'Not Available',
    //                     link: "?id=" + this.appUtil.configuration.page.activitiesForm + "&table=" + this.appUtil.configuration.table.requests + "&sysId=" + requestGR.sys_id + '',
    //                     description: requestGR.short_description.getDisplayValue().toString()
    //                 });
    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchPortalRequestItems: arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalRequestItems : Exception Block: ' + ' queryObject: ' + queryObject + ' arr: ' + arr);
    //             CASLogger.error('Exception caught inside the CASDaoUtil.fetchPortalRequestItems' + e + ". Error found" + e.stack);
    //         }
    //     },

    //---------------------------------fetchPortalApprovalItems method---------------------------------------
    //  USAGE: This method is used for fetching records for activities approval and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		lowerWindow: number;
    																																		upperWindow: number;
    																																		legend: string;
    																																		totalRecords: string;
    																																		showMyFilter: boolean;
    																																		legendColor: string;
    																																		currentRecord: number;
    																																	}*/
    //     fetchPortalApprovalItems: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalItems : creating JSON array for fetching records for activities approvals to be rendered on the html template:---paramObject: ' + paramObject);
    //             var url_color, arr = [],
    //                 query = '';

    //             var approvalGR = new GlideRecord(this.appUtil.configuration.table.approvals);
    //             if (paramObject.sysId) {
    //                 CASLogger.debug('Inside if block of CASDaoUtil.fetchPortalApprovalItems:---paramObject.sysId: ' + paramObject.sysId);
    //                 approvalGR.addEncodedQuery('sys_id=' + paramObject.sysId);
    //                 approvalGR.query();
    //             } else {
    //                 //Creating query according to the legend parameter passed
    //                 CASLogger.debug('Inside else block of CASDaoUtil.fetchPortalApprovalItems:---state: ' + paramObject.legend);
    //                 if (paramObject.legend) {
    //                     if (paramObject.legend == 'Requested' || paramObject.legend == 'Rejected' || paramObject.legend == 'Approved') {
    //                         query += 'state=' + paramObject.legend;
    //                     }
    //                 }

    //                 //Creating query according to the roles filter parameter passed
    //                 if (gs.getUser().hasRole('admin')) {
    //                     if (paramObject.showMyFilter == "true") {
    //                         query += '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //                     }
    //                 } else {
    //                     query += '^approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //                 }

    //                 if (paramObject.query) {
    //                     query += '^' + paramObject.query;
    //                 }

    //                 var queryObject = {
    //                     table: this.appUtil.configuration.table.approvals,
    //                     query: query
    //                 };
    //                 CASLogger.debug('Inside CASDaoUtil.fetchPortalApprovalItems: queryObject: ' + queryObject);


    //                 if (queryObject.query)
    //                     approvalGR.addEncodedQuery(queryObject.query);

    //                 if (paramObject.lowerWindow != null && paramObject.upperWindow != null)
    //                     approvalGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

    //                 approvalGR.orderByDesc('sys_created_on');

    //                 if (paramObject.orderBy) {
    //                     if (paramObject.orderByAsc) {
    //                         approvalGR.orderByDesc(paramObject.orderBy);
    //                     } else {
    //                         approvalGR.orderBy(paramObject.orderBy);
    //                     }
    //                 }
    //                 //approvalGR.addEncodedQuery('group.assignment_group=' + gs.getProperty(this.appUtil.configuration.properties.assignment_group));
    //                 approvalGR.addEncodedQuery('group.assignment_group.nameIN' + gs.getProperty(this.appUtil.configuration.properties.assignment_group));
    //                 //approvalGR.addEncodedQuery('group.assignment_group.sys_idIN5861d7b4db2733007b245385ca96192c,b85d44954a3623120004689b2d5dd60a');

    //                 //if(!paramObject.query)
    //                 approvalGR.addEncodedQuery('sysapproval.descriptionSTARTSWITH533fe9dfdb2233006adb48703996191b');
    //                 approvalGR.query();
    //                 CASLogger.debug('Inside the CASDaoUtil.fetchPortalApprovalItems : queryObject= ' + JSON.stringify(queryObject));

    //                 if (paramObject.getCount) {
    //                     //return approvalGR.getRowCount();

    //                     return this.fetchRowCount(this.appUtil.configuration.table.approvals, approvalGR.getEncodedQuery());
    //                 }
    //             }
    //             while (approvalGR.next()) {
    //                 //if(approvalGR.sysapproval.cat_item+''!=''){
    //                 CASLogger.debug('Inside while loop of CASDaoUtil.fetchPortalApprovalItems :');
    //                 arr.push({
    //                     state: approvalGR.state.getDisplayValue().toString() || 'Not Available',
    //                     sysId: approvalGR.getUniqueValue(),
    //                     number: approvalGR.sysapproval.getDisplayValue().toString() || 'Not Available',
    //                     item: (approvalGR.sysapproval.cat_item) ? approvalGR.sysapproval.cat_item.getDisplayValue().toString() : 'Not Available',
    //                     approver: approvalGR.approver.user_name + '' || 'Not Available',
    //                     //created_by: approvalGR.sys_created_by+'' ||'Not Available',
    //                     created_by: approvalGR.sysapproval.opened_by.getDisplayValue() + '' || 'Not Available',
    //                     created: approvalGR.sys_created_on.getDisplayValue().toString() || 'Not Available',
    //                     description: approvalGR.sysapproval.short_description + '',
    //                     link: "?id=" + this.appUtil.configuration.page.activitiesForm + "&table=" + this.appUtil.configuration.table.approvals + "&sysId=" + approvalGR.getUniqueValue(),
    //                 });
    //             }
    //             //}
    //             CASLogger.debug('Inside CASDaoUtil.fetchPortalApprovalItems:---arr: ' + arr);
    //             return arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalApprovalItems : Exception Block: ' + ' arr: ' + arr + ' query: ' + query + ' queryObject: ' + queryObject);
    //             CASLogger.error('Exception caught inside the CASDaoUtil.fetchPortalApprovalItems' + e + ". Error found" + e.stack);
    //         }
    //     },

    //---------------------------------fetchPortalActions method---------------------------------------
    //  USAGE: This method is used for fetching related actions records for deployments or machine and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																	paramObject : {
    																																		type: string
    																																		sysId: string;
    																																	}*/
    fetchPortalActions: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchPortalActions:---paramObject: ' + paramObject);
            var actionArray = [];
            var actionGR = new GlideRecord(this.appUtil.configuration.table.action);
            if (paramObject && paramObject.type == 'deployment') {
                actionGR.addEncodedQuery('deployment=' + paramObject.sysId);
            } else {
                CASLogger.debug('Inside Else Block CASDaoUtil.fetchPortalActions');
                actionGR.addEncodedQuery('machine=' + paramObject.sysId);
            }

            actionGR.query();
            while (actionGR.next()) {
                CASLogger.debug('Inside while loop of CASDaoUtil.fetchPortalActions:');
                actionArray.push({
                    name: actionGR.name.getDisplayValue() + '',
                    label: actionGR.display_name.getDisplayValue() + '',
                    actionId: actionGR.sys_id + '',
                    machine: actionGR.machine.getDisplayValue() + '',
                    deployment: actionGR.deployment.getDisplayValue() + '',
                    valid: (this.checkEntitlementActions(actionGR.name.getDisplayValue() + '', paramObject.type, paramObject.endpoint) == 'true') && (actionGR.valid.getDisplayValue() + '' == 'true')
                });
            }
            CASLogger.debug('Inside CASDaoUtil.fetchPortalActions:---actionArray: ' + actionArray);
            return actionArray;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalActions : Exception Block: ' + ' actionArray: ' + actionArray);
            CASLogger.error("Exception caught inside CASDaoUtil.fetchPortalActions  " + e + ". Error found" + e.stack);
        }
    },

    fetchServicePortalActions: function(paramObject) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.fetchServicePortalActions:---paramObject: ' + paramObject);
            var actionArray = [];
            var ActionsCatalogArr = [];
            var ds_plugin1 = GlidePluginManager.isActive("com.glide.domain");
            var ds_plugin2 = GlidePluginManager.isActive("com.glideapp.servicecatalog.domain_separation");
            var ActionsCatalog = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            if (!((ds_plugin1 == true || ds_plugin1 == 'true') && (ds_plugin2 == true || ds_plugin2 == 'true'))) {
                ActionsCatalog.addEncodedQuery('organisation_name=NULL');
            }
            ActionsCatalog.query();

            while (ActionsCatalog.next()) {
                // CASLogger.debug('Inside while loop of table.catalogItem gliderecord of CASDaoUtil.fetchServicePortalActions:');

                ActionsCatalogArr.push({
                    name: ActionsCatalog.name.getDisplayValue(),
                    type: ActionsCatalog.short_description.getDisplayValue(),
                    catalogSysId: ActionsCatalog.sys_id.getDisplayValue(),
                    active: ActionsCatalog.active.getDisplayValue()
                });
            }
            var actionGR = new GlideRecord(this.appUtil.configuration.table.action);
            if (paramObject && paramObject.type == 'deployment') {
                actionGR.addEncodedQuery('deployment=' + paramObject.deploymentSysId);
            } else {
                actionGR.addEncodedQuery('machine=' + paramObject.machineSysId);
                CASLogger.debug('Inside else block of table.action gliderecord of CASDaoUtil.fetchServicePortalActions:');
            }

            actionGR.query();
            while (actionGR.next()) {
                //   CASLogger.debug('Inside while loop of table.action gliderecord of CASDaoUtil.fetchServicePortalActions:');
                var catalogSysId = '';
                var isCatalogActive = false;

                ActionsCatalogArr.forEach(function(catalog) {

                    if (paramObject.type == 'deployment') {
                        //   if(catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type == 'Deployment Action-'+actionGR.display_name.getDisplayValue()){
                        if (catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type.startsWith('Deployment Action')) {
                            catalogSysId = catalog.catalogSysId;
                            if (catalog.active == 'true' || catalog.active == true) isCatalogActive = true;
                        }
                    } else {
                        // if(catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type == 'Resource Action-'+actionGR.display_name.getDisplayValue()){
                        if (catalog.name == actionGR.display_name.getDisplayValue() + '' && catalog.type.startsWith('Resource Action')) {
                            catalogSysId = catalog.catalogSysId;
                            if (catalog.active == 'true' || catalog.active == true) isCatalogActive = true;
                        }
                    }

                });

                actionArray.push({
                    name: actionGR.name.getDisplayValue() + '',
                    label: actionGR.display_name.getDisplayValue() + '',
                    actionId: actionGR.sys_id + '',
                    machine: actionGR.machine.getDisplayValue() + '',
                    deployment: actionGR.deployment.getDisplayValue() + '',
                    catalogSysId: catalogSysId,
                    actionCatalogLink: '/' + gs.getProperty(this.appUtil.configuration.properties.ServicePortalPrefix) + '?id=' + this.appUtil.configuration.page.spCatalogItemPage + '&sys_id=' + (catalogSysId ? catalogSysId : null) + '&deploy_sys_id=' + paramObject.deploymentSysId + '&mac_sys_id=' + (paramObject.machineSysId ? paramObject.machineSysId : -1),
                    valid: (this.checkActionsCatalogEntitlement(catalogSysId) + '' == 'true') && (actionGR.valid.getDisplayValue() + '' == 'true') && isCatalogActive
                });
            }
            CASLogger.debug('Inside CASDaoUtil.fetchServicePortalActions:---actionArray: ' + actionArray);
            return actionArray;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchServicePortalActions : Exception Block: ' + ' actionArray: ' + actionArray + ' ActionsCatalogArr: ' + ActionsCatalogArr + ' catalogSysId: ' + catalogSysId);
            CASLogger.error("Exception caught inside CASDaoUtil.fetchServicePortalActions  " + e + ". Error found" + e.stack);
        }
    },

    checkOwnership: function(obj_sys_id, type) {
        try {
            CASLogger.debug('Inside  CASDaoUtil.checkOwnership---type: ' + type + ' obj_sys_id: ' + obj_sys_id);
            if (type == 'machine') {
                CASLogger.debug('Inside if block of CASDaoUtil.checkOwnership:');
                var grOwner = new GlideRecord(this.appUtil.configuration.table.machines);
                grOwner.addQuery('sys_id', obj_sys_id);
                grOwner.addQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                grOwner.query();
                //if(grOwner.getRowCount()>0){
                if (grOwner.next()) {
                    return "true";
                }
                return "false";
            } else if (type == 'deployment') {
                CASLogger.debug('Inside ElseIf CASDaoUtil.checkOwnership---type: ' + type);

                var grDep = new GlideRecord(this.appUtil.configuration.table.deployments);
                grDep.addQuery('sys_id', obj_sys_id);
                grDep.addQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
                grDep.query();
                //if(grDep.getRowCount()>0){
                if (grDep.next()) {
                    return "true";
                }
                return "false";
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkOwnership : Exception Block: ' + ' obj_sys_id: ' + obj_sys_id + ' type: ' + type);
            CASLogger.error("Exception caught inside CASDaoUtil.checkOwnership  " + e + ". Error found" + e.stack);
        }
    },
    //---------------------------------fetchPortalRelatedMachines method---------------------------------------
    //  USAGE: This method is used for fetching related machine records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject.
    																																	paramObject : {
    																																		sysId: string;
    																																	}*/
    fetchPortalRelatedMachines: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalRelatedMachines: Used fetching related machines records for deployments and creating JSON array:---paramObject' + paramObject);

            var resources = [];

            var machineGR = new GlideRecord(this.appUtil.configuration.table.machines);
            machineGR.addEncodedQuery('deployment_sys=' + paramObject.sysId);
            if (!gs.hasRole('admin')) {
                machineGR.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            }
            machineGR.addEncodedQuery('operational_status=1');
            machineGR.orderBy('machine_name');
            machineGR.query();
            while (machineGR.next()) {
                CASLogger.debug('Inside while loop of table.machines gliderecord of CASDaoUtil.fetchPortalRelatedMachines:');
                resources.push({
                    status: (machineGR.status) ? machineGR.status.getDisplayValue() + '' : 'Status Not Available',
                    name: machineGR.getDisplayValue() + '',
                    sysId: machineGR.sys_id + '',
                    shareLink: '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + paramObject.sysId + '&macSysId=' + machineGR.sys_id,
                    shareable: this.checkOwnership(machineGR.sys_id, 'machine'),
                    link: '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentDetail + '&sysId=' + paramObject.sysId + '&macSysId=' + machineGR.sys_id,
                    type: (machineGR.type) ? machineGR.type.getDisplayValue() + '' : 'Not Available',
                    createdAt: (machineGR.createdat) ? machineGR.createdat.getDisplayValue() + '' : 'Not Available',
                    createdOn: (machineGR.createdat) ? machineGR.createdat.getDisplayValue() + '' : 'Not Available',
                    actions: this.fetchPortalActions({
                        sysId: machineGR.getUniqueValue() + '',
                        type: 'machine',
                        endpoint: machineGR.project.organization + ''
                    })
                });
            }
            if (paramObject && paramObject.resourceCount) {

                return resources.length;
            }
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalRelatedMachines: : resources: ' + resources);
            return resources;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalRelatedMachines : Exception Block: ' + ' paramObject: ' + paramObject + ' resources: ' + resources);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalRelatedMachines " + e + ". Error found" + e.stack);
        }
    },




    //---------------------------------fetchPortalDetailSection method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    //  Updated By: Bharat
    //  Update Comments: Added workaround to fix boolean values by converting them to strings
    /*  PARAMS: Below is the structure of the paramObject
    																																		paramObject : {
    																																			sysId: string;
    																																		}*/
    fetchPortalDetailSection: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDetailSection: Used fetching details from backend for for deployments/machines and creating JSON array:---paramObject: ' + paramObject);
            var data = {};
            data.customPropertiesTabs = [];
            var passedSysId = (paramObject.machineSysId) ? paramObject.machineSysId : paramObject.sysId;
            var table = (paramObject.machineSysId) ? this.appUtil.configuration.table.machines : this.appUtil.configuration.table.deployments;
            CASLogger.debug('Inside the fetchPortalDetailSection: passedSysId: ' + passedSysId + ' Table: ' + table);
            var customPropertiesSection;
            var customPropertiesElement;
            var sys_id;

            customPropertiesSection = new GlideRecord(this.appUtil.configuration.table.uiSection);
            customPropertiesSection.addEncodedQuery("nameSTARTSWITH" + table);
            customPropertiesSection.orderBy("caption");
            customPropertiesSection.query();
            while (customPropertiesSection.next()) {
                //   CASLogger.debug('Inside while loop of table.uiSection gliderecord of CASDaoUtil.fetchPortalDetailSection: ');
                if ((customPropertiesSection.caption + '') != 'Relationship' && (customPropertiesSection.caption + '') != 'CI Relations' && (customPropertiesSection.caption + '') != 'Custom Properties' && (customPropertiesSection.caption + '') != 'Inputs' && (customPropertiesSection.caption + '') != 'Outputs' && (customPropertiesSection.caption + '') != 'Host') {
                    customPropertiesElement = new GlideRecord(this.appUtil.configuration.table.uiElement);
                    sys_id = "";
                    sys_id = customPropertiesSection.sys_id + '';

                    customPropertiesElement.addEncodedQuery('sys_ui_section=' + sys_id);
                    customPropertiesElement.query();
                    var deploymentFieldArray = [];
                    while (customPropertiesElement.next()) {
                        // CASLogger.debug('Inside while loop of table.uiElement gliderecord of  CASDaoUtil.fetchPortalDetailSection:');
                        if (!(customPropertiesElement.element + '').includes("split") && !(customPropertiesElement.element + '').includes("xml") && (customPropertiesElement.element + '' != 'actions')) {
                            var customDeploymentGR = new GlideRecord(table);
                            customDeploymentGR.addQuery('sys_id', '=', passedSysId);
                            customDeploymentGR.setLimit(1);
                            customDeploymentGR.query();
                            var search = customPropertiesElement.element + '';
                            var elementArray = search.split('.');
                            var value;
                            var label;
                            while (customDeploymentGR.next()) {
                                //Handling the undefined cases generated while creating dynamic JSON layout
                                try {
                                    value = search.split('.').reduce(function(gr, currentValue) {
                                        return gr[currentValue];
                                    }, customDeploymentGR);
                                    label = search.split('.').reduce(function(gr, currentValue) {
                                        return gr[currentValue];
                                    }, customDeploymentGR).getLabel();
                                    value = (value) ? value.getDisplayValue() : value + '';
                                } catch (e) {
                                    //This exception can be ignored
                                    //CASLogger.error("IGNORE this expection: Exception Caught inside CASDaoUtil.fetchPortalDetailSection "+e);
                                }
                            }
                            deploymentFieldArray.push({
                                "name": search, //this.portalCapitalize(customPropertiesElement.element)+'',
                                "value": (value) ? value : '-',
                                "label": label
                            });
                        }
                    }
                    var sectionJSON = {
                        name: (customPropertiesSection.caption) ? customPropertiesSection.caption + '' : 'Summary',
                        sys_id: sys_id,
                        items: deploymentFieldArray
                    };
                    data.customPropertiesTabs.push(sectionJSON);
                } else if ((customPropertiesSection.caption + '') == 'Custom Properties' || (customPropertiesSection.caption + '') == 'Inputs' || (customPropertiesSection.caption + '') == 'Host' || (customPropertiesSection.caption + '') == 'Outputs') {
                    CASLogger.debug('Inside Else IF CASDaoUtil.fetchPortalDetailSection: passedSysId ');
                    var customPropertiesJSON;
                    var deploymentFieldArray2 = [];
                    var customDeploymentGR2 = new GlideRecord(table);
                    customDeploymentGR2.addQuery('sys_id', '=', passedSysId);
                    customDeploymentGR2.setLimit(1);
                    customDeploymentGR2.query();
                    if (customDeploymentGR2.next()) {
                        if ((customPropertiesSection.caption + '') == 'Custom Properties')
                            customPropertiesJSON = customDeploymentGR2['custom_properties_schema'] ? JSON.parse(customDeploymentGR2['custom_properties_schema']) : [];
                        if ((customPropertiesSection.caption + '') == 'Inputs')
                            customPropertiesJSON = customDeploymentGR2['inputs'] ? JSON.parse(customDeploymentGR2['inputs']) : [];
                        if ((customPropertiesSection.caption + '') == 'Outputs')
                            customPropertiesJSON = customDeploymentGR2['outputs'] ? JSON.parse(customDeploymentGR2['outputs']) : [];
                        if ((customPropertiesSection.caption + '') == 'Host')
                            customPropertiesJSON = customDeploymentGR2['host_schema'] ? JSON.parse(customDeploymentGR2['host_schema']) : [];
                    }
                    for (var item in customPropertiesJSON) {

                        if (typeof customPropertiesJSON[item] == "boolean")
                            customPropertiesJSON[item] = customPropertiesJSON[item] + "";

                        deploymentFieldArray2.push({
                            "name": item, //this.portalCapitalize(customPropertiesElement.element)+'',
                            "value": (customPropertiesJSON[item]) ? customPropertiesJSON[item] : '-',
                            "label": item
                        });
                    }
                    var sectionJSON2 = {
                        name: (customPropertiesSection.caption) ? customPropertiesSection.caption + '' : 'Summary',
                        sys_id: customPropertiesSection.sys_id + '',
                        items: deploymentFieldArray2
                    };
                    data.customPropertiesTabs.push(sectionJSON2);
                }
            }
            CASLogger.debug('Inside CASDaoUtil.fetchPortalDetailSection:--- data.customPropertiesTabs: ' + data.customPropertiesTabs);
            return data.customPropertiesTabs;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalDetailSection : Exception Block: ' + ' data: ' + data + ' passedSysId: ' + passedSysId + ' sys_id: ' + sys_id + ' search: ' + search + ' customPropertiesJSON: ' + customPropertiesJSON + ' table: ' + table);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDetailSection " + e + ". Error found" + e.stack);
        }
    },
    //---------------------------------fetchPortalActionRequests method---------------------------------------
    //  USAGE: This method is used for fetching Action request history for specific mahcines or deployments
    /*  PARAMS: Below is the structure of the paramObject
    																																			paramObject : {
    																																				sysId: string;
    																																			}*/
    fetchPortalActionRequests: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalActionRequests: Used for fetching Action request history for specific mahcines or deployments.: paramObject: ' + paramObject);

            var itemsArray = [];
            var requestJSON = {
                name: 'History',
            };

            var requestGR = new GlideRecord(this.appUtil.configuration.table.actionRequests);
            if (paramObject && paramObject.machineSysId) {
                requestGR.addEncodedQuery('action.machine=' + paramObject.machineSysId);
            } else {
                CASLogger.debug('Inside Else Block CASDaoUtil.fetchPortalActionRequests: Action Deployment ');
                requestGR.addEncodedQuery('action.deployment=' + paramObject.sysId);
            }
            requestGR.orderByDesc('sys_created_on');
            requestGR.query();
            //populating the items array
            while (requestGR.next()) {
                CASLogger.debug('Inside while loop of table.actionRequests gliderecord of CASDaoUtil.fetchPortalActionRequests:');
                itemsArray.push({
                    actionName: requestGR.action.getDisplayValue() + '',
                    reason: requestGR.reason.getDisplayValue() + '',
                    description: requestGR.description.getDisplayValue() + '',
                    createdBy: requestGR.sys_created_by.getDisplayValue() + '',
                    createdOn: requestGR.sys_created_on + '',
                    comment: requestGR.comment.getDisplayValue() + '',
                    status: requestGR.status.getDisplayValue() + '',
                    state: requestGR.state.getDisplayValue() + ''
                });
            }
            requestJSON.items = itemsArray;
            CASLogger.debug('Inside CASDaoUtil.fetchPortalActionRequests :---requestJSON: ' + requestJSON);
            return requestJSON;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalActionRequests : Exception Block: ' + ' itemsArray: ' + itemsArray + ' requestJSON: ' + requestJSON);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalActionRequests " + e + ". Error found" + e.stack);
        }
    },

    //---------------------------------fetchPortalDeploymentDetails method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																			paramObject : {
    																																				sysId: string;
    																																			}*/
    fetchPortalDeploymentDetails: function(paramObject) {
        try {
            //gs.addErrorMessage(JSON.stringify(paramObject));
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDeploymentDetails: Used fetching records for deployments and creating JSON array: paramObject: ' + paramObject);

            var mainJSON = {};
            var endpoint = '';
            if (paramObject.machineSysId) {
                CASLogger.debug('Inside if block of CASDaoUtil.fetchPortalDeploymentDetails:---paramObject.machineSysId: ' + paramObject.machineSysId);
                var machineGR1 = new GlideRecord(this.appUtil.configuration.table.machines);
                if (machineGR1.get(paramObject.machineSysId)) {
                    machineGR1.query();
                    if (machineGR1.next()) {
                        endpoint = machineGR1.project.organization + '';
                        CASLogger.debug('Inside if block of table.machines gliderecord of CASDaoUtil.fetchPortalDeploymentDetails:---endpoint: ' + endpoint);
                    }
                }
            }
            mainJSON = (this.fetchPortalDeployments(paramObject).length !== 0) ? (this.fetchPortalDeployments(paramObject))[0] : {};
            mainJSON.relatedResources = (this.fetchPortalRelatedMachines(paramObject)) ? (this.fetchPortalRelatedMachines(paramObject)) : [];
            mainJSON.detailSection = (this.fetchPortalDetailSection(paramObject)) ? (this.fetchPortalDetailSection(paramObject)) : [];
            mainJSON.detailSection.push(this.fetchPortalActionRequests(paramObject));
            mainJSON.machineAction = paramObject.isServicePortal ?
                this.fetchServicePortalActions({
                    deploymentSysId: paramObject.sysId,
                    machineSysId: paramObject.machineSysId,
                    type: 'machine'
                }) :
                this.fetchPortalActions({
                    sysId: paramObject.machineSysId,
                    type: 'machine',
                    endpoint: endpoint
                });
            mainJSON.machineShareable = this.checkOwnership(paramObject.machineSysId, 'machine');
            mainJSON.machineShareLink = '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + paramObject.sysId + '&macSysId=' + paramObject.machineSysId;

            var depGR = new GlideRecord(this.appUtil.configuration.table.deployments);
            if (depGR.get(paramObject.sysId)) {
                depGR.query();
                var dep_name = depGR.name + '';
                CASLogger.debug('Inside if block of table.deployments gliderecord of CASDaoUtil.fetchPortalDeploymentDetails:---dep_name: ' + dep_name);
            }

            var macGR = new GlideRecord(this.appUtil.configuration.table.machines);
            if (macGR.get(paramObject.machineSysId)) {
                macGR.query();
                var machine_name = macGR.name + '';
                CASLogger.debug('Inside if block of table.machines gliderecord of CASDaoUtil.fetchPortalDeploymentDetails:---machine_name: ' + machine_name);
            }

            mainJSON.machineShareLink = mainJSON.machineShareLink + '&dep_name=' + dep_name + '&mac_name=' + machine_name;
            CASLogger.debug('Inside CASDaoUtil.fetchPortalDeploymentDetails:---mainJSON: ' + mainJSON);
            return mainJSON;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalDeploymentDetails : Exception Block: ' + ' machine_name: ' + machine_name + ' dep_name: ' + dep_name + '  mainJSON: ' + mainJSON);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDeploymentDetails " + e + ". Error found" + e.stack);
        }
    },

    //---------------------------------fetchPortalDeployments method---------------------------------------
    //  USAGE: This method is used for fetching records for deployments and creating JSON array
    //					to be rendered on the html template
    /*  PARAMS: Below is the structure of the paramObject
    																																						paramObject : {
    																																							sysId: string;
    																																							organizationSysId: string;
    																																							projectSysId: string;
    																																						}*/
    fetchPortalDeployments: function(paramObject) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.fetchPortalDeployments: Used fetching records for deployments and creating JSON array: paramObject: ' + paramObject);
            var arr = [];
            var query = '';
            var deploymentGR = new GlideRecord(this.appUtil.configuration.table.deployments);

            if (paramObject && paramObject.query) {
                query += paramObject.query;
            }
            deploymentGR.addEncodedQuery(query);

            if (paramObject.orderBy && paramObject.orderByAsc) {
                deploymentGR.orderByDesc(paramObject.orderBy);
            } else if (paramObject.orderBy) {
                deploymentGR.orderBy(paramObject.orderBy);
            } else {
                deploymentGR.orderByDesc('created_at');
            }

            //deploymentGR.orderByDesc('created_at');

            if (paramObject.lowerWindow != undefined && paramObject.upperWindow != undefined)
                deploymentGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);


            if (paramObject.isServicePortal == undefined) {
                paramObject.isServicePortal = false;
            }

            if (paramObject && paramObject.catalogSysId) {
                deploymentGR.addEncodedQuery('u_catalog_item=' + paramObject.catalogSysId);
            }
            if (paramObject && paramObject.sysId) {
                deploymentGR.addEncodedQuery('sys_id=' + paramObject.sysId);
            }
            if (!gs.hasRole('admin')) {
                deploymentGR.addEncodedQuery('servicenow_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORvra_ownerDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORshared_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe');
            }

            if (!paramObject.isServicePortal) {
                deploymentGR.addEncodedQuery('operational_status!=6^ORoperational_status=NULL');
            }

            deploymentGR.query();

            if (paramObject && paramObject.getCount) {
                //return deploymentGR.getRowCount();
                return this.fetchRowCount(this.appUtil.configuration.table.deployments, deploymentGR.getEncodedQuery());
            }
            while (deploymentGR.next()) {
                CASLogger.debug('Inside while loop of table.deployments gliderecord of CASDaoUtil.fetchPortalDeployments:');
                var resources = (this.fetchPortalRelatedMachines({
                    resourceCount: true,
                    sysId: deploymentGR.sys_id
                })) ? (this.fetchPortalRelatedMachines({
                    resourceCount: true,
                    sysId: deploymentGR.sys_id
                })) : 0;
                arr.push({
                    name: (deploymentGR.name) ? deploymentGR.name + '' : 'Not Available',
                    description: (deploymentGR.short_description.getDisplayValue()) ? deploymentGR.short_description.getDisplayValue() + '' : '-',
                    status: (deploymentGR.status.getDisplayValue()) ? deploymentGR.status.getDisplayValue() + '' : '-',
                    sysId: deploymentGR.sys_id + '',
                    link: '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.deploymentDetail + '&sysId=' + deploymentGR.sys_id,
                    shareLink: '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.sharedResourceForm + '&deploymentSysId=' + deploymentGR.sys_id + '&dep_name=' + deploymentGR.name + '',
                    shareable: this.checkOwnership(deploymentGR.sys_id, 'deployment'),
                    deploymentDetailsLink: '/' + gs.getProperty(this.appUtil.configuration.properties.ServicePortalPrefix) + '?id=' + this.appUtil.configuration.page.casSPDeploymentDetailsPage + '&sysId=' + deploymentGR.sys_id,
                    provisionedOn: (deploymentGR.created_at) ? deploymentGR.created_at + '' : '-',
                    expiresOn: (deploymentGR.expires_on) ? deploymentGR.expires_on + '' : '-',
                    project: (deploymentGR.u_project.project_name) ? deploymentGR.u_project.project_name + '' : '-',
                    owner: (deploymentGR.vra_owner) ? deploymentGR.vra_owner.getDisplayValue() + '' : '-',
                    resources: (resources > 1) ? (resources + ' Resources') : (resources + ' Resources'),
                    deploymentId: (deploymentGR.deployment_id) ? deploymentGR.deployment_id + '' : '-',
                    endpoint: (deploymentGR.u_project.organization) ? deploymentGR.u_project.organization.getDisplayValue() + '' : '-',
                    lastUpdated: (deploymentGR.last_updated_at) ? deploymentGR.last_updated_at + '' : '-',
                    actions: paramObject.isServicePortal ?
                        this.fetchServicePortalActions({
                            deploymentSysId: deploymentGR.sys_id + '',
                            type: 'deployment'
                        }) : this.fetchPortalActions({
                            sysId: deploymentGR.sys_id + '',
                            type: 'deployment',
                            endpoint: deploymentGR.u_project.organization + ''
                        }),
                    catalogItem: (deploymentGR.u_catalog_item.getDisplayValue()) ? deploymentGR.u_catalog_item.getDisplayValue() : 'No Associated Catalog Item',
                    catalogLink: (deploymentGR.u_catalog_item.getDisplayValue()) ? '/' + gs.getProperty(this.appUtil.configuration.properties.portalPrefix) + '?id=' + this.appUtil.configuration.page.catalogForm + '&showP=false&cat_id=' + deploymentGR.u_catalog_item + '' : '#'
                });
            }
            CASLogger.debug('Inside CASDaoUtil.fetchPortalDeployments:---arr: ' + arr);
            return arr;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchPortalDeployments : Exception Block: ' + ' arr: ' + arr + ' query: ' + query + ' resources: ' + resources);
            CASLogger.error("Exception Caught inside CASDaoUtil.fetchPortalDeployments " + e + ". Error found" + e.stack);
        }

    },


    //Shared Resources search
    //     fetchSharedResources: function(paramObject) {
    //         try {
    //             CASLogger.debug('Inside the CASDaoUtil.fetchSharedResources: Used fetching records for shared resource and creating JSON array: paramObject: ' + paramObject);
    //             var res_arr = [];
    //             var query = '';
    //             var sharedGR = new GlideRecord(this.appUtil.configuration.table.shared_resources);
    //             if (paramObject && paramObject.sysId) {
    //                 query += 'sys_id=' + paramObject.sysId;
    //             }
    //             if (paramObject && (paramObject.lowerWindow != undefined && paramObject.upperWindow != undefined))
    //                 sharedGR.chooseWindow(paramObject.lowerWindow, paramObject.upperWindow);

    //             if (paramObject && (paramObject.orderBy && paramObject.orderByAsc)) {
    //                 sharedGR.orderByDesc(paramObject.orderBy);
    //             } else if (paramObject && paramObject.orderBy) {
    //                 sharedGR.orderBy(paramObject.orderBy);
    //             }
    //             if (paramObject && paramObject.query) {
    //                 query += paramObject.query;
    //             }
    //             if (gs.hasRole('admin')) {
    //                 if (paramObject.showMyFilter == "true") {
    //                     query += '^created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //                 }
    //             } else {
    //                 query += '^created_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //             }

    //             sharedGR.addEncodedQuery(query);
    //             if (paramObject && (paramObject.orderBy && paramObject.orderByAsc)) {
    //                 sharedGR.orderByDesc(paramObject.orderBy);
    //             } else {
    //                 sharedGR.orderBy(paramObject.orderBy);
    //             }
    //             sharedGR.query();
    //             //gs.addErrorMessage('gurjot'+sharedGR.getEncodedQuery());
    //             while (sharedGR.next()) {
    //                 CASLogger.debug('Inside while loop of table.shared_resources gliderecord of CASDaoUtil.fetchSharedResources :');
    //                 res_arr.push({
    //                     "name": (sharedGR.name) ? sharedGR.name + '' : '',
    //                     "description": (sharedGR.description) ? sharedGR.description + '' : '',
    //                     "created_by": (sharedGR.created_by) ? sharedGR.created_by.getDisplayValue() + '' : '',

    //                     "deployment_arr": ((sharedGR.deployments) ? sharedGR.deployments.split(',') : []),
    //                     "machine_arr": ((sharedGR.machines) ? sharedGR.machines.split(',') : []),
    //                     "users_arr": ((sharedGR.users) ? sharedGR.users.split(',') : []),
    //                     "groups_arr": ((sharedGR.groups) ? sharedGR.groups.split(',') : []),



    //                     "deployment_name_arr": ((sharedGR.deployments) ? sharedGR.deployments.getDisplayValue().split(',') : []),
    //                     "machine_name_arr": ((sharedGR.machines) ? sharedGR.machines.getDisplayValue().split(',') : []),
    //                     "users_name_arr": ((sharedGR.users) ? sharedGR.users.getDisplayValue().split(',') : []),
    //                     "groups_name_arr": ((sharedGR.groups) ? sharedGR.groups.getDisplayValue().split(',') : []),


    //                     "resourceId": sharedGR.getUniqueValue() + ''
    //                 });
    //             }
    //             CASLogger.debug('Inside CASDaoUtil.fetchSharedResources :---res_arr: ' + res_arr);
    //             return res_arr;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.fetchSharedResources : Exception Block: ' + ' res_arr: ' + res_arr + ' query: ' + query);
    //             CASLogger.error("Exception Caught inside CASDaoUtil.fetchSharedResources " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     deleteSharedResource: function(id) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.deleteSharedResource: ID: ' + id);
    //             var resGR = new GlideRecord(this.appUtil.configuration.table.shared_resources);
    //             if (Array.isArray(id)) {
    //                 resGR.addQuery('sys_idIN' + id);
    //                 resGR.query();
    //                 while (resGR.next()) {
    //                     resGR.deleteRecord();
    //                 }
    //             } else {
    //                 CASLogger.debug('Inside Else Block CASDaoUtil.deleteSharedResource');
    //                 if (resGR.get(id)) {
    //                     resGR.query();
    //                     while (resGR.next()) {
    //                         resGR.deleteRecord();
    //                     }
    //                 }
    //             }
    //         } catch (e) {
    //             CASLogger.debug("Inside catch block of CASDaoUtil.deleteSharedResource: " + ' ID: ' + id);
    //             CASLogger.error("Exception caught inside CASDaoUtil.deleteSharedResource  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     updateSharedFilter: function(deployments_arr) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.updateSharedFilter: deployments_arr: ' + deployments_arr);
    //             var dep_gr = new GlideRecord(this.appUtil.configuration.table.deployments);
    //             dep_gr.addQuery('sys_idIN' + deployments_arr);
    //             dep_gr.query();
    //             var deployment_id = '';
    //             while (dep_gr.next()) {
    //                 deployment_id += dep_gr.deployment_id + ',';
    //             }
    //             CASLogger.debug("inside CASDaoUtil.updateSharedFilter :---deployment_id: " + deployment_id);
    //             return 'deploymentidIN' + deployment_id;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.updateSharedFilter : Exception Block: ' + ' deployment_id: ' + deployment_id + ' deployments_arr: ' + deployments_arr);
    //             CASLogger.error("Exception caught inside CASDaoUtil.updateSharedFilter  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     updateMachinesArray: function(filter, machines_arr) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesArray :');
    //             var machines_filter = filter;
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesArray: machines_filter: ' + machines_filter);
    //             //gs.addErrorMessage(filter);
    //             var machineGR = new GlideRecord(this.appUtil.configuration.table.machines);
    //             machineGR.addQuery(filter + '^sys_idIN' + machines_arr.toString());
    //             machineGR.query();
    //             var machineSysID = [];
    //             while (machineGR.next()) {
    //                 machineSysID.push(machineGR.getUniqueValue());
    //             }
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesArray: machineSysID: ' + machineSysID);
    //             return machineSysID;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.updateMachinesArray : Exception Block: ' + ' machines_filter: ' + machines_filter + ' machineSysID: ' + machineSysID);
    //             CASLogger.error("Exception caught inside CASDaoUtil.updateMachinesArray  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     updateMachinesNameArray: function(filter, machines_arr) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesNameArray');
    //             var machines_filter = filter;
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesNameArray: machines_filter: ' + machines_filter);
    //             var machineGR = new GlideRecord(this.appUtil.configuration.table.machines);
    //             machineGR.addQuery(filter + '^sys_idIN' + machines_arr.toString());
    //             machineGR.query();
    //             var machineSysID2 = [];
    //             while (machineGR.next()) {
    //                 machineSysID2.push(machineGR.name + '');
    //             }
    //             CASLogger.debug('Inside  CASDaoUtil.updateMachinesArray: machineSysID2: ' + machineSysID2);
    //             return machineSysID2;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.updateMachinesNameArray : Exception Block: ' + ' machines_filter: ' + machines_filter + ' machineSysID2: ' + machineSysID2);
    //             CASLogger.error("Exception caught inside CASDaoUtil.updateMachinesNameArray  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //     saveSharedResource: function(jsonObj) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.saveSharedResource: ---jsonObj: ' + jsonObj);
    //             var newShared = new GlideRecord(this.appUtil.configuration.table.shared_resources);
    //             if (jsonObj.res_id != '') {
    //                 if (newShared.get(jsonObj.res_id));
    //             }

    //             newShared.query();

    //             if (newShared.next()) {
    //                 CASLogger.debug('Inside if block of CASDaoUtil.saveSharedResource:');
    //                 newShared.name = (jsonObj.name) ? jsonObj.name + '' : '';
    //                 newShared.description = (jsonObj.description) ? jsonObj.description + '' : '';
    //                 newShared.deployments = (jsonObj.deployments) ? jsonObj.deployments + '' : '';
    //                 newShared.machines = (jsonObj.machines) ? jsonObj.machines + '' : '';
    //                 newShared.users = (jsonObj.users) ? jsonObj.users + '' : '';
    //                 newShared.groups = (jsonObj.groups) ? jsonObj.groups + '' : '';
    //                 newShared.update();
    //             } else {

    //                 //newShared.initialize();
    //                 newShared.name = (jsonObj.name) ? jsonObj.name + '' : '';
    //                 newShared.description = (jsonObj.description) ? jsonObj.description + '' : '';
    //                 newShared.deployments = (jsonObj.deployments) ? jsonObj.deployments + '' : '';
    //                 newShared.machines = (jsonObj.machines) ? jsonObj.machines + '' : '';
    //                 newShared.created_by = (jsonObj.user_id) ? jsonObj.user_id + '' : '';
    //                 newShared.users = (jsonObj.users) ? jsonObj.users + '' : '';
    //                 newShared.groups = (jsonObj.groups) ? jsonObj.groups + '' : '';
    //                 var data = newShared.insert();
    //                 CASLogger.debug('Inside Else Block CASDaoUtil.saveSharedResource:---data: ' + data);
    //             }
    //         } catch (e) {
    //             CASLogger.debug('Inside catch block of CASDaoUtil.saveSharedResource : ' + ' jsonObj: ' + jsonObj);
    //             CASLogger.error("Exception caught inside CASDaoUtil.saveSharedResource  " + e + ". Error found" + e.stack);
    //         }
    //     },

    //---------------------------------genericGRquery method---------------------------------------
    //  USAGE: This method is used for creating GlideRecord
    //					to be rendered on the html template
    /*  PARAMS: tablename --> contains the table name
																																										encoded_query --> contains the query used for fetching the gliderecord
																																										limit --> set the limit of the query fetched
 																																										*/
    genericGRquery: function(tablename, encoded_query, limit) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.genericGRquery: ' + ' encoded_query: ' + encoded_query);
            CASLogger.debug('Inside---- genericGRquery: tablename: ' + tablename + ' limit: ' + limit);
            var grTable = new GlideRecord(tablename);
            grTable.setLimit(limit);
            grTable.addEncodedQuery(encoded_query);
            grTable.query();
            return grTable;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.genericGRquery : Exception Block: ' + ' tablename: ' + tablename + ' encoded_query: ' + encoded_query);
            CASLogger.error('Exception caught inside the CASDaoUtil.genericGRquery' + e + ". Error found" + e.stack);

        }
    },

    catalogItemCheck: function(current) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.catalogItemCheck');
            var catalogItemId = current.request;
            var org = current.organization;
            CASLogger.debug('Inside the CASDaoUtil.catalogItemCheck: catalogItemId: ' + catalogItemId + ' org: ' + org);
            if (catalogItemId) {
                var grItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                grItem.addQuery('cas_uid', catalogItemId);
                grItem.addQuery('organisation_name', current.organization);
                grItem.query();
                if (grItem.hasNext()) {
                    return "update";
                }
            }
            return "create";

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.catalogItemCheck : Exception Block: ' + ' catalogItemId: ' + catalogItemId);
            CASLogger.error("Import::: Catalog: \n catalogItemId: " + catalogItemId + "\n Exception Caught inside CASDaoUtil.catalogItemCheck " + e + ".\n Error found" + e.stack);
            return "exceptionError";
        }
    },

    customCatalogCheck: function(catalogID, organization) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.customCatalogCheck: catalogID: ' + catalogID + ' organization: ' + organization);


            if (catalogID) {
                var itemGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                itemGR.addQuery('cas_uid', catalogID);
                itemGR.addQuery('organisation_name', organization);
                itemGR.query();
                if (itemGR.next()) {
                    var zr = new GlideRecord(this.appUtil.configuration.table.variable);
                    zr.addQuery('cat_item', itemGR.sys_id);
                    zr.query();
                    while (zr.next()) {

                        var item = new sn_sc.CatalogItemVariable(zr.sys_id);
                        CASLogger.debug('Inside while loop of table.variable gliderecord of CASDaoUtil.customCatalogCheck :---item: ' + item);
                        item.deleteRecord('true');
                    }


                    var catItem = new sn_sc.CatItem(itemGR.sys_id);
                    catItem.deleteRecord('true');

                    //itemGR.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.customCatalogCheck : Exception Block: ' + ' catalogID: ' + catalogID + ' organization: ' + organization);
            CASLogger.error("Exception Caught inside CASDaoUtil.customCatalogCheck. " + e + ". Error found" + e.stack);
        }
    },

    checkVariable: function(key, catalog, version, catalogVraId, actionId, day2Version, displayValue, contType) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.checkVariable');
            var variable = '';
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var versionCheck = '';
            if (displayValue == 'objectField') {
                if (!(contType == 'undefined' || contType == undefined)) {
                    versionCheck = 'custom_property__' + contType + '__' + key.replace(rgx, ' ').trim().replaceAll(' ', '_') + '';
                } else {
                    versionCheck = 'custom_property__' + key.replace(rgx, ' ').trim().replaceAll(' ', '_') + '';
                }
            } else {
                versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
            }
            CASLogger.debug('Inside the importCatalog.checkVariable: versionCheck: ' + versionCheck + ' version: ' + version);
            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogVraId === '') {
                    variable = versionCheck + "__" + day2Version;
                } else {
                    variable = versionCheck;
                }
            } else {
                CASLogger.debug('Inside Else Block CASDaoUtil.checkVariable');
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                variable = versionCheck + "__" + versionEncrypt;
            }

            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);
            varCheckGR.addQuery('name', variable);
            if (catalogVraId === '') {
                varCheckGR.addQuery('x_vmw_cloudservice_vra_day2_action', actionId);
            }
            varCheckGR.query();
            if (varCheckGR.next()) {
                return 'update';
            } else {
                return 'create';
            }

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkVariable : Exception Block: ' + ' variable: ' + variable + ' versionCheck: ' + versionCheck + ' key: ' + key + ' version: ' + version);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkVariable " + e + ". Error found" + e.stack);
        }
    },
	
	/*	
    Function Name :checkVariableSet
    Comments: This function is used to check for create or update datagrid.
	Created on: 07 july 2023
    */
	
	checkVariableSet: function(key, catalog, version){
		try{
			var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			var variableSet = '';
			
			if (version == '' || version == 'undefined' || version == 'undefined,') {
					variableSet = versionCheck + '_mrvs';
			} else {
					var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
					variableSet = versionCheck + '_mrvs' + "_" + versionEncrypt;
			}
			
			CASLogger.debug('Inside the CASDaoUtil.checkVariableSet: ' + ' key: ' + key + ' catalog: ' + catalog + ' version: ' + version + ' variableSet: ' + variableSet);
			
			var gr_varset = new GlideRecord(this.appUtil.configuration.table.variableSet);
			gr_varset.addQuery('sc_cat_item', catalog);
			gr_varset.addQuery('sys_scope', scope);
			gr_varset.addQuery('variable_set.internal_name', variableSet);
			gr_varset.query();
				if (gr_varset.next()) {
					return 'update';
				} else {
					return 'create';
				}
		}catch(e){
			CASLogger.debug('Inside Catch Block of CASDaoUtil.checkVariableSet : Exception Block: ' + ' key: ' + key + ' catalog: ' + catalog + ' variableSet: ' + variableSet + ' versionCheck: ' + versionCheck +  ' version: ' + version );
            CASLogger.error("Exception Caught inside CASDaoUtil.checkVariableSet " + e + ". Error found" + e.stack);
		}
	},
	
	/*	
    Function Name :checkVariableOfSetDelete
    Comments: This function is used to reconcile the columns datagrid.
	Created on: 07 july 2023
    */
	
	checkVariableOfSetDelete: function(key, catalog, version, schema){
		try{
			CASLogger.debug('Inside the CASDaoUtil.checkVariableOfSetDelete: ' + ' key: ' + key + ' catalog: ' + catalog);
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
			var versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			var dg_schema = schema[key]['type']['fields'];
			var current_vars = [];
			var set_id = '';
			var variableSet = '';
			
			if (version == '' || version == 'undefined' || version == 'undefined,') {
					variableSet = versionCheck + '_mrvs';
			} else {
					var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
					variableSet = versionCheck + '_mrvs' + "_" + versionEncrypt;
			}
		
			var io_set = new GlideRecord(this.appUtil.configuration.table.variableSet);
			io_set.addQuery('sys_scope', scope);
			io_set.addQuery('sc_cat_item', catalog);
			io_set.addQuery('variable_set.internal_name', variableSet);
			io_set.query();
			if(io_set.next()){
				set_id = io_set.variable_set.sys_id;
				CASLogger.debug('Inside if block of the CASDaoUtil.checkVariableOfSetDelete: ' + ' set_id: ' + set_id);
				var variables = new GlideRecord(this.appUtil.configuration.table.variable);
				variables.addQuery('sys_scope', scope);
				variables.addQuery('variable_set.sys_id', set_id);
				variables.query();
				while(variables.next()){
					current_vars.push(variables.getValue('name'));
				}
			}
		
			var updated_vars = [];
			for (var i = 0; i < dg_schema.length; i++) {
				if (version == '' || version == 'undefined' || version == 'undefined,') {
					updated_vars.push(variableSet + '__' + dg_schema[i].id.replace(rgx, ' ').trim().replaceAll(' ', '_'));

				} else {
					var versionEncrypt1 = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
					updated_vars.push(variableSet + '__' + dg_schema[i].id.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + versionEncrypt1);
				}
			}
			
			CASLogger.debug('Inside the CASDaoUtil.checkVariableOfSetDelete: ' + ' current_vars: ' + current_vars + ' updated_vars: ' + updated_vars);
			
			for (var index = 0; index < current_vars.length; index++) {
				var element = current_vars[index];
				if (updated_vars.indexOf(element) == -1) {
					current_vars[index] = updated_vars[updated_vars.indexOf(element)];
					var var_delete = new GlideRecord(this.appUtil.configuration.table.variable);
					var_delete.addQuery('variable_set.sys_id', set_id);
					var_delete.addQuery('sys_scope', scope);
					var_delete.addQuery('name', element);
					var_delete.query();
					if (var_delete.next()) {
						var item = new sn_sc.CatalogItemVariable(var_delete.sys_id);
						item.deleteRecord('true');
					}
				}
			}
		}catch(e){
			CASLogger.debug('Inside Catch Block of CASDaoUtil.checkVariableOfSetDelete : Exception Block: ' + ' variableSet: ' + variableSet + ' versionCheck: ' + versionCheck + ' key: ' + key + ' version: ' + version + 'set_id: ' + set_id);
            CASLogger.error("Exception Caught inside CASDaoUtil.checkVariableOfSetDelete " + e + ". Error found" + e.stack);
		}
		
	},
    /*	
    Function Name :deleteContainer
    Comments: This function is used to Delete the Container
    Updated On:02 feb 2022, 07 july 2022
    Updated By:Shivam Goyal, Prajakta
    Update Comments :Handle Deletion of custom Container.
	Prajakat Updates : Handled Deleting custom end container of respective start container if it's not present in AriaAutomation.
    */

    deleteContainer: function(pageSchema, catalog, version) {

        try {
            CASLogger.debug('Inside the importCatalog.deleteVariable:---catalog: ' + catalog + ' version: ' + version);
            var curentVariableArr = [];
            var length = pageSchema.length;
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);

            CASLogger.debug('Inside importCatalog.deleteVariable: length: ' + length);
            for (var i = 0; i < length; i++) {
                var pageName = pageSchema[i].id;
                var variable = '';
                var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
                var versionCheck = pageName.replace(rgx, ' ').trim().replaceAll(' ', '_');
                CASLogger.debug('Inside the importCatalog.deleteContainer: versionCheck: ' + versionCheck);

                if (version == '' || version == 'undefined' || version == 'undefined,') {
                    variable = versionCheck;
                } else {
                    CASLogger.debug('Inside Else Block importCatalog.deleteVariable');
                    var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                    variable = versionCheck + "__" + versionEncrypt;
                }

                curentVariableArr.push(variable);
            }




            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery("cat_item", catalog);
            varCheckGR.addQuery("type", '=', '19').addOrCondition('type', '=', '20');
			varCheckGR.addQuery('sys_scope', scope);
            varCheckGR.addQuery('order!=10100^order!=10001');


            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }

            varCheckGR.query();
            while (varCheckGR.next()) {
                CASLogger.debug('Inside while loop of table.variable gliderecord of CASDaoUtil.deleteContainer:');
                if ((curentVariableArr.indexOf(varCheckGR.name.toString()) == -1) && varCheckGR.type == '19') {
                    var varGr = new GlideRecord(this.appUtil.configuration.table.variable);
                    var Name = varCheckGR.name + '_end';
                    var query = 'name=' + Name;
					varGr.addQuery("cat_item", catalog);
                    varGr.addQuery('type', '=', '20');
					varGr.addQuery('sys_scope', scope);
                    varGr.addEncodedQuery(query);
                    varGr.query();
                    if (varGr.next()) {
                        var item1 = new sn_sc.CatalogItemVariable(varGr.sys_id);
                        item1.deleteRecord('true');
                    }
                    var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                    item.deleteRecord('true');
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteContainer : Exception Block: ' + ' curentVariableArr: ' + curentVariableArr + ' length: ' + length);
            CASLogger.error("Exception Caught inside ImportCatalog.deleteContainer " + e + ". Error found" + e.stack);
        }
    },
	
	deleteContainerStartforDay2 : function(catalog){
	try{
		CASLogger.debug('Inside the CASDaoUtil.deleteContainerStartforDay2:---catalog: ' + catalog);
		var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
		var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery("cat_item", catalog);
            varCheckGR.addQuery("type", '=', '19');
			varCheckGR.addQuery('name', '!=', 'General');
			varCheckGR.addQuery('sys_scope', scope);
            varCheckGR.query();
            while (varCheckGR.next()) {
                CASLogger.debug('Inside while loop of table.variable gliderecord of CASDaoUtil.deleteContainerStartforDay2:' + varCheckGR.name);
                    var varGr = new GlideRecord(this.appUtil.configuration.table.variable);
                    var Name = varCheckGR.name + '_end';
                    var query = 'name=' + Name;
					varGr.addQuery("cat_item", catalog);
                    varGr.addQuery('type', '=', '20');
					varGr.addQuery('sys_scope', scope);
                    varGr.addEncodedQuery(query);
                    varGr.query();
                    if (!varGr.next()) {
					CASLogger.debug('Inside CASDaoUtil.deleteContainerStartforDay2: Deleting the Day-2 conatiner start if container end not found ' + varCheckGR.name);
                        var item1 = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                        item1.deleteRecord('true');
                    }
            }
	}catch(e){
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteContainerStartforDay2 : Exception Block: ' + 'catalog:' + catalog);
            CASLogger.error("Exception Caught inside CASDaoUtil.deleteContainerStartforDay2 " + e + ". Error found" + e.stack);
        }
	},

    /*	
    Function Name :deleteVariable
    Comments: This function is used to Delete the Variable
    Updated On:02 feb 2022
    Updated By:Shivam Goyal
    Update Comments :Handle Deletion of custom Variable.
    */
    deleteVariable: function(propertiesBlue, catalog, version) {

        try {
            CASLogger.debug('Inside the importCatalog.deleteVariable: Catalog: catalog');
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var curentVariableArr = [];
            for (var keys in propertiesBlue) {

                var variable = '';
                var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
                var versionCheck = keys.replace(rgx, ' ').trim().replaceAll(' ', '_');
                CASLogger.debug('Inside the importCatalog.deleteVariable: versionCheck: ' + versionCheck);

                if (version == '' || version == 'undefined' || version == 'undefined,') {
                    variable = versionCheck;
                } else {
                    var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                    variable = versionCheck + "__" + versionEncrypt;
                }

                curentVariableArr.push(variable);

            }


            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);
            varCheckGR.addQuery('order<10001^ORorder>10100');
            varCheckGR.addQuery('type', '!=', 19);
            varCheckGR.addQuery('type', '!=', 20);
			varCheckGR.addQuery('sys_scope', scope);


            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }

            varCheckGR.query();
            while (varCheckGR.next()) {
                CASLogger.debug('Inside while loop of table.variable of CASDaoUtil.deleteVariable:');
                if (curentVariableArr.indexOf(varCheckGR.name.toString()) == -1) {
                    var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                    item.deleteRecord('true');
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteVariable : Exception Block: ' + ' curentVariableArr: ' + curentVariableArr + ' version: ' + version);
            CASLogger.error("Exception Caught inside ImportCatalog.deleteVariable " + e + ". Error found" + e.stack);
        }
    },
	
	/*	
    Function Name :deleteVariableSet
    Comments: This function is used to reconcile the datagrid
    Updated On:02 feb 2022
    Updated By:Shivam Goyal
    Update Comments :Handle Deletion of custom Variable.
    */
	
	deleteVariableSet: function(schema, catalog, version){
		try{
			CASLogger.debug('Inside the CASDaoUtil.deleteVariableSet: catalog: ' + catalog + ' version: ' + version);
            var curentVariableSetArr = [];
            var check_for_delete_varset = '';
            var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var default_varset =  gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
            for (var keys in schema) {
                var variableSet = keys + '';
                curentVariableSetArr.push(variableSet);
            }
            CASLogger.debug('Inside the CASDaoUtil.deleteVariableSet:currentvariables:' + curentVariableSetArr + 'variableset' + variableSet);
            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variableSet);
            varCheckGR.addQuery('sc_cat_item', catalog);
            varCheckGR.addQuery('sys_scope',scope);
            varCheckGR.addQuery('variable_set.sys_id', '!=', default_varset);
            varCheckGR.query();
            while( varCheckGR.next()){
                check_for_delete_varset = 'false';
                var check_set = new GlideRecord(this.appUtil.configuration.table.variable_Set);
                check_set.addQuery('sys_scope', scope);
                check_set.addQuery('sys_id', varCheckGR.variable_set.sys_id); 
                check_set.query();
                if(check_set.next()){
                    var check_var = new GlideRecord(this.appUtil.configuration.table.variable);
                    check_var.addQuery('sys_scope', scope);
                    check_var.addQuery('variable_set.sys_id', check_set.sys_id);
                    if (!(version == '' || version == 'undefined' || version == 'undefined,')) {
                        check_var.addQuery('x_vmw_cloudservice_versions', version);
                    }
                    check_var.query();
                    while(check_var.next()){
                        if (curentVariableSetArr.indexOf(check_set.name.toString()) == -1) {
                            check_for_delete_varset = 'true';
                            var item = new sn_sc.CatalogItemVariable(check_var.sys_id);
                            item.deleteRecord('true');
                        }
                    }
                }
                if(check_for_delete_varset == 'true'){
                    CASLogger.debug('Inside the CASDaoUtil.deleteVariableSet:deleted variable set id' + check_set.sys_id);
                    var varset = new sn_sc.CatalogItemVariableSet(check_set.sys_id); 
                    varset.deleteRecord(true);
                }
            }
		}catch(e){
			CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteVariableSet : Exception Block: ' + 'catalog: ' + catalog + ' version: ' + version);
            CASLogger.error("Exception Caught inside CASDaoUtil.deleteVariableSet " + e + ". Error found" + e.stack);
		}
		
	},

    deleteUnreleaseVersionVariable: function(catalog, version) {
        try {
            CASLogger.debug('Inside the importCatalog.deleteUnreleaseVersionVariable: catalog: ' + catalog + ' version: ' + version);

			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var varCheckGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varCheckGR.addQuery('cat_item', catalog);

            if (version != '' && version != 'undefined' && version != 'undefined,') {
                varCheckGR.addQuery('x_vmw_cloudservice_versions', version + ',');
            }
			varCheckGR.addQuery('sys_scope', scope);
            varCheckGR.query();
            while (varCheckGR.next()) {
                CASLogger.debug('Inside while loop of table.variable gliderecord of CASDaoUtil.deleteUnreleaseVersionVariable:');
                var item = new sn_sc.CatalogItemVariable(varCheckGR.sys_id);
                item.deleteRecord('true');
            }
			
			//delete variable set(MRVS)for unreleased versions.
			
			var default_varset =  gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
			var delete_varset = '';
			var io_set = new GlideRecord(this.appUtil.configuration.table.variableSet);
			io_set.addQuery('sc_cat_item', catalog);
			io_set.addQuery('variable_set.sys_id', '!=', default_varset);
			io_set.addQuery('sys_scope', scope);
			io_set.query();
			while(io_set.next()){
				delete_varset = 'false';
				var var_set = new GlideRecord(this.appUtil.configuration.table.variable_Set);
				var_set.addQuery('sys_id', io_set.variable_set.sys_id);
				var_set.query();
				if(var_set.next()){
					var gr_var = new GlideRecord(this.appUtil.configuration.table.variable);
					gr_var.addQuery('variable_set.sys_id', io_set.variable_set.sys_id);
					if (version != '' && version != 'undefined' && version != 'undefined,') {
						gr_var.addQuery('x_vmw_cloudservice_versions', version + '');
					}
					gr_var.query();
					while(gr_var.next()){
						delete_varset = 'true';
						var item1 = new sn_sc.CatalogItemVariable(gr_var.sys_id);
						item1.deleteRecord('true');
					}
				}
				if(delete_varset == 'true'){
					var varset = new sn_sc.CatalogItemVariableSet(var_set.sys_id); 
                    varset.deleteRecord(true);
				}
			}
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteUnreleaseVersionVariable : Exception Block: ' + ' version: ' + version);
            CASLogger.error("Exception Caught inside ImportCatalog.deleteUnreleaseVersionVariable " + e + ". Error found" + e.stack);
        }
    },


    /*
     Function Name: DeleteQuestionChoices
     Comments: This function is used to Delete the variable in question_choice table.
     Updated On: 11 NOV 2021
     Updated By: Shivam Goyal
     Update Comments: Check the variable present in schema or not if not than Delete.
     */
    DeleteQuestionChoices: function(choices, variable) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.DeleteQuestionChoices: variable: ' + variable);
            var actNameArray = [];
            for (var i = 0; i < choices.length; i++) {
                if (!(choices[i].value == 'undefined' || choices[i].value == undefined)) {
                    actNameArray.push(choices[i].value + "");
                } else {
                    actNameArray.push(choices[i] + "");
                }
            }
            var checkChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            checkChoice.addQuery('question', variable);
            checkChoice.query();

            while (checkChoice.next()) {
                if (actNameArray.indexOf(checkChoice.value + "") == -1) {
                    checkChoice.deleteRecord();
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.DeleteQuestionChoices : Exception Block: ' + ' variable: ' + variable);
            CASLogger.error("Exception Caught inside CASDaoUtil.DeleteQuestionChoices " + e + ". Error found" + e.stack);
        }
    },
    /*
          Function Name: insertCustomChoice
          Comments: This function is used to insert the variable in question_choice table.
          Updated On: 11 NOV 2021
          Updated By: Shivam Goyal
          Update Comments: Check the variable already present in table or not if not than insert.
          */


    insertCustomChoice: function(text, value, variable, order) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.insertCustomChoice');
            CASLogger.debug('Inside insertCustomChoice: text: ' + text + ' value: ' + value + ' variable: ' + variable + ' order: ' + order);
            var checkChoice = new GlideRecord(this.appUtil.configuration.table.choice);
            checkChoice.addQuery('text', text);
            checkChoice.addQuery('value', value);
            checkChoice.addQuery('question', variable);
            checkChoice.query();

            var count = false;
            while (checkChoice.next()) {
                if (checkChoice.text.toString() == text.toString() && checkChoice.value.toString() == value.toString()) {
                    count = true;
                    break;
                } else {
                    count = false;
                }
            }

            if (count == false) {
                checkChoice.initialize();
                checkChoice.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                checkChoice.text = text;
                checkChoice.value = value;
                checkChoice.question = variable;
                checkChoice.order = order;
                var data = checkChoice.insert();
                CASLogger.debug('Inside CASDaoUtil.insertCustomChoice :---data: ' + data);
            }

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertCustomChoice : Exception Block: ' + ' text: ' + text + ' value: ' + value + ' variable: ' + variable);
            CASLogger.error("Exception Caught inside CASDaoUtil.insertCustomChoice " + e + ". Error found" + e.stack);
        }

    },


    getFilter: function(org_ids) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getFilter');

            var arr = org_ids.split(",");
            CASLogger.debug('Inside CASDaoUtil.getFilter : arr: ' + arr);
            var projectsSysIds = '';


            for (var i = 0; i < arr.length; i++) {
                CASLogger.debug('Inside for loop of CASDaoUtil.getFilter: arr.length: ' + arr.length);
                var grProj = new GlideRecord(this.appUtil.configuration.table.project);
                grProj.addEncodedQuery('organization=' + arr[i]);
                grProj.query();

                while (grProj.next()) {
                    projectsSysIds = projectsSysIds + grProj.sys_id + ',';
                    CASLogger.debug('Inside while loop of CASDaoUtil.getFilter: projectsSysIds:  ' + projectsSysIds);

                }

            }
            CASLogger.debug('Inside CASDaoUtil.getFilter :---sys_idIN: ' + projectsSysIds.slice(0, -1));
            return ('sys_idIN' + projectsSysIds.slice(0, -1));
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getFilter : Exception Block: ' + ' arr: ' + arr + ' projectsSysIds: ' + projectsSysIds);
            CASLogger.error('Exception caught inside the CASDaoUtil.getFilter' + e + ". Error found" + e.stack);
        }


    },


    getFilters: function(projects_ids) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getFilters');

            var arr = projects_ids.split(",");
            CASLogger.debug('Inside CASDaoUtil.getFilters : arr: ' + arr);
            var itemsysId = '';

            var grCatg = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            grCatg.addEncodedQuery('sc_categoryIN' + projects_ids);
            grCatg.query();

            while (grCatg.next()) {
                itemsysId = itemsysId + grCatg.sc_cat_item + ',';
                CASLogger.debug('Inside while loop of CASDaoUtil.getFilters: : itemsysId ' + itemsysId);
            }
            CASLogger.debug('Inside CASDaoUtil.getFilters :---sys_idIN: ' + itemsysId.slice(0, -1));
            return ('sys_idIN' + itemsysId.slice(0, -1));
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getFilters : Exception Block: ' + ' arr: ' + arr + ' itemsysId: ' + itemsysId);
            CASLogger.error('Exception caught inside the CASDaoUtil.getFilters' + e + ". Error found" + e.stack);
        }

    },


    //     checkEntitlement: function(sys_id, type) {
    //         try {
    //             CASLogger.debug('Inside  CASDaoUtil.checkEntitlement----sys ID: ' + sys_id + ' Type: ' + type);
    //             var grEnt = new GlideRecord(this.appUtil.configuration.table.entitlement);
    //             grEnt.addQuery('active=true');
    //             var query = '';
    //             if (type == 'projects') {
    //                 CASLogger.debug('Inside if block of CASDaoUtil.checkEntitlement: Type: ' + type);
    //                 query = 'entitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //                 query += '^select_projects=' + sys_id;
    //             } else if (type == 'organizations') {
    //                 CASLogger.debug('Inside Else if block of CASDaoUtil.checkEntitlement: Type: ' + type);
    //                 query = 'entitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744^ORentitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe';
    //                 query += '^endpoint=' + sys_id;
    //             }

    //             grEnt.addEncodedQuery(query);
    //             grEnt.addEncodedQuery('active=true');
    //             grEnt.setLimit(1);
    //             grEnt.query();
    //             //gs.addErrorMessage(grEnt.next())
    //             //if(grEnt.getRowCount()!=0){
    //             if (grEnt.next()) {
    //                 return true;
    //             }
    //             return false;
    //         } catch (e) {
    //             CASLogger.debug('Inside Catch Block of CASDaoUtil.checkEntitlement : Exception Block: ' + ' sys_id: ' + sys_id + ' query: ' + query);
    //             CASLogger.error("Exception caught inside CASDaoUtil.checkEntitlement  " + e + ". Error found" + e.stack);
    //         }

    //     },


    checkEntitlementActions: function(action, type, endpoint) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.gitlementActions: Action: ' + action + ' Type: ' + type);
            var retVal = "false";
            var query;
            var grActionEnt = new GlideRecord(this.appUtil.configuration.table.actionEntitlement);
            grActionEnt.addEncodedQuery('actionLIKE' + action);
            var res_type = (type == 'machine') ? 'Resource' : 'Deployment';
            grActionEnt.addEncodedQuery('type=' + res_type);
            grActionEnt.query();
            //gs.addErrorMessage(grActionEnt.getEncodedQuery());
            if (grActionEnt.next()) {
                sysid = grActionEnt.sys_id;
                CASLogger.debug('Inside if block of table.actionEntitlement glidrecord of CASDaoUtil.checkEntitlementActions:---sysid: ' + sysid);
                var entitle = new GlideRecord(this.appUtil.configuration.table.entitlement);
                //console.log(type);
                if (type == 'machine') {
                    CASLogger.debug('Inside if CASDaoUtil.checkEntitlementActions: Type: ' + type);
                    query = 'active=true^endpoint=' + endpoint + '^entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744';
                    query += '^machine_actions=' + sysid;
                } else if (type == 'deployment') {
                    CASLogger.debug('Inside Else if CASDaoUtil.checkEntitlementActions: Type: ' + type);
                    query = 'active=true^endpoint=' + endpoint + '^entitled_usersDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORentitled_groupsDYNAMICd6435e965f510100a9ad2572f2b47744';
                    query += '^deployment_actions=' + sysid;
                }

                entitle.addQuery(query);
                entitle.setLimit(1);
                entitle.query();
                //gs.addErrorMessage("entdi"+entitle.getEncodedQuery());
                //if(entitle.getRowCount()>0){
                if (entitle.next()) {
                    retVal = "true";
                }
            }
            //console.log('action '+action+' '+retVal);
            CASLogger.debug('Inside CASDaoUtil.checkEntitlementActions :---retVal: ' + retVal);
            return retVal;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkEntitlementActions : Exception Block: ' + ' query: ' + query + ' action: ' + action);
            CASLogger.error('Exception caught inside the CASDaoUtil.checkEntitlementActions' + e + ". Error found" + e.stack);
        }

    },

    checkActionsCatalogEntitlement: function(catalogSysId) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.checkActionsCatalogEntitlement----catalogSysId: ' + catalogSysId);
            var retValAvailableFor = "false";
            var retValNotAvailableFor = "false";

            if (gs.hasRole('admin')) {
                retValAvailableFor = 'true';
                retValNotAvailableFor = 'true';
            } else {

                //checking the entitement for the Available For
                var mtomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_mtom);
                mtomGR.addEncodedQuery('user_criteria.active=true^sc_cat_item=' + catalogSysId);
                mtomGR.query();

                if (mtomGR.next()) {
                    mtomGR.addEncodedQuery('user_criteria.userDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORuser_criteria.groupDYNAMICd6435e965f510100a9ad2572f2b47744');

                    mtomGR.query();
                    if (mtomGR.next()) {
                        retValAvailableFor = "true";
                    } else {
                        retValAvailableFor = "false";
                    }

                } else {
                    retValAvailableFor = "true";
                }

                //checking the entitement for Not Available For
                var ntomGR = new GlideRecord(this.appUtil.configuration.table.user_criteria_no_mtom);
                ntomGR.addEncodedQuery('user_criteria.active=true^sc_cat_item=' + catalogSysId);
                ntomGR.query();

                if (ntomGR.next()) {
                    ntomGR.addEncodedQuery('user_criteria.userDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORuser_criteria.groupDYNAMICd6435e965f510100a9ad2572f2b47744');

                    ntomGR.query();
                    if (ntomGR.next()) {
                        retValNotAvailableFor = "false";
                    } else {
                        retValNotAvailableFor = "true";
                    }

                } else {
                    retValNotAvailableFor = "true";
                }


            }

            return (retValAvailableFor == 'true' && retValNotAvailableFor == 'true');

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.checkActionsCatalogEntitlement : Exception Block: ' + ' catalogSysId: ' + catalogSysId);
            CASLogger.error('Exception caught inside the CASDaoUtil.checkActionsCatalogEntitlement' + e + ". Error found" + e.stack);
        }

    },


    /*getMyGroups:function(sysid){
		try
		{
			var gr = new GlideRecord(this.appUtil.configuration.table.GroupMembers);
			gr.addQuery('user='+sysid);
			gr.query();
			var str='';
			while(gr.next()){
				if(str)
					str=str+',';
				str = str + gr.group;
			}
			return str;
		}
		catch(e)
		{
			CASLogger.debug('Exception caught inside the CASDaoUtil.getMyGroups'+e);
		}
	},

*/
    insertClientScript: function(catalog, script, catalogItemName, description, variable) {
        try {

            CASLogger.debug('Inside the CASDaoUtil.inserClientScript: Description: ' + description + ' catalog: ' + catalog + ' catalogItemName: ' + catalogItemName);
            // 			var grClientScript = new GlideRecord(this.appUtil.configuration.table.clientScript);
            // 			grClientScript.initialize();
            // 			grClientScript.sys_scope='0d6a0ec1db11bb407c83712ebf96194d';
            // 			if(description == 'getVersions' ){
            // 				grClientScript.name = "OnLoad to get Versions";
            // 				grClientScript.description = "getVersions__u_version";
            // 				grClientScript.type = "onLoad";
            // 			}
            // 			if(description == 'getProjects' ){
            // 				grClientScript.name = "OnLoad to get Projects";
            // 				grClientScript.description = "getProjects__u_project";
            // 				grClientScript.type = "onLoad";
            // 			}

            // 			grClientScript.applies_to = "item";
            // 			grClientScript.cat_item = catalog;
            // 			grClientScript.active = true;
            // 			grClientScript.applies_catalog = true;
            // 			grClientScript.ui_type = "0";
            // 			grClientScript.applies_req_item = false;
            // 			grClientScript.applies_sc_task = false;
            // 			grClientScript.script = script;
            // 			grClientScript.insert();


            // 			if(description=='getVersions')
            // 				{
            // 					
            // 				}
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);

            var catalogClientScript = new sn_sc.CatalogClientScript();
            if (description == 'getVersionsAndProjects') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to get Versions and Projects',
                    'description': 'x_vmw_clientScript_' + 'getVersions__u_version' + 'getProjects__u_project',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
            }

            catalogClientScript.appliesToRequestedItem(true);

            if (description == 'makeFieldsReadOnly') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set fields Readonly',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(true);

            }
			
            if (description == 'onLoadHideContainer') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to hide empty container',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(true);

            }

            if (description == 'versionOnChange') {
                var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                var versions;
                if (grCatItem.get(catalog)) {
                    versions = grCatItem.versions.slice(0, -1).split(",");
                    CASLogger.debug('Inside the CASDaoUtil.inserClientScript:---versions: ' + versions);
                }

                if (versions.length > 1 && versions != "undefined") {
                    var onChangeOfVar = '';
                    var variableSetSysID = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
                    var grCatVar = new GlideRecord(this.appUtil.configuration.table.variable);
                    grCatVar.addQuery('variable_set', variableSetSysID);
                    grCatVar.addQuery('name', 'u_version');
                    grCatVar.query();
                    if (grCatVar.next()) {
                        onChangeOfVar = 'IO:' + grCatVar.sys_id.toString();
                    }
                    catalogClientScript.setAttributes({
                        'name': 'onChange of Version',
                        'description': 'x_vmw_clientScript_',
                        'applies_to': 'item',
                        'ui_type': '10',
                        'type': 'onChange',
                        'cat_variable': onChangeOfVar,
                        'sys_scope': app_scope,
                        'cat_item': catalog,
                        'active': 'true',
                        'order': 0 //this.clientscriptorder
                    });
                    this.clientscriptorder++;
                    catalogClientScript.appliesToRequestedItem(true);
                }
            }


            catalogClientScript.appliesToRequestedItem(true);
            catalogClientScript.appliesToCatalogItem(true);

            //             if (description == 'getProjects') {
            //                 catalogClientScript.setAttributes({
            //                     'name': 'OnLoad to get Projects',
            //                     'description': 'x_vmw_clientScript_' + 'getProjects__u_project',
            //                     'applies_to': 'item',
            //                     'ui_type': '10',
            //                     'type': 'onLoad',
            //                     'sys_scope': app_scope,
            //                     'cat_item': catalog,
            //                     'active': 'true',
            //                     'order': this.clientscriptorder
            //                 });

            //                 this.clientscriptorder++;
            //                 catalogClientScript.appliesToRequestedItem(false);
            //             }

            if (description == 'OnLoad to set Macro fields hidden') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set Macro fields hidden',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToCatalogItem(false);

            }
            if (description == 'OnLoad to set datagrid hidden') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad to set datagrid hidden',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(false);
            }
			
			if(description == 'set_datagrid'){
				catalogClientScript.setAttributes({
                    'name': variable + '__' + 'constant',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
				catalogClientScript.appliesToRequestedItem(false);
			}

            if (description == 'onLoadOAuthValidation') {
                catalogClientScript.setAttributes({
                    'name': 'OnLoad for OAuth Validation',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onLoad',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToRequestedItem(false);
            }

            if (description == 'tabVisibilityScript') {

                catalogClientScript.setAttributes({
                    'name': 'Make Fields Visible and Readonly',
                    'description': 'x_vmw_clientScript_',
                    'applies_to': 'item',
                    'ui_type': '10',
                    'type': 'onChange',
                    'cat_variable': variable,
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder
                });
                this.clientscriptorder++;
                catalogClientScript.appliesToCatalogItem(true);
                catalogClientScript.appliesToRequestedItem(true);
            }

            catalogClientScript.addScript(script);
            //catalogClientScript.appliesToRequestedItem(false);
            //catalogClientScript.appliesToCatalogTask(false);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertClientScript : Exception Block: ' + ' catalogItemName: ' + catalogItemName);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertClientScript ' + e + ". Error found" + e.stack);
        }
    },

    insertValidationScript: function(minValue, maxValue, pattern, datatype, catalog, versions, field, patternMessage, order ,var_set) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.insertValidationScript: versions: ' + versions + ' field: ' + field);
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var field_sys_id = '';
            var name = '';
			var variableGR = new GlideRecord(this.appUtil.configuration.table.variable);
            var query = '';
            var Version = '';
			var minmsg = '';
			var maxmsg = '';
			var patternmsg = '';
            if (versions) {
                Version = versions;
                name = field + '__' + versions;
                name = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            } else {
                CASLogger.debug('Inside Else Block CASDaoUtil.insertValidationScript');
                Version = 'undefined';
                name = field;
                name = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            }
			
			if(!(var_set == 'undefined' || var_set == undefined)){
				query = 'variable_set=' + var_set + '^name=' + name;
			}else{
				query = 'cat_item=' + catalog + '^name=' + name;
			}
			variableGR.addEncodedQuery(query);
			variableGR.query();
			if(variableGR.next()) {
					field_sys_id = variableGR.sys_id;
					if (variableGR.x_vmw_cloudservice_datatype == 'Duallist' || variableGR.x_vmw_cloudservice_datatype == 'Multiselect')
						return order++;
			}
            CASLogger.debug('Inside the CASDaoUtil.insertValidationScript: minValue: ' + minValue + ' maxValue: ' + maxValue + ' datatype: ' + datatype);
            var minvalue1, minvalue2, maxvalue1, maxvalue2, patterncheck = '';
          //  var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}}";
            var insertscrpt = '';
			if (var_set == undefined || var_set == 'undefined') {
				insertscrpt = insertscrpt + "if(g_form.getValue('u_version') != '" + Version + "') {return;}";
				
			}
            if ((minValue && datatype == 'string') || (minValue && datatype == 'secureString')) {
				
                minvalue1 = "min = (newValue.length) < "+ minValue +" ? true : false;";
				minmsg = '"\'  + newValue +  \'" has invalid min length, field should be minimum '+ minValue + ' characters long.' ;
				insertscrpt = insertscrpt + minvalue1;
            }
            if (minValue && datatype != 'string' && datatype != 'secureString') {
                minvalue2 = "min = (newValue) < "+ minValue +" ? true : false;";
				minmsg = '"\'  + newValue +  \'" is invalid value. Minimum value can be ' + minValue + '.';
				insertscrpt = insertscrpt + minvalue2;
            }
            if ((maxValue && datatype == 'string') || (maxValue && datatype == 'secureString')) {
                maxvalue1 = "max = (newValue.length) > "+ maxValue +" ? true : false;";
				maxmsg = '"\'  + newValue +  \'" has invalid max length, field should be maximum '+ maxValue + ' characters long.' ;
				insertscrpt = insertscrpt + maxvalue1;
            }
            if (maxValue && datatype != 'string' && datatype != 'secureString') {
                maxvalue2 = "max = (newValue) > "+ maxValue +" ? true : false;";
				maxmsg = '"\'  + newValue +  \'" is invalid value. Maximum value can be ' + maxValue + '.';
                insertscrpt = insertscrpt + maxvalue2;
            }
            //display message
            if (pattern) {
                patterncheck = "var rgx=/" + pattern + "/; pattern = (!rgx.test(newValue)) ? true : false;";
				patternmsg = 'Invalid format. '+ patternMessage + ' Value provided : "\'  + newValue +  \'"' ;
                insertscrpt = insertscrpt + patterncheck;
            }
			
			insertscrpt = insertscrpt + " if (min || max || pattern) { g_form.clearValue('"+ name +"'); if (pattern) g_form.showFieldMsg('"+ name +"', ' "+ patternmsg + "', 'error'); if (min) g_form.showFieldMsg('"+ name +"', '"+ minmsg + " ', 'error'); if (max) g_form.showFieldMsg('"+ name +"', '"+ maxmsg +" ', 'error'); return false; }";
			

           var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;} var min = false; var max = false; var pattern = false;" + insertscrpt + "}";
			
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var catalogClientScript = new sn_sc.CatalogClientScript();
			if(!(var_set == undefined || var_set == 'undefined')){
				catalogClientScript.setAttributes({
                'name': name,
                'description': 'x_vmw_clientScript_' + 'onChange ' + field + '__' + versions + ' validation',
                'applies_to': 'set',
                'ui_type': '10',
                'type': 'onChange',
                'sys_scope': app_scope,
                'variable_set': var_set,
                'active': 'true',
                'cat_variable': 'IO:' + field_sys_id,
                'order': this.clientscriptorder
            });
			}else{
				catalogClientScript.setAttributes({
                'name': name,
                'description': 'x_vmw_clientScript_' + 'onChange ' + field + '__' + versions + ' validation',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + field_sys_id,
                'order': this.clientscriptorder
            });
			}
            
            this.clientscriptorder++;
            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();
            return order++;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertValidationScript : Exception Block: ' + ' field_sys_id: ' + field_sys_id + ' name: ' + name + ' query: ' + query);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertValidationScript ' + e + ". Error found" + e.stack);
        }

    },

    /*
    Function Name : insertonloadscript
    Comments: Function for creating the onLoad dynamic dropdown client scripts in VMware Aria Automation Catalog Items for different datatype fields.
    Updated On: 29 July 2021
    Updated By: Prateek
    Update Comments : Update the onLoad client script for adding the Custom VMware Aria Automation Catalog Item Loader for Native UI.
    */
    insertonloadscript: function(datasource, uri, parameters, dependency, field, catalog, version, onloadType) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.insertonloadscript: Version: ' + version);
            if (!version) {
                version = 'undefined';
            }

            var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var timestamp=new Date().getTime();sessionStorage.setItem('" + field + "',timestamp);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr=dependency.split(',');} var uri='" + uri + "';var datasource='" + datasource + "';if(dependencyArr){for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.addParam('sysparm_time',timestamp);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response.split('responseSplitter@*')[1];if(sessionStorage.getItem('" + field + "')!=response.split('responseSplitter@*')[0])return;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id||answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.setValue('" + field + "',answer.data,answer.data);}} g_form.setReadOnly('u_version',false);}}";

            if (onloadType == 'onload_defaultValue') {
                script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr=dependency.split(',');} var uri='" + uri + "';var datasource='" + datasource + "';if(dependencyArr){for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});}} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id||answer.data[i].label);g_form.setValue('" + field + "',answer.data[i].value,answer.data[i].id||answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);g_form.setValue('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.addOption('" + field + "',answer.data,answer.data);g_form.setValue('" + field + "',answer.data,answer.data);}} g_form.setReadOnly('u_version',false);}}";
            }
            var fieldSysID = '';
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            var query = '';
            query = 'name=u_version';

            varGR.addEncodedQuery(query);
            varGR.query();
            if (varGR.next()) {
                fieldSysID = varGR.sys_id;
                CASLogger.debug("inside if block of CASDaoUtil.insertonloadscript:---fieldSysID: " + fieldSysID);
            }
            var query1 = 'cat_item=' + catalog + '^name=' + field + '^x_vmw_cloudservice_datatype!=Decimal^ORx_vmw_cloudservice_datatype=NULL';
            var varGR1 = new GlideRecord(this.appUtil.configuration.table.variable);
            varGR1.addEncodedQuery(query1);
            varGR1.query();
            if (varGR1.next()) {

                var datatype = varGR1.x_vmw_cloudservice_cas_name;

                if (datatype.startsWith('INT__')) {
                    script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr=dependency.split(',');} var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id||answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.setValue('" + field + "',answer.data,answer.data);}} g_form.setReadOnly('u_version',false);}}";
                }
            }

            var dynamic_query = 'cat_item=' + catalog + '^name=' + field + '^x_vmw_cloudservice_datatype=DataGrid^ORx_vmw_cloudservice_datatype=Duallist^ORx_vmw_cloudservice_datatype=Multiselect';
            var var_GR = new GlideRecord(this.appUtil.configuration.table.variable);
            var_GR.addEncodedQuery(dynamic_query);
            var_GR.query();
            if (var_GR.next()) {
                var CASName = var_GR.x_vmw_cloudservice_cas_name;
                var casDatatype = var_GR.x_vmw_cloudservice_datatype;
                if (CASName.startsWith('STR__datagrid')) {
                    script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr=dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');g_form.setValue('" + field + "',JSON.stringify(answer.data),JSON.stringify(answer.data));}else{if(answer.data){g_form.setValue('" + field + "',answer.data,answer.data);}} g_form.setReadOnly('u_version',false);}}";

                }
                if ((casDatatype == 'Duallist' || casDatatype == 'Multiselect') && onloadType == 'onload_defaultValue') {
                    script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var field_id='" + field + "';var formElement=g_form.getControl('macro_'+field_id);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr=dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);var control;if(formElement.querySelector)formElement.querySelector('#default_values'+field_id).value=JSON.stringify(answer.data);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).default_value_onload=answer.data;} g_form.setReadOnly('u_version',false);}}";

                }
                if ((casDatatype == 'Duallist' || casDatatype == 'Multiselect') && onloadType == 'onload_valueList') {
                    script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var field_id='" + field + "';var formElement=g_form.getControl('macro_'+field_id);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr=dependency.split(',');var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}}} if(formElement.querySelector)formElement.querySelector('#all_options'+field_id).value=JSON.stringify(answer.data);}else{g_form.setValue('" + field + "',answer.data,answer.data);if(formElement.querySelector)formElement.querySelector('#all_options'+field_id).value=JSON.stringify(answer.data);if(g_form.getField) if(g_form.getField(field_id).choices){g_form.getField(field_id).all_options_onload=answer.data;}} g_form.setReadOnly('u_version',false);}}";

                }

            }

            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': field + " dependent",
                'description': 'x_vmw_clientScript_' + 'onLoad ' + field + ' dependency',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
                'order': this.clientscriptorder,
                'cat_variable': 'IO:' + fieldSysID

            });
            this.clientscriptorder++;
            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertonloadscript : Exception Block: ' + ' fieldSysID: ' + fieldSysID + ' query: ' + query + ' dynamic_query: ' + dynamic_query + ' catalogClientScriptId: ' + catalogClientScriptId);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertonloadscript ' + e + ". Error found" + e.stack);
        }
    },



    /*
    Function Name : insertonchangescript
    Comments: A function for creating the onchange dynamic dropdown client scripts for VMware Aria Automation Catalog Items.
    Updated On: 27 July 2021
    Updated By: Prateek
    Update Comments : Update the onChange client script for adding the Custom VMware Aria Automation Catalog Item Loader for Native UI.
    */
    insertonchangescript: function(datasource, uri, parameters, dependency, field, catalog, version) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.insertonchangescript: versions: ' + versions + ' dependency: ' + dependency);
            if (!version) {
                version = 'undefined';
            }
            var dependency1 = dependency;
            var fieldSysID = '';
            var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;} if(g_form.getValue('u_version')!='" + version + "'){return;} var timestamp=new Date().getTime();sessionStorage.setItem('" + field + "',timestamp);g_form.setReadOnly('u_version',true);g_form.setReadOnly('" + field + "',true);var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr=dependency.split(',');} var uri='" + uri + "';var datasource='" + datasource + "';for(var i=0;i<dependencyArr.length;i=i+2){var value=g_form.getValue(dependencyArr[i+1]);parameters.push({'name':dependencyArr[i],'value':value});} var projectId=g_form.getValue('u_project');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','dynamicDropDownValues');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_url',uri);gAjax.addParam('sysparm_datasource',datasource);gAjax.addParam('sysparm_parameter',JSON.stringify(parameters));gAjax.addParam('sysparm_projectId',projectId);gAjax.addParam('sysparm_time',timestamp);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);var answer=response.split('responseSplitter@*')[1];if(sessionStorage.getItem('" + field + "')!=response.split('responseSplitter@*')[0])return;g_form.setReadOnly('" + field + "',false);answer=JSON.parse(answer);if(typeof answer.data=='object'){g_form.clearOptions('" + field + "');g_form.addOption('" + field + "','','--None--');for(i=0;i<answer.data.length;i++){if(typeof answer.data[i]=='object'){g_form.addOption('" + field + "',answer.data[i].value,answer.data[i].id||answer.data[i].label);}else{g_form.addOption('" + field + "',answer.data[i],answer.data[i]);}}}else{if(answer.data){g_form.addOption('" + field + "',answer.data,answer.data);g_form.setValue('" + field + "',answer.data,answer.data);}} g_form.setReadOnly('u_version',false);}}";
            for (var onChange = 0; onChange < dependency1.length; onChange = onChange + 2) {
                var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                var query = '';

                if (dependency1[onChange + 1] == 'u_project') {
                    query = 'name=u_project';

                } else {
                    CASLogger.debug('Inside Else Block CASDaoUtil.insertonchangescript: versions');
                    query = 'cat_item=' + catalog + '^name=' + dependency1[onChange + 1];
                }
                varGR.addEncodedQuery(query);
                varGR.query();
                if (varGR.next()) {
                    fieldSysID = varGR.sys_id;
                }
                var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.setAttributes({
                    'name': field + " dependent",
                    'description': 'x_vmw_clientScript_' + 'onChange ' + field + ' dependency',
                    'applies_to': 'all',
                    'ui_type': '10',
                    'type': 'onChange',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'cat_variable': 'IO:' + fieldSysID,
                    'order': this.clientscriptorder

                });
                this.clientscriptorder++;
                catalogClientScript.addScript(script);
                catalogClientScript.appliesToCatalogItem(true);
                var catalogClientScriptId = catalogClientScript.create();

            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertonchangescript : Exception Block: ' + ' fieldSysID: ' + fieldSysID + ' dependency1: ' + dependency1 + ' script: ' + script + ' app_scope: ' + app_scope + ' catalogClientScriptId: ' + catalogClientScriptId);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertonchangescript ' + e + ". Error found" + e.stack);
        }
    },


    /*
    Function Name : insertSingleClientScript
    Comments: A function for creating single onchange dynamic dropdown client scripts for VMware Aria Automation Catalog Items.
    Created On: 13 Sep 2021
	Updated On: 10 Jan 2022,07 july 2022
    Created By: Vaibhav
	Updated By: Shivam Goyal
	Updated Comments: Handled external source for canvas,request info  and custom properties for bind field.
    */
    insertSingleClientScript: function(obj, scriptType) {
        try {
            var schema = JSON.parse(obj);
            for (var field in schema) {
                CASLogger.debug('Inside For loop: CASDaoUtil.insertSingleClientScript: Field: ' + field);
                if (field != 'type' && schema[field] != '') {
                    var fieldSysID = '';
                    var Version = '';
                    var script = '';
                    if (schema[field][0].versions == "") {
                        Version = "'undefined'";
                    } else {
                        CASLogger.debug('Inside Else Block CASDaoUtil.insertSingleClientScript');
                        Version = JSON.stringify(schema[field][0].versions);
                    }

                    if (scriptType == 'bind') {
                        script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading){if (isLoading){ return;}if (g_form.getValue('u_version') != " + Version + ") {return;}var timestamp = new Date().getTime();var fields = " + JSON.stringify(schema[field]) + "; var obj = [];var fieldsdata = {};var parsed = fields; for (var field = 0; field < parsed.length; field++) {var value = ''; var parameters = parsed[field].parameters;var dependency = (parsed[field].dependency);var displayType = parsed[field].displayType;var valueList=parsed[field].valueList;var fieldDep= parsed[field].varField;if (!parameters) {parameters = []; } else {} var dependencyArr = ''; if (dependency.toString()) { dependencyArr = dependency.toString().split(','); } if (dependencyArr) {for (var i = 0; i < dependencyArr.length; i = i + 2) {var value = g_form.getValue(dependencyArr[i + 1]);parameters.push({ 'name': parsed[field].varField,'value': value,});}  }for (var onChange1 = 0; onChange1 < parameters.length; onChange1 = onChange1 + 2) {value = parameters[onChange1].value;if( displayType=='dropDown'){ if(valueList=='true'){if(!(sessionStorage.getItem(parsed[field].varField)==null ||sessionStorage.getItem(parsed[field].varField)== 'null' )){var a=sessionStorage.getItem(parsed[field].varField);sessionStorage.setItem('Bind_' + parsed[field].varField,value);if (a.lastIndexOf(value) != -1 ) {g_form.setValue(parsed[field].varField, value);} else { g_form.clearValue(parsed[field].varField);}}else{sessionStorage.setItem('Bind_' + parsed[field].varField,value);}}else{var catItemSysid = g_form.getUniqueValue();var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'dropDownValueList'); gAjax.addParam('sysparm_sys_id', catItemSysid);gAjax.addParam('sysparm_field', fieldDep);gAjax.addParam('sysparm_value', value); gAjax.getXMLAnswer(callBack);function callBack(response) {var parsedResponse = JSON.parse(response);var newField = parsedResponse.field;var list= parsedResponse.list;var val=parsedResponse.value; if (list.length == 0 && val!='' ) {g_form.clearOptions(newField);g_form.addOption(newField, '', '--None--');g_form.addOption(newField, val, val);g_form.setValue(newField, val);}else{if (list.lastIndexOf(val) != -1) {g_form.setValue(newField, val);} else {g_form.clearValue(newField);}}}} }else {g_form.setValue(fieldDep, value);}}}}";
                    } else if (scriptType == 'computed') {
                        script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onChange(control, oldValue, newValue, isLoading) { if (isLoading) { return; } if (g_form.getValue("u_version") != ' + Version + ') { return; } var timestamp = new Date().getTime(); var fields = ' + JSON.stringify(schema[field]) + '; var parsed = fields; for (var field = 0; field < parsed.length; field++) { var parameters = parsed[field].parameters; var dependency = parsed[field].dependency; var displayType = parsed[field].displayType; var valueList = parsed[field].valueList; var fieldDep = parsed[field].varField; var operator = parsed[field].operator; var datatype = parsed[field].fieldType.dataType; if (operator == "add" || operator == "subtract") var value = 0; else if (operator == "multiply") var value = 1; else var value = ""; for (var i = 0; i < dependency.length; i++) { if (dependency[i].indexOf("`") != 0) { var fieldVal = g_form.getValue(dependency[i]); } else { var fieldVal = dependency[i].replaceAll("`", ""); } if (fieldVal) { switch (operator) { case "add": if (datatype == "integer" ? value += parseInt(fieldVal) : value += parseFloat(fieldVal)); break; case "subtract": if (datatype == "integer" ? value -= parseInt(fieldVal) : value -= parseFloat(fieldVal)); break; case "multiply": if (datatype == "integer" ? value *= parseInt(fieldVal) : value *= parseFloat(fieldVal)); break; case "concatenate": value += fieldVal; break; } } } parameters.push({ "name": parsed[field].varField, "value": value, }); for (var onChange1 = 0; onChange1 < parameters.length; onChange1 = onChange1 + 2) { value = parameters[onChange1].value; if (displayType == "dropDown") { if (valueList == "true") { if (!(sessionStorage.getItem(parsed[field].varField) == null || sessionStorage.getItem(parsed[field].varField) == "null")) { var a = sessionStorage.getItem(parsed[field].varField).split(","); sessionStorage.setItem("Computed_" + parsed[field].varField, value); if (a.lastIndexOf(value + "") != -1) { g_form.setValue(parsed[field].varField, value); } else { g_form.clearValue(parsed[field].varField); } } else { sessionStorage.setItem("Computed_" + parsed[field].varField, value); } } else { var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge"); gAjax.addParam("sysparm_name", "dropDownValueList"); gAjax.addParam("sysparm_sys_id", catItemSysid); gAjax.addParam("sysparm_field", fieldDep); gAjax.addParam("sysparm_value", value); gAjax.getXMLAnswer(callBack); function callBack(response) { var parsedResponse = JSON.parse(response); var newField = parsedResponse.field; var list = parsedResponse.list; var val = parsedResponse.value; if (list.length == 0 && val != "") { g_form.clearOptions(newField); g_form.addOption(newField, "", "--None--"); g_form.addOption(newField, val, val); g_form.setValue(newField, val); } else { if (list.lastIndexOf(val) != -1) { g_form.setValue(newField, val); } else { g_form.clearValue(newField); } } } } } else { g_form.setValue(fieldDep, value); } } } }';
                    } else if( scriptType == 'constant' ){
						script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n" + "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } if (g_form.getValue('u_version') != "+ Version +") { return; } var fields =" + JSON.stringify(schema[field]) + "; var parsed = fields; for (var field = 0; field < parsed.length; field++) { var displayType = parsed[field].displayType; var valueList = parsed[field].valueList; var fieldDep = parsed[field].varField; var value = parsed[field].defaultValue; var readonly = parsed[field].readonly; if (displayType == 'dropDown') { if (valueList == 'true') { if (!(sessionStorage.getItem(parsed[field].varField) == null || sessionStorage.getItem(parsed[field].varField) == 'null')) { var a = sessionStorage.getItem(parsed[field].varField).split(','); sessionStorage.setItem('Constant_' + parsed[field].varField, value); if (a.lastIndexOf(value + '') != -1) { g_form.setValue(parsed[field].varField, value);g_form.setReadOnly(parsed[field].varField, readonly); } else { g_form.clearValue(parsed[field].varField); } } else { sessionStorage.setItem('Constant_' + parsed[field].varField, value); } } else { var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'dropDownValueList'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_field', fieldDep); gAjax.addParam('sysparm_value', value); gAjax.addParam('sysparm_read', readonly); gAjax.getXMLAnswer(callBack); function callBack(response) { var parsedResponse = JSON.parse(response); var newField = parsedResponse.field; var list = parsedResponse.list; var val = parsedResponse.value; var read = parsedResponse.readVal; if (list.length == 0 && val != '') { g_form.clearOptions(newField); g_form.addOption(newField, '', '--None--'); g_form.addOption(newField, val, val); g_form.setValue(newField, val); g_form.setReadOnly(newField, read);} else { if (list.lastIndexOf(val) != -1) { g_form.setValue(newField, val); g_form.setReadOnly(newField, read);} else { g_form.clearValue(newField); } } } } } else { g_form.setValue(fieldDep, value); g_form.setReadOnly(fieldDep, readonly); } } }";
					}else {
                        script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } if (g_form.getValue('u_version') != " + Version + ") { return; } var timestamp = new Date().getTime(); var fields = " + JSON.stringify(schema[field]) + "; var def = 'default'; var obj = []; var fieldsdata = {}; var requestID = 10; var parsed = fields; for (var field in parsed) { var parameters = parsed[field].parameters; var dependency = (parsed[field].dependency); var uri = parsed[field].uri; var datasource = parsed[field].type; var projectId = g_form.getValue('u_project'); var catItemSysid = g_form.getUniqueValue(); if (!parameters) { parameters = []; } else {} var dependencyArr = ''; if (dependency) { dependencyArr = dependency.toString().split(','); } if (dependencyArr) { for (var i = 0; i < dependencyArr.length; i = i + 2) { var value = g_form.getValue(dependencyArr[i + 1]); parameters.push({ 'name': dependencyArr[i], 'value': value, 'useResultFromRequestId': -1 }); } var body = { 'uri': uri, 'datasource': datasource, 'parameters': (parameters), 'requestId': requestID }; fieldsdata[requestID] = []; fieldsdata[requestID].push({ 'name': parsed[field].varField, 'displayType': parsed[field].displayType, 'valueList': parsed[field].valueList, 'bind': parsed[field].bind, 'computed': parsed[field].computed, 'constant': parsed[field].constant, 'result': parsed[field].result, 'readonly': parsed[field].readonly }); obj.push(body); requestID++; } } if (sessionStorage.getItem('catalog_script_counter') == 0) { var ga = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); ga.addParam('sysparm_name', 'getProperty'); ga.getXML(result); function result(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ans = answer.toLowerCase(); if (ans == 'true' || ans == true) { try { var loadingDialog3 = new GlideDialogWindow('x_vmw_cloudservice_Loader_Catalog', true, '500', '200'); loadingDialog3.setTitle(''); loadingDialog3.render(); var interval = setInterval(function() { if (sessionStorage.getItem('catalog_script_counter') == 0) { loadingDialog3.destroy(); clearInterval(interval); } }, 500); } catch (e) {} } } } var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'multipleRequestDropdownValues'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_obj', JSON.stringify(obj)); gAjax.addParam('sysparm_projectId', projectId); gAjax.addParam('sysparm_fieldsdata', JSON.stringify(fieldsdata)); gAjax.getXMLAnswer(callBack); sessionStorage.setItem('catalog_script_counter', parseInt(sessionStorage.getItem('catalog_script_counter')) + 1); function callBack(response) { sessionStorage.setItem('catalog_script_counter', sessionStorage.getItem('catalog_script_counter') - 1); if (response != false) { var parsedResponse = JSON.parse(response); for (var answer = 0; answer < parsedResponse.length; answer++) { var requestID = parsedResponse[answer].requestId; var field = fieldsdata[requestID][0].name; var displayType = fieldsdata[requestID][0].displayType; var valueList = fieldsdata[requestID][0].valueList; var bind = fieldsdata[requestID][0].bind; var computed = fieldsdata[requestID][0].computed; var constant = fieldsdata[requestID][0].constant; var resultObj = fieldsdata[requestID][0].result; var readonly = fieldsdata[requestID][0].readonly; if (def != '" + scriptType + "') { sessionStorage.setItem(field, parsedResponse[answer].data); } if (displayType == 'datagrid') { var version = " + Version + "; var rgx = new RegExp('[^a-zA-Z0-9]', 'g'); var ans = parsedResponse[answer].data; var val1 = JSON.stringify(ans); var field1 = ''; if (version == '' || version == 'undefined' || version == 'undefined,') { field1 = field.replace('__', '_') + '_mrvs'; } else { var version_encrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_'); field1 = field.replace('__', '_') + '_mrvs' + '_' + version_encrypt; } var parsed_def_val = JSON.parse(val1); var def_val = []; for (var i = 0; i < parsed_def_val.length; i++) { var old_def_val = parsed_def_val[i]; var modified_def_val = {}; var keys = Object.keys(old_def_val); for (var j = 0; j < keys.length; j++) { var key = keys[j]; var newKey = ''; if (version == '' || version == 'undefined' || version == 'undefined,') { newKey = field1 + '__' + key.replace(rgx, ' ').trim().replaceAll(' ', '_'); } else { newKey = field1 + '__' + key.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + version_encrypt; } modified_def_val[newKey] = old_def_val[key] + ''; } def_val.push(modified_def_val); } field1 = field1.toLowerCase(); g_form.setValue(field1, JSON.stringify(def_val)); } if (def == '" + scriptType + "' && displayType == 'dropDown') { if (valueList == 'true') { if (!(sessionStorage.getItem(field) == null || sessionStorage.getItem(field) == 'null')) { var val = sessionStorage.getItem(field); if (val.lastIndexOf(parsedResponse[answer].data) != -1) { g_form.setValue(field, parsedResponse[answer].data, parsedResponse[answer].data); } else { g_form.clearValue(field); } } } else { var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'dropDownValueList'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_field', field); gAjax.addParam('sysparm_value', parsedResponse[answer].data); gAjax.getXMLAnswer(callBack); function callBack(response) { var parsedResponse = JSON.parse(response); var newField = parsedResponse.field; var list = parsedResponse.list; var val = parsedResponse.value; if (list.length == 0 && val != '') { g_form.clearOptions(newField); g_form.addOption(newField, '', '--None--'); g_form.addOption(newField, val, val); g_form.setValue(newField, val); } else { if (list.lastIndexOf(val) != -1) { g_form.setValue(newField, val); } else { g_form.clearValue(newField); } } } } } else if (!(displayType == 'datagrid')) { if (typeof parsedResponse[answer].data == 'object') { g_form.clearOptions(field); g_form.addOption(field, '', '--None--'); for (i = 0; i < parsedResponse[answer].data.length; i++) { if (typeof parsedResponse[answer].data[i] == 'object') { g_form.addOption(field, parsedResponse[answer].data[i].value, parsedResponse[answer].data[i].id || parsedResponse[answer].data[i].label); } else { g_form.addOption(field, parsedResponse[answer].data[i], parsedResponse[answer].data[i]); } } if (bind == 'true') { var bindDefault = sessionStorage.getItem('Bind_' + field); if ((parsedResponse[answer].data).lastIndexOf(bindDefault) != -1) { g_form.setValue(field, bindDefault); } } if (computed == 'true') { var compDefault = sessionStorage.getItem('Computed_' + field); if ((parsedResponse[answer].data).lastIndexOf(compDefault) != -1) { g_form.setValue(field, compDefault); } } if (constant == 'true') { var constantDefault = sessionStorage.getItem('Constant_' + field); for (var choice = 0; choice < parsedResponse[answer].data.length; choice++) { var value = ''; if (typeof parsedResponse[answer].data[choice] == 'object') { value = parsedResponse[answer].data[choice].value; } else { value = parsedResponse[answer].data[choice]; } if(value == constantDefault){ g_form.setValue(field, constantDefault); g_form.setReadOnly(field, readonly); } } } } else { if (field.startsWith('checkbox')) { g_form.setValue(field, parsedResponse[answer].data, parsedResponse[answer].data); } else { if (parsedResponse[answer].data) { if (field.startsWith('dateTime')) { var datefield = field; var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'DateTime'); gAjax.addParam('sysparm_obj', parsedResponse[answer].data); gAjax.addParam('sysparm_value', datefield); gAjax.getXMLAnswer(callBack1); function callBack1(response1) { var answer = response1; var parsedAnswer = JSON.parse(answer); g_form.addOption(parsedAnswer.datafields, parsedAnswer.dates, parsedAnswer.dates); g_form.setValue(parsedAnswer.datafields, parsedAnswer.dates, parsedAnswer.dates); } } else { g_form.addOption(field, parsedResponse[answer].data, parsedResponse[answer].data); g_form.setValue(field, parsedResponse[answer].data); } } else { g_form.clearValue(field); } } } } } } } } function appendLeadingZeroes(n) { if (n <= 9) { return '0' + n; } return n; }";
              
                    }
                    var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                    var var_set = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
                    var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                    var query = '';

                    if (field == 'u_project') {
                        query = 'name=u_project' + '^sys_scope=' + scope + '^variable_set=' + var_set;
                    } else if (field == 'u_version') {
                        query = 'name=u_version' + '^sys_scope=' + scope + '^variable_set=' + var_set;
                    } else {
                        query = 'cat_item=' + schema[field][0].catalog + '^name=' + field;
                    }
                    varGR.addEncodedQuery(query);
                    varGR.query();
                    if (varGR.next()) {
                        fieldSysID = varGR.sys_id;
                    }
                    var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                    var catalogClientScript = new sn_sc.CatalogClientScript();
                    catalogClientScript.setAttributes({
                        'name': field + " single " + scriptType,
                        'description': 'x_vmw_clientScript_' + 'onChange ' + field + ' single ' + scriptType,
                        'applies_to': 'all',
                        'ui_type': '10',
                        'type': 'onChange',
                        'sys_scope': app_scope,
                        'cat_item': schema[field][0].catalog,
                        'active': 'true',
                        'cat_variable': 'IO:' + fieldSysID,
                        'order': this.clientscriptorder

                    });
                    this.clientscriptorder++;
                    catalogClientScript.addScript(script);
                    catalogClientScript.appliesToCatalogItem(true);
                    var catalogClientScriptId = catalogClientScript.create();
                }

            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertSingleClientScript : Exception Block: ' + ' fieldSysID: ' + fieldSysID + ' query: ' + query + ' catalogClientScriptId: ' + catalogClientScriptId);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertSingleClientScript ' + e + ". Error found" + e.stack);
        }
    },



    /*
    Function Name : insertActionOnchangeScript
    Comments: New function for creating the onchange dynamic dropdown client scripts for Day 2 Actions.
    Updated On: 28 April 2021 , 21 June 2022 ,07 july 2022
    Updated By: Prateek, Ajay,shivam
    Update Comments : Handled external source for canvas,request info  and custom properties for bind field. 
    */
    insertActionOnchangeScript: function(datasource, uri, parameters, dependency, field, catalog, version, scriptType, displayType, valueList, bindAvail) {
        try {
            var dependency1 = dependency;
            CASLogger.debug('Inside the CASDaoUtil.insertActionOnchangeScript: dependency1' + dependency1);
            var fieldSysID = '';
            var script = '';

            if (scriptType == 'bind') {
                script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading){return;} var displayType='" + displayType + "'; var valueList='" + valueList + "';var parameters='" + parameters + "';if(!parameters){parameters=[];}else{parameters=JSON.parse(parameters);} var dependency='" + dependency + "';var dependencyArr='';if(dependency){dependencyArr=dependency.split(',');} if (dependencyArr) {var values = []; for (var onChange = 0; onChange < dependencyArr.length; onChange = onChange + 2) {var value = g_form.getValue(dependencyArr[onChange+1]);    if(displayType =='dropDown'){ if(valueList=='true'){ if (!(sessionStorage.getItem('" + field + "') == null || sessionStorage.getItem('" + field + "') == 'null')) {var a = sessionStorage.getItem('" + field + "').split(','); sessionStorage.setItem('Bind_' + '" + field + "',value);if (a.lastIndexOf(value + '') != -1 ) {g_form.setValue('" + field + "', value);} else {g_form.clearValue('" + field + "');}}else{sessionStorage.setItem('Bind_' + '" + field + "',value);}} else {var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name', 'dropDownValueList');gAjax.addParam('sysparm_sys_id', catItemSysid);gAjax.addParam('sysparm_field', '" + field + "');gAjax.addParam('sysparm_value', value);gAjax.getXMLAnswer(callBack);function callBack(response) {var parsedResponse = JSON.parse(response);var newField = parsedResponse.field;var list = parsedResponse.list;var val = parsedResponse.value; if (list.length == 0 && val!='') {g_form.clearOptions(newField);g_form.addOption(newField, '', '--None--');g_form.addOption(newField, val, val);g_form.setValue(newField, val);} else {if (list.lastIndexOf(val) != -1) {g_form.setValue(newField, val);} else {g_form.clearValue(newField);}}}}}else{ g_form.setValue('" + field + "', value);}}}}";
            } else if(scriptType =='ChangeOwner'){
 				script = "/* ***********************************************************\n* Copyright (c) 2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '' ) {return;}var val = g_form.getValue('"+field+"')+''; if(val != 'USER'){g_form.setValue('"+field+"','USER');alert( '\"'+ val+'\"' + ' owner type is not supported.');}}";
			} else if(scriptType == 'Project'){
				script = "/* ***********************************************************\n* Copyright (c) 2024 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var deploymentSysId = g_form.getValue('deployment'); var val = g_form.getValue('"+field+"') + ''; var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'changeProjectLeaseValue'); gAjax.addParam('sysparm_deployment_sys_id', deploymentSysId); gAjax.addParam('sysparm_project_id', val); gAjax.getXMLAnswer(callBack1); function callBack1(answer) { var response = JSON.parse(answer); var target = response.newLeaseExpiryDate; var current = response.currentLeaseExpiryDate; if (target == 'Expires Never' && current == 'Expires Never') { showFieldMessages(target, current); } else if (target == 'Expires Never' && current != 'Expires Never') { getDateInformation(current, function(originLease) { showFieldMessages(target, originLease); }); } else if (current == 'Expires Never' && target != 'Expires Never') { getDateInformation(target, function(newLease) { showFieldMessages(newLease, current); }); } else { getDateInformation(target, function(newLease) { getDateInformation(current, function(originLease) { showFieldMessages(newLease, originLease); }); }); } } function showFieldMessages(target, current) { g_form.showFieldMsg('"+field+"', 'Lease expiry for : Target Project: ' + target); g_form.showFieldMsg('"+field+"', 'Lease expiry for : Origin Project: ' + current); } function getDateInformation(dateValue, callback) { var gAjax1 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax1.addParam('sysparm_name', 'DateTime'); gAjax1.addParam('sysparm_obj', dateValue); gAjax1.addParam('sysparm_value', '"+field+"'); gAjax1.getXMLAnswer(function(response) { var parsedAnswer = JSON.parse(response); callback(parsedAnswer.dates); }); } }"
			} else{
                script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) { if (isLoading) { return; } var resourceId = g_form.getValue('resource'); var deploymentSysId = g_form.getValue('deployment'); var def = 'default'; var displayType = 'dropDown'; var display_Type = '" + displayType + "'; var bind = '" + bindAvail + "'; var valueList = '" + valueList + "'; var parameters = '" + parameters + "'; if (resourceId) { g_form.setReadOnly('resource', true); if (!parameters) { parameters = []; } else { var bindValue = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); bindValue.addParam('sysparm_name', 'bindField'); bindValue.addParam('sysparm_parameters', parameters); bindValue.addParam('sysparm_resource', resourceId); bindValue.getXMLAnswer(callBackBind); } } else { if (!parameters) { parameters = []; } else { var bindValue = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); bindValue.addParam('sysparm_name', 'dep_bindField'); bindValue.addParam('sysparm_parameters', parameters); bindValue.addParam('sysparm_deploymentid', deploymentSysId); bindValue.getXMLAnswer(callBackBind); } } function callBackBind(responseBind) { var answer = responseBind; var bindValue = JSON.parse(answer); parameters = bindValue.response; var dependency = '" + dependency + "'; var dependencyArr = ''; if (dependency) { dependencyArr = dependency.split(','); } var uri = '" + uri + "'; var datasource = '" + datasource + "'; for (var i = 0; i < dependencyArr.length; i = i + 2) { var value = g_form.getValue(dependencyArr[i + 1]); parameters.push({ 'name': dependencyArr[i], 'value': value }); } var catItemSysid = g_form.getUniqueValue(); var deploymentSysId = g_form.getValue('deployment'); var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'dynamicDropDownValues'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_deployment_sys_id', deploymentSysId); gAjax.addParam('sysparm_url', uri); gAjax.addParam('sysparm_datasource', datasource); gAjax.addParam('sysparm_parameter', JSON.stringify(parameters)); gAjax.getXMLAnswer(callBack); function callBack(response) { var answer = response; answer = JSON.parse(answer); if (def != '" + scriptType + "') { sessionStorage.setItem('" + field + "', answer.data); } if (def == '" + scriptType + "' && displayType == '" + displayType + "') { if (valueList == 'true') { if ((!(sessionStorage.getItem('" + field + "') == null || sessionStorage.getItem('" + field + "') == 'null'))) { var val = sessionStorage.getItem('" + field + "').split(','); sessionStorage.setItem('Default_' + '" + field + "', answer.data); if (val.lastIndexOf(answer.data + '') != -1) { g_form.setValue('" + field + "', answer.data, answer.data); } else { g_form.clearValue('" + field + "'); } } else { sessionStorage.setItem('Default_' + '" + field + "', answer.data); } } else { var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'dropDownValueList'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_field', '" + field + "'); gAjax.addParam('sysparm_value', answer.data); gAjax.getXMLAnswer(callBack); function callBack(response) { var parsedResponse = JSON.parse(response); var newField = parsedResponse.field; var list = parsedResponse.list; var val = parsedResponse.value; if (list.length == 0 && val != '') { g_form.clearOptions(newField); g_form.addOption(newField, '', '--None--'); g_form.addOption(newField, val, val); g_form.setValue(newField, val); } else { if (list.lastIndexOf(val) != -1) { g_form.setValue(newField, val); } else { g_form.clearValue(newField); } } } } } else { if (typeof answer.data == 'object') { g_form.clearOptions('" + field + "'); g_form.addOption('" + field + "', '', '--None--'); var def_val = []; for (i = 0; i < answer.data.length; i++) { if (typeof answer.data[i] == 'object') { g_form.addOption('" + field + "', answer.data[i].value, answer.data[i].id || answer.data[i].label); def_val.push(answer.data[i].value); } else { g_form.addOption('" + field + "', answer.data[i], answer.data[i]); def_val.push(answer.data[i]); } } sessionStorage.setItem('" + field + "', def_val); if (def != '') { var defaultValue = sessionStorage.getItem('Default_' + '" + field + "'); if ((def_val).lastIndexOf(defaultValue) != -1) { g_form.setValue('" + field + "', defaultValue); } } if (bind == 'true') { var bindDefault = sessionStorage.getItem('Bind_' + '" + field + "'); if ((answer.data).lastIndexOf(bindDefault) != -1) { g_form.setValue('" + field + "', bindDefault); } } } else { if (display_Type == 'checkbox') {g_form.setValue('" + field + "', answer.data, answer.data); } else { if (answer.data) {g_form.setValue('" + field + "', answer.data, answer.data); } } } } if (resourceId) { g_form.setReadOnly('resource', false); } } } }";
			}
			
            for (var onChange = 0; onChange < dependency1.length; onChange = onChange + 2) {
                var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                var query = '';

                if (dependency1[onChange + 1] == 'u_project') {
                    query = 'name=u_project';

                } else {
                    query = 'cat_item=' + catalog + '^name=' + dependency1[onChange + 1];
                }
                varGR.addEncodedQuery(query);
                varGR.query();
                if (varGR.next()) {
                    fieldSysID = varGR.sys_id;
                    CASLogger.debug('Inside if block of table.variable gliderecord of CASDaoUtil.insertActionOnchangeScript:');
                }
                var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.setAttributes({
                    'name': field + " dependent " + scriptType,
                    'description': 'x_vmw_clientScript_' + 'onChange ' + field + ' dependency ' + scriptType,
                    'applies_to': 'all',
                    'ui_type': '10',
                    'type': 'onChange',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'cat_variable': 'IO:' + fieldSysID,
                    'order': this.clientscriptorder

                });
                this.clientscriptorder++;
                catalogClientScript.addScript(script);
                catalogClientScript.appliesToCatalogItem(true);
                var grScript = new GlideAggregate(this.appUtil.configuration.table.clientScript);
                grScript.addQuery("name", field + " dependent " + scriptType);
                grScript.addQuery("cat_variable", "IO:" + fieldSysID);
                grScript.addAggregate('COUNT');
                grScript.query();
                grScript.next();

                var count = grScript.getAggregate('COUNT');
                var clientScriptCheck = new GlideRecord(this.appUtil.configuration.table.clientScript);
                clientScriptCheck.addQuery("name", field + " dependent " + scriptType);
                clientScriptCheck.addQuery("cat_variable", "IO:" + fieldSysID);
                clientScriptCheck.query();

                if (count > 1) {
                    var catalogClientScriptDE = new sn_sc.CatalogClientScript();
                    while (clientScriptCheck.next()) {
                        catalogClientScriptDE.deleteRecord(clientScriptCheck.sys_id);
                    }
                    count = 0;
                }
                if (count < 1) {
                    var catalogClientScriptId = catalogClientScript.create();
                }
                if (count == 1) {
                    if (clientScriptCheck.next()) {
                        if (clientScriptCheck.script == script) {
                            CASLogger.debug(clientScriptCheck.name + " client script already exists for " + fieldSysID);
                        } else {
                            var catalogClientScriptUP = new sn_sc.CatalogClientScript();
                            catalogClientScriptUP.deleteRecord(clientScriptCheck.sys_id);

                            catalogClientScriptId = catalogClientScript.create();
                        }



                    }


                }

            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertActionOnchangeScript : Exception Block: ' + ' dependency1: ' + dependency1 + ' fieldSysID: ' + fieldSysID + ' query: ' + query + ' catalogClientScriptId: ' + catalogClientScriptId);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertActionOnchangeScript ' + e + ". Error found" + e.stack);
        }
    },

    /*
       Function Name : insertActionOnchangeVisibilyScript
       Comments: New function for creating the onchange dynamic client scripts for Day 2 Actions variable visibilty.
       Created On: 19 Oct 2022
       Created By: Shivam
       */
    insertActionOnchangeVisibilyScript: function(catalog, script, catalogVarName, variable) {

        try {
            CASLogger.debug('Inside the CASDaoUtil.insertActionOnchangeVisibilyScript: Catalog: ' + catalog + ' catalogItemName: ' + catalogVarName + ' variable: ' + variable);

            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var catalogClientScript = new sn_sc.CatalogClientScript();
            var varName = '';
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varGR.addQuery('sys_id', variable);
            varGR.query();
            if (varGR.next()) {
                varName = varGR.name;
            }
            catalogClientScript.setAttributes({
                'name': catalogVarName + ' Hide fields ',
                'description': 'x_vmw_clientScript_' + catalogVarName + ' Hide fields ' + varName,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onChange',
                'cat_variable': "IO:" + variable,
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
                'order': this.clientscriptorder
            });
            this.clientscriptorder++;
            catalogClientScript.appliesToCatalogItem(true);
            catalogClientScript.appliesToRequestedItem(true);
            catalogClientScript.addScript(script);
            var grScript = new GlideAggregate(this.appUtil.configuration.table.clientScript);
            grScript.addQuery("description", 'x_vmw_clientScript_' + catalogVarName + ' Hide fields ' + varName);
            grScript.addQuery("cat_variable", "IO:" + variable);
            grScript.addAggregate('COUNT');
            grScript.query();
            grScript.next();

            var count = grScript.getAggregate('COUNT');
            var clientScriptCheck = new GlideRecord(this.appUtil.configuration.table.clientScript);
            clientScriptCheck.addQuery("description", 'x_vmw_clientScript_' + catalogVarName + ' Hide fields ' + varName);
            clientScriptCheck.addQuery("cat_variable", "IO:" + variable);
            clientScriptCheck.query();

            if (count > 1) {
                var catalogClientScriptDE = new sn_sc.CatalogClientScript();
                while (clientScriptCheck.next()) {
                    catalogClientScriptDE.deleteRecord(clientScriptCheck.sys_id);
                }
                count = 0;
            }
            if (count < 1) {
                var catalogClientScriptId = catalogClientScript.create();
            }
            if (count == 1) {
                if (clientScriptCheck.next()) {
                    if (clientScriptCheck.script == script) {
                        CASLogger.debug(clientScriptCheck.name + " client script already exists for " + variable);
                    } else {
                        var catalogClientScriptUP = new sn_sc.CatalogClientScript();
                        catalogClientScriptUP.deleteRecord(clientScriptCheck.sys_id);
                        catalogClientScriptId = catalogClientScript.create();
                    }
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.insertActionOnchangeVisibilyScript : Exception Block: ' + 'Catalog: ' + catalog + ' catalogItemName: ' + catalogVarName + ' variable: ' + variable + ' catalogClientScriptId: ' + catalogClientScriptId);
            CASLogger.error('Exception caught inside the CASDaoUtil.insertActionOnchangeVisibilyScript ' + e + ". Error found" + e.stack);
        }

    },

    /*	
    Function Name :deleteClientScript
    Comments: This function is used to Delete the Client Script.
    Updated On:02 feb 2022
    Updated By:Shivam Goyal
    Update Comments :Handle the Deletion of custom Client Script.
    */

    deleteClientScript: function(catalog) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.deleteClientScript: catalog' + catalog);
            var catalogClientScript = new sn_sc.CatalogClientScript();
            var clientGR = new GlideRecord(this.appUtil.configuration.table.clientScript);
            clientGR.addQuery('cat_item', catalog);
            clientGR.addQuery('descriptionSTARTSWITH' + 'x_vmw_clientScript_');
            clientGR.query();
            while (clientGR.next()) {
                catalogClientScript.deleteRecord(clientGR.sys_id);
            }
			var catalogClientScript_set = new sn_sc.CatalogClientScript();
			var gr_io_set = new GlideRecord(this.appUtil.configuration.table.variableSet);
			gr_io_set.addQuery('sc_cat_item', catalog);
			gr_io_set.query();
			while(gr_io_set.next()){
				var var_set = new GlideRecord(this.appUtil.configuration.table.variable_Set);
				var_set.addQuery('sys_id', gr_io_set.variable_set.sys_id);
				var_set.addQuery('type', 'one_to_many');
				var_set.query();
				if(var_set.next()){
					var clientGR_set = new GlideRecord(this.appUtil.configuration.table.clientScript);
					clientGR_set.addQuery('variable_set.sys_id', var_set.sys_id);
					clientGR_set.addQuery('descriptionSTARTSWITH' + 'x_vmw_clientScript_');
					clientGR_set.query();
						while (clientGR_set.next()) {
							catalogClientScript_set.deleteRecord(clientGR_set.sys_id);
					}
				}
			}
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.deleteClientScript : Exception Block: ' + ' catalog: ' + catalog);
            CASLogger.error('Exception caught inside the CASDaoUtil.deleteClientScript ' + e + ". Error found" + e.stack);

        }
    },


    getCatalogVersion: function(catalogSysid) {

        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion: catalogSysid: ' + catalogSysid);
            //CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion');
            var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            var version = [];
            var i;
            var versions;
            if (grCatItem.get(catalogSysid)) {
                versions = grCatItem.versions.split(",");
                for (i = 0; i < versions.length; i++) {
                    version[i] = {
                        "label": versions[i],
                        "value": versions[i]
                    };

                }
            }
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion: versions: ' + versions);
            return JSON.stringify(version.slice(0, -1));
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getCatalogVersion : Exception Block: ' + ' catalogSysid: ' + catalogSysid);
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogVersion ' + e + ". Error found" + e.stack);
        }
    },

    getCatalogProjects: function(catalogSysid) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogProjects: catalogSysid: ' + catalogSysid);

            var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogCategory);
            var project = [];
            var i = 0;
            //var projects;
            grCatItem.addQuery('sc_cat_item', catalogSysid);
            grCatItem.query();
            while (grCatItem.next()) {
                CASLogger.debug('Inside while loop of CASDaoUtil.getCatalogProjects:');
                //projects=grCatItem.projects.split(",");
                //CASLogger.error('title '+grCatItem["sc_category"]["project_id"]);
                var title = grCatItem["sc_category"]["title"] + '';
                var value = grCatItem["sc_category"]["project_id"] + '';
                var projectSysId = grCatItem["sc_category"]["sys_id"] + '';
                project[i] = {
                    "label": title,
                    "value": value,
                    "projectSysId": projectSysId
                };

                i++;
                //CASLogger.error("getCatalogProjects "+ project);
            }
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVersion: project: ' + JSON.stringify(project));
            //CASLogger.error('project '+JSON.stringify(project));
            return JSON.stringify(project);
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getCatalogProjects : Exception Block: ' + ' catalogSysid: ' + catalogSysid);
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogProjects ' + e + ". Error found" + e.stack);
        }
    },






    getCatalogVariable: function(catalogSysid, value)

    {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getCatalogVariable: catalogSysid: ' + catalogSysid + ' value: ' + value);
            var grCatVar = new GlideRecord(this.appUtil.configuration.table.variable);
            var x_vmw_cloudservice_versions;
            var i;
            var name = [];
            grCatVar.addQuery('cat_item', catalogSysid);
            grCatVar.query();
            //CASLogger.error('No of records '+grCatVar.getRowCount());
            while (grCatVar.next()) {
                x_vmw_cloudservice_versions = grCatVar.x_vmw_cloudservice_versions.split(",");
                for (i = 0; i < x_vmw_cloudservice_versions.length; i++) {
                    if (x_vmw_cloudservice_versions[i].trim() == value.trim()) {
                        name[i] = name + grCatVar.name.trim() + ',';

                    }
                }
            }
            CASLogger.debug('Inside CASDaoUtil.getCatalogVariable: name: ' + JSON.stringify(name));
            return JSON.stringify(name);

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getCatalogVariable : Exception Block: ' + ' catalogSysid: ' + catalogSysid + ' x_vmw_cloudservice_versions: ' + x_vmw_cloudservice_versions + ' name: ' + JSON.stringify(name));
            CASLogger.error('Exception caught inside the CASDaoUtil.getCatalogVariable ' + e + ". Error found" + e.stack);
        }
    },


    getDeploymentDeploymentsList: function(catalog) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getDeploymentList: catalog:' + catalog);
            var sysids = [];
            var mygroups = gs.getUser().getMyGroups();
            var opGR = new GlideRecord(this.appUtil.configuration.table.action);
            opGR.addQuery('catalog_item', catalog);
            if (!gs.hasRole('admin')) {
                opGR.addQuery('deployment.shared_groups', 'IN', mygroups).addOrCondition('deployment.entitled_users', 'CONTAINS', gs.getUserID()).addOrCondition('deployment.servicenow_owner', gs.getUserID()).addOrCondition('deployment.vra_owner', 'CONTAINS', gs.getUserID());
            }
            opGR.addQuery('deployment.operational_status', '1');
            opGR.addQuery('deployment.active', true);
            opGR.addQuery('deployment.status', '!=', 'CREATE INPROGRESS');
            opGR.addQuery('valid', 'true');
            opGR.query();
            while (opGR.next()) {
                if (sysids.indexOf(opGR.deployment.toString()) == -1) {
                    sysids.push(opGR.deployment.toString());
                }
            }
            return 'sys_idIN' + sysids;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getDeploymentList : Exception Block: ' + ' sys_id: ' + sys_id + ' query: ' + query + ' catalog: ' + catalog);
            CASLogger.error('Exception caught inside the CASDaoUtil.getDeploymentList ' + e + ". Error found" + e.stack);
        }
    },


    getResourceDeploymentList: function(catalog) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getDeploymentList: catalog:' + catalog);
            var sysids = [];
            var mygroups = gs.getUser().getMyGroups();
            var opGR = new GlideRecord(this.appUtil.configuration.table.action);
            opGR.addQuery('catalog_item', catalog);
            if (!gs.hasRole('admin')) {
                opGR.addQuery('machine.deployment_sys.shared_groups', 'IN', mygroups).addOrCondition('machine.deployment_sys.entitled_users', 'CONTAINS', gs.getUserID()).addOrCondition('machine.deployment_sys.servicenow_owner', gs.getUserID()).addOrCondition('machine.deployment_sys.vra_owner', 'CONTAINS', gs.getUserID());
            }
            opGR.addQuery('machine.deployment_sys.operational_status', '1');
            opGR.addQuery('machine.deployment_sys.active', true);
            opGR.addQuery('machine.deployment_sys.status', '!=', 'CREATE INPROGRESS');
            opGR.addQuery('valid', 'true');
            opGR.query();
            while (opGR.next()) {
                if (sysids.indexOf(opGR.machine.deployment_sys.toString()) == -1) {
                    sysids.push(opGR.machine.deployment_sys.toString());
                }
            }
            return 'sys_idIN' + sysids;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getDeploymentList : Exception Block: ' + ' sys_id: ' + sys_id + ' query: ' + query + ' catalog: ' + catalog);
            CASLogger.error('Exception caught inside the CASDaoUtil.getDeploymentList ' + e + ". Error found" + e.stack);
        }
    },


    getMachineList: function(catalog, deployment) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.getMachineList: catalog:' + catalog);
            var sys_id = '';
            var type = '';
            var query = '';
            var opGR = new GlideRecord(this.appUtil.configuration.table.action);
            opGR.addQuery('catalog_item', catalog);
            opGR.addQuery('valid', 'true');
            opGR.query();
            while (opGR.next()) {

                if (opGR.machine) {

                    sys_id = sys_id + opGR.machine + ',';
                    //  CASLogger.debug('Inside if block of table.action gliderecord of CASDaoUtil.getMachineList: sys_id: ' + sys_id);
                }
            }
            sys_id = sys_id.slice(0, -1);
            //query =   'active=true^deploymentid=' + deployment;
            if(deployment != '')
				query = 'sys_idIN' + sys_id + '^active=true^operational_status=1^deploymentid=' + deployment;
			else
				query = 'sys_idIN' + sys_id + '^active=true^operational_status=1';
            //CASLogger.debug('Inside the CASDaoUtil.getMachineList: query:' + query);

            return query;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.getMachineList : Exception Block: ' + ' sys_id: ' + sys_id + ' query: ' + query + ' catalog: ' + catalog + ' deployment: ' + deployment);
            CASLogger.error('Exception caught inside the CASDaoUtil.getDeploymentList ' + e + ". Error found" + e.stack);
        }
    },


    createDefaultClientScript: function(catalog, respourceType) {
        try {
            CASLogger.debug('Inside the CASDaoUtil.createDefaultClientScript: respourceType:' + respourceType + ' catalog : ' + catalog);
            var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var arr=g_form.getEditableFields();for(var i=0;i<arr.length;i++){g_form.setMandatory(arr[i],false);g_form.setVisible(arr[i],false);g_form.setDisplay(arr[i],false);}g_form.setVisible('deployment',true);g_form.setDisplay('deployment',true);g_form.setVisible('machine',true);g_form.setDisplay('machine',true);g_form.setMandatory('deployment',true);g_form.setMandatory('machine',true);g_form.setReadOnly('endpoint',true);g_form.setReadOnly('project',true);}";
            var catalogClientScript = new sn_sc.CatalogClientScript();
            catalogClientScript.setAttributes({
                'name': "hideFields",
                'description': 'x_vmw_clientScript_' + 'onLoad to hideFIelds',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onLoad',
                'cat_item': catalog,
                'active': 'true',
            });

            catalogClientScript.addScript(script);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

            var fieldSysID = '';
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            varGR.addQuery('cat_item', catalog);
            varGR.addQuery('name', 'deployment');
            varGR.query();
            if (varGR.next()) {
                fieldSysID = varGR.sys_id;
                CASLogger.debug('Inside if block of table.variable for deployment gliderecord of CASDaoUtil.createDefaultClientScript: fieldSysID: ' + fieldSysID);
            }

            var onchangescript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','getEndpoint');gAjax.addParam('sysparm_deploymentid',newValue);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;var parsed=JSON.parse(answer);if(parsed.endpoint){g_form.setValue('endpoint',parsed.endpoint);g_form.setVisible('endpoint',true);g_form.setDisplay('endpoint',true);}if(parsed.project){g_form.setValue('project',parsed.project);g_form.setVisible('project',true);g_form.setDisplay('project',true);}}}";
            catalogClientScript.setAttributes({
                'name': "populateProjectandEndpoint",
                'description': 'x_vmw_clientScript_' + 'populateProjectandEndpoint',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + fieldSysID
            });

            catalogClientScript.addScript(onchangescript);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

            var variableScript ="/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==''){return;}var catalog=g_form.getUniqueValue();var fields=g_form.getEditableFields();for(var i=0;i<fields.length;i++){if(fields[i] != 'deployment' && fields[i] != 'machine'&&fields[i] != 'General'){g_form.setMandatory(fields[i],false);g_form.setVisible(fields[i],false);g_form.setDisplay(fields[i],false);}}g_form.setMandatory('deployment',true);g_form.setVisible('deployment',true);g_form.setDisplay('deployment',true);g_form.setMandatory('machine',true);g_form.setVisible('machine',true);g_form.setDisplay('machine',true);var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','getSchema');gAjax.addParam('sysparm_deploymentid',newValue);gAjax.addParam('sysparm_catalogid',catalog);gAjax.addParam('sysparm_type','" + respourceType + "');gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;var parsed=JSON.parse(answer);g_form.setVisible('endpoint',true);g_form.setDisplay('endpoint',true);g_form.setVisible('project',true);g_form.setDisplay('project',true);var rgx=new RegExp('[^a-zA-Z0-9]','g');if(parsed.schema&&parsed.schema.properties && Object.keys(parsed.schema.properties).length){var properties=parsed.schema.properties;for(var key in properties){var name=key.replace(rgx,' ').trim().replaceAll(' ','_');g_form.setVisible(name,true);g_form.setDisplay(name,true);}}else{g_form.setVisible('reason',true);g_form.setDisplay('reason',true);}}}";
            if (respourceType == 'Machine') {
                var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
                varGR.addQuery('cat_item', catalog);
                varGR.addQuery('name', 'machine');
                varGR.query();
                if (varGR.next()) {
                    fieldSysID = varGR.sys_id;
                    CASLogger.debug('Inside if block of table.variable for machine gliderecord of CASDaoUtil.createDefaultClientScript: fieldSysID: ' + fieldSysID);
                }
            }
            catalogClientScript.setAttributes({
                'name': "populateVariables",
                'description': 'x_vmw_clientScript_' + 'populateVariables',
                'applies_to': 'all',
                'ui_type': '10',
                'type': 'onChange',
                'cat_item': catalog,
                'active': 'true',
                'cat_variable': 'IO:' + fieldSysID
            });

            catalogClientScript.addScript(variableScript);
            catalogClientScript.appliesToCatalogItem(true);
            var catalogClientScriptId = catalogClientScript.create();

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CASDaoUtil.createDefaultClientScript : Exception Block: ' + ' catalogClientScriptId: ' + catalogClientScriptId + ' fieldSysID: ' + fieldSysID + ' catalog: ' + catalog);
            CASLogger.error('Exception caught inside the CASDaoUtil.createDefaultClientScript ' + e + ". Error found" + e.stack);
        }
    },




    type: 'CASDaoUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-02 14:04:20</sys_created_on>
        <sys_id>88f70c971b923300e61b21b6bc4bcb00</sys_id>
        <sys_mod_count>2213</sys_mod_count>
        <sys_name>CASDaoUtil</sys_name>
        <sys_package display_value="VMware Aria Automation Plugin" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="VMware Aria Automation Plugin">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sys_script_include_88f70c971b923300e61b21b6bc4bcb00</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-08 06:28:06</sys_updated_on>
    </sys_script_include>
</record_update>
