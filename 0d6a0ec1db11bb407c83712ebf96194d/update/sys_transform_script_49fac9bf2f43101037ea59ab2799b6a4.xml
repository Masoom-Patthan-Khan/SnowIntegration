<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="Deployments Transfrom Map">c7ec66e5dbd33300da86f26b68961932</map>
        <order>100</order>
        <script><![CDATA[/************************************************************
* Copyright (c) 2020-2023 VMware, Inc. All Rights Reserved.
* You may not use this product except in compliance with the License.
* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*************************************************************/

// call the function "startImportActionForDeployment" from ImportStart.


(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {
	
    var appUtil = new CASAppUtil();
    
	
	var vra_owner = '';
	var vra_requester = '';
    var operational_status = '1';
    var install_status = '1';
    var expired = false;
    var UserEmail = source.deployment_ownedby;
    var grOwner = new GlideRecord("sys_user");
    var oRContition = grOwner.addQuery("email", UserEmail);
    oRContition.addOrCondition('user_name', UserEmail);
    grOwner.query();
    if (grOwner.next()) {
        vra_owner = grOwner.sys_id;
    }
	
    var UserEmailRequester = source.deployment_createdby;
	var grRequester = new GlideRecord("sys_user");
    var ORContition = grRequester.addQuery("email", UserEmailRequester);
    ORContition.addOrCondition('user_name', UserEmailRequester);
    grRequester.query();
    if (grRequester.next()) {
        vra_requester = grRequester.sys_id;
    }

    var status = source.deployment_status;
    var projectId = source.projectid;
    var organization = source.organization;
    var projectCheck = new CASDaoUtil().transformProjectCheck(projectId, organization);
    var u_project = '';
   
    if (projectCheck) {
        u_project = projectCheck;
       
    }

    var expires_on = '';

    if (source.expires_on != '') {
        var expireDate = source.expires_on.toString().replace('Z', ".000Z");
        expires_on = Date.parse(expireDate).toString();

        var currentDate = new Date();
        if (expires_on < currentDate.getTime())
            expired = true;
    }

    var created_at = source.deployment_createdat;

    if (source.deployment_createdat != '') {
        var regexp = new RegExp('.[0-9]+Z');
        var spliteTime = regexp.exec(source.deployment_createdat.toString()).toString();
        var milliseconds = spliteTime.substring(1, 4);
        var finalDate = source.deployment_createdat.toString().replace(spliteTime, '.' + milliseconds + 'Z');

        created_at = Date.parse(finalDate).toString();
    }

    var UpdatedDate = source.deployment_lastupdatedat;
    if (source.deployment_lastupdatedat != '') {
        var regexp = new RegExp('.[0-9]+Z');
        var spliteTime = regexp.exec(source.deployment_lastupdatedat.toString()).toString();
        var milliseconds = spliteTime.substring(1, 4);
        var finalDate = source.deployment_lastupdatedat.toString().replace(spliteTime, '.' + milliseconds + 'Z');

        UpdatedDate = Date.parse(finalDate).toString();
    }
    //getDate = appUtil.dateFormat(UpdatedDate);
    var last_updated_at = UpdatedDate;
	if (source.expense != ''){
    var ExpenseObj = appUtil.parse(source.expense);
    var last_updated_time = '';
    var unit = '';
    var message = '';
    var code = '';

    try {
		
        if (ExpenseObj.lastUpdatedTime != null) {
            var getLastUpdate = ExpenseObj.lastUpdatedTime;
            var getDate = appUtil.dateFormat(getLastUpdate);
            last_updated_time = getDate;
        }
        if (ExpenseObj.unit != null) {
            unit = ExpenseObj.unit;

        }
        if (ExpenseObj.message != null) {
            message = ExpenseObj.message;

        }
        if (ExpenseObj.code != null) {
            code = ExpenseObj.code;

        }
    } catch (e) {
        CASLogger.info("Exception caught Inside onBefore script for Deployments transform map for ExpenseObj " + e + ". Error found " + e.stack);
    }}
	

    var payload = {
        "items": [{
            "className": 'x_vmw_cloudservice_deployments',
            "values": {
                "name": source.u_name + '',
                "deployment_id": source.deployment_id + '',
                "blueprint_version": source.blueprint_version + '',
                "expires_on": expires_on + '',
                "catalog_version": source.catalog_item_version + '',
                "last_updated_by": source.deploymebt_lastupdatedby + '',
                "catalog_id": source.catalog_item_id + '',
                "bluprint_id": source.blueprintid + '',
                "organization_id": source.orgid + '',
                "short_description": source.description + '',
                "vra_owner": vra_owner + '',
				"vra_requester": vra_requester + '',
                "status": status + '',
                "u_project": u_project + '',				
				"project_id" : projectId + '',
                "expired": expired,
                "created_at": created_at + '',
                "last_updated_at": last_updated_at,
                "last_updated_time": last_updated_time + '',
                "unit": unit + '',
                "message": message + '',
                "code": code + '',
                "operational_status": operational_status + '',
                "install_status": install_status + '',
				"resource_ids":source.resource_id +'',
            },
            "lookup": [],
        }]
    };

    try {
        var jsonUntil1 = new global.JSON();
        var input1 = jsonUntil1.encode(payload);
        var output1 = sn_cmdb.IdentificationEngine.createOrUpdateCI('ITSM 8.x', input1);
        //var pasrseOutput = JSON.parse(output1);
        //var sys_id = pasrseOutput.items[0].sysId;

    } catch (e1) {
        CASLogger.error("Exception caught Inside onBefore Script for Deployments Transform Map: " + e1 + ". Error found" + e1.stack);
    }

    ignore = true;



    var deploymentId = source.deployment_id;
   
    var addTopic = new CASDaoUtil();
    addTopic.insert("startImportActionForDeployment", "", deploymentId, organization);
    //var callScriptInclude = new ImportStart();
    //var callFunction = callScriptInclude.startImportActionForDeployment(deploymentId, organization);
	
	CASLogger.debug('Inside onBefore Script for Deployments Transform Map: result of callFunction: ' +  callFunction);
	
	return callFunction;
})(source, map, log, target);]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-09-11 07:22:53</sys_created_on>
        <sys_id>49fac9bf2f43101037ea59ab2799b6a4</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>onBefore</sys_name>
        <sys_package display_value="VMware Aria Automation Plugin" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware Aria Automation Plugin">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sys_transform_script_49fac9bf2f43101037ea59ab2799b6a4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-05 06:29:12</sys_updated_on>
        <when>onBefore</when>
    </sys_transform_script>
</record_update>
