<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_vmw_cloudservice.CatalogImport</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Script Import Catalog</description>
        <name>CatalogImport</name>
        <script><![CDATA[/**********************************************************
* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.
* You may not use this product except in compliance with the License.
* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*************************************************************/
var CatalogImport = Class.create();
CatalogImport.prototype = {
    initialize: function() {
        this.appUtil = new CASAppUtil();
        this.daoUtil = new CASDaoUtil();
        this.arrayUtil = new global.ArrayUtil();
        this.order = 7;
        this.number = '';
        this.decimal = '';
        this.clientscript = 0;
        this.pageSize = gs.getProperty(this.appUtil.configuration.properties.apiPageSize);
        this.changeScript = '';
        this.loadScript = '';
		this.supportedCompDt = ["textField","integerField","textArea","decimalField","dropDown"];
    },

    /* 
    Function Name:createExternalObject
    Description: This function is used to create dynamic object for external readonly and visibility.
    updated On:22/05/2022
    created By:Shivam Goyal
	*/

    createExternalObject: function(key, catalog, visibilityJson, sysIdJson, containerJson, version,  contentSource, requestJson, onLoadObj, onChangeObj, extArr, condition) {
        try {
            CASLogger.debug('Inside  CatalogImport.createExternalObject: catalog: ' + catalog + ' visibilityJson: ' + JSON.stringify(visibilityJson) + ' sysIdJson: ' + JSON.stringify(sysIdJson) + ' version: ' + version + " containerJson: " + JSON.stringify(containerJson) + 'Key:' + key +' extArr: '+JSON.stringify(extArr) + 'condition: '+ condition + 'requestJson: '+JSON.stringify(requestJson));
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var schema = visibilityJson;
            var type = extArr["type"]; //script action
            var uri = extArr["id"]; // id-vro
            var parameters = [];
            var dependency = [];
			var responseSchema = [];
            if (extArr["parameters"]) {
                for (var param in extArr["parameters"]) {
                    for (var param1 in extArr["parameters"][param]) {
                        if (param1 != "$type") {
                            if (extArr["parameters"][param][param1] == null) {
                                parameters.push({
                                    "name": param1,
                                    "value": null
                                });
                            } else if (extArr["parameters"][param][param1] == 'project') {
                                dependency.push(param1);
                                dependency.push("u_project");

                            } else if (extArr["parameters"][param][param1].startsWith('`') && extArr["parameters"][param][param1].endsWith('`')) {
                                var value = extArr["parameters"][param][param1].slice(1, -1);
                                value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                parameters.push({
                                    "name": param1,
                                    "value": value
                                });
							} else if(extArr["parameters"][param][param1].startsWith('_')) {
								var value = extArr["parameters"][param][param1];
                                if (value == '_contentSourceType') {
                                    value = contentSource;
                                } else if (value == '_currentOrgId') {
                                    value = requestJson.organizationId + '';
                                } else if (value == '_catalogItemName') {
                                    value = requestJson.catalogName + '';
                                } else if (value == '_requestedBy') {
                                    value = '';
                                } else {
                                    value = '';
                                }
								parameters.push({
                                    "name": param1,
                                    "value": value
                                });
                            } else {
                                var value = extArr["parameters"][param][param1];
                                value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                dependency.push(param1);
                                if (!version) {
                                    dependency.push(value);
                                } else {
                                    dependency.push(value + "__" + version.replace(rgx, ' ').trim().replaceAll(' ', '_'));
                                }
                            }
                        }
                    }
                }
            }

            var varField = '';
            if (visibilityJson.type == 'container') {
                varField = key + '';
            } else {
                if (version) {
					if(sysIdJson[key] && sysIdJson[key].type == 'datagrid'){
						varField = key.toLowerCase() + "_mrvs_"  + version;
					} else {
						varField = key + "__" + version;
					}
					varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
                } else {
					key = (sysIdJson[key] && sysIdJson[key].type == 'datagrid') ? key.toLowerCase()  + "_mrvs"  : key;
                    varField = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
                }
            }

            var ismandatory = 'false';
            if (sysIdJson[key] && sysIdJson[key].mandatory) {
                ismandatory = sysIdJson[key].mandatory;
            }

            var isMacro = false;
            if (sysIdJson[key] && sysIdJson[key].isMacro) {
                isMacro = sysIdJson[key].isMacro;
            }

            onLoadObj["u_version"].push({
                "type": type,
                "uri": uri,
                "parameters": parameters,
                "dependency": dependency,
                "varField": varField,
                "fieldType": visibilityJson.type,
                "catalog": catalog,
                "versions": version,
                "isMandatory": ismandatory,
                "isMacro": isMacro,
                "condition": condition
            });

			CASLogger.debug('Inside  CatalogImport.createExternalObject: onLoadObj : ' + JSON.stringify(onLoadObj));

            if (dependency) {
                for (var inc = 0; inc < dependency.length; inc = inc + 2) {
                    var depend = dependency[inc + 1];
                    if (onChangeObj[depend]) {
                        onChangeObj[depend].push({
                            "type": type,
                            "uri": uri,
                            "parameters": parameters,
                            "dependency": dependency,
                            "varField": varField,
                            "fieldType": visibilityJson.type,
                            "catalog": catalog,
                            "versions": version,
                            "isMandatory": ismandatory,
                            "isMacro": isMacro,
                            "condition": condition
                        });
                    } else {
                        onChangeObj[depend] = [];
                        onChangeObj[depend].push({
                            "type": type,
                            "uri": uri,
                            "parameters": parameters,
                            "dependency": dependency,
                            "varField": varField,
                            "fieldType": visibilityJson.type,
                            "catalog": catalog,
                            "versions": version,
                            "isMandatory": ismandatory,
                            "isMacro": isMacro,
                            "condition": condition
                        });
                    }
                }
            }
		
		CASLogger.debug('Inside  CatalogImport.createExternalObject: onChangeObj: ' + JSON.stringify(onChangeObj));
			
		responseSchema.push(onLoadObj);
		responseSchema.push(onChangeObj);
        return responseSchema;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createExternalObject: Exception Block: versions: ' + version + 'catalog' + catalog + ' visibilityJson: ' + JSON.stringify(visibilityJson) + ' sysIdJson: ' + JSON.stringify(sysIdJson) + ' onChangeObj: ' + JSON.stringify(onChangeObj)+ ' onLoadObj: ' + JSON.stringify(onLoadObj));

            CASLogger.error("Exception caught inside CatalogImport.createExternalObject" + e + ". Error found" + e.stack + " Catalog "+ catalog);
        }
    },
		
    /* 
    	Function Name:createOnChangeVisibilityScript
        Description: To set conditional visibility of variables/tabs and conditional readonly/default for canvas fields.
        Updated On:05/05/2022, 17/02/2023
        Updated By:Shivam Goyal, Vrushali
    	Updated commnets: Added the  support for Integer and Decimal., Added support for conditional readOnly and Default.
    	*/
    createOnChangeVisibilityScript: function(catalog, visibilityJson, sysIdJson, containerJson, version, customCatalogType, contentSource, requestJson) {

        try {
            CASLogger.debug('Inside  CatalogImport.createOnChangeVisibilityScript: catalog: ' + catalog  +'CustomCatalogType:' + customCatalogType + ' visibilityJson: ' + JSON.stringify(visibilityJson) + ' sysIdJson: ' + JSON.stringify(sysIdJson) + ' version: ' + version + " containerJson: " + JSON.stringify(containerJson) + ' contentSource : ' + contentSource + 'requestJson: '+ JSON.stringify(requestJson));
            var reversedJson = {};
            var versionChangeScript = "";
            var requestScript = "";
			var onLoadObj = {};
			onLoadObj.u_version = [];
			var onChangeObj = {};
			for (var i in visibilityJson) {
                var schema = visibilityJson;
                var type = visibilityJson[i].type + "";
				var readArr = "";
                var visArr = "";
				var defaultArr = "";
                var customObj = {};
				var reponseExternal = '';
                if (visibilityJson[i].readonly) {
					readArr = visibilityJson[i].readonly;
					if(readArr.type == 'scriptAction' && customCatalogType == ''){
						reponseExternal = this.createExternalObject(i, catalog, visibilityJson[i], sysIdJson, containerJson, version, contentSource, requestJson, onLoadObj, onChangeObj, readArr , 'readonly');
						onLoadObj = reponseExternal[0];
						onChangeObj = reponseExternal[1];  
						
					} else {
						customObj.readonly = {};
						customObj.readonly.data = readArr;
						customObj.readonly.conditionType = "readonly";
					}
				}
				
				if (visibilityJson[i].visible) {
					visArr = visibilityJson[i].visible;
					if(visArr.type == 'scriptAction' && customCatalogType == ''){
					reponseExternal = this.createExternalObject(i, catalog, visibilityJson[i], sysIdJson, containerJson, version, contentSource, requestJson, onLoadObj, onChangeObj, visArr , 'visibility');
						onLoadObj = reponseExternal[0];
						onChangeObj = reponseExternal[1]; 
						
					} else {
						customObj.visible = {};
						customObj.visible.data = visArr;
						customObj.visible.conditionType = "visibility";
					}
                }
				
				if (visibilityJson[i].default) {
					defaultArr = visibilityJson[i].default;
					customObj.default = {};
					customObj.default.data = defaultArr;
					customObj.default.conditionType = "default";
				}
				if(Object.keys(customObj).length != 0)
					reversedJson = this.getReverseJSON(sysIdJson, i, customObj, type, reversedJson);
			}
			
            CASLogger.debug('Inside CatalogImport.createOnChangeVisibilityScript: reversedJson: ' + JSON.stringify(reversedJson) +'catalog :' + catalog);
			CASLogger.debug('Inside CatalogImport.createOnChangeVisibilityScript: onLoadObj: ' + JSON.stringify(onLoadObj) +'catalog :' + catalog);
			CASLogger.debug('Inside CatalogImport.createOnChangeVisibilityScript: onChangeObj: ' + JSON.stringify(onChangeObj) +'catalog :' + catalog);
			
			var value = this.createConditionalScript(catalog, reversedJson, sysIdJson, containerJson, customCatalogType);
			
			var fieldsArr = JSON.parse(value);
			versionChangeScript += fieldsArr[0];
			requestScript += fieldsArr[1];
			
			this.createExternalScript(catalog, visibilityJson, sysIdJson, containerJson, version, onLoadObj);
			var value1 = this.createExternalScript(catalog, visibilityJson, sysIdJson, containerJson, version, onChangeObj);
			
			var fieldsArr1 = JSON.parse(value1);
			versionChangeScript += fieldsArr1[0];
			requestScript += fieldsArr1[1];
			
            var grCatItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
            var versions = [];
            if (grCatItem.get(catalog)) {
                versions = (grCatItem.versions + '').slice(0, -1).split(",");
                CASLogger.debug('Inside if block of table.catalogItem gliderecord of CatalogImport.createOnChangeVisibilityScript: versions: ' + versions);
            }
            if (versions.length == 1) {
                this.loadScript = versionChangeScript ;
            }
			
            requestScript = "if(g_form.tableName+''=='sc_req_item'){" + requestScript + "}";
            versionChangeScript = "if(newValue + '' == '" + version + "') {" + versionChangeScript + requestScript + "}";
            this.changeScript += versionChangeScript;
			
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createOnChangeVisibilityScript: Exception Block: versions: ' + versions +  'catalog' + catalog + ' visibilityJson: ' + JSON.stringify(visibilityJson) + ' sysIdJson: ' + JSON.stringify(sysIdJson));

            CASLogger.error("Exception caught inside CatalogImport.createOnChangeVisibilityScript" + e + ". Error found" + e.stack +'catalog : '+catalog);
        }
    },
		
	createConditionalScript: function(catalog, reversedJson, sysIdJson , containerJson, customCatalogType) {
    try {
		CASLogger.debug('Inside CatalogImport.createConditionalScript: catalog :'+ catalog + 'reversedJson: ' + JSON.stringify(reversedJson) + 'sysIdJson : ' + JSON.stringify(sysIdJson) + ' containerJson :'+ JSON.stringify(containerJson) + ' customCatalogType : '+ customCatalogType);
		var onChange = [];
		var versionChangeScript = "";
		var requestScript = "";
		var supportedOps = ["equals", "notEqual", "within", ">", ">=", "<", "<="];
        if (Object.keys(reversedJson).length != 0) {
            for (var key in reversedJson) {
                var condition = "";
                var mandatoryCond = "";
                var setCondition = "";
                var condArr = reversedJson[key];
                var hasContainer = false;

                var conditionData = this.getConditionScript(sysIdJson, condArr, supportedOps,requestScript);
                CASLogger.debug('Inside CatalogImport.createConditionalScript: conditionData: ' + JSON.stringify(conditionData) + 'catalog : ' + catalog);

                var visibleVal = conditionData.visibleVal;
                var readonlyVal = conditionData.readonlyVal;
                var defaultVal = conditionData.defaultVal;
                requestScript = conditionData.requestScript;
                var varType = conditionData.CondType;
                var visibleFlag = conditionData.visibleFlag;
                var readFlag = conditionData.readFlag;
                var defaultFlag = conditionData.defaultFlag;

                var varName = '';
                if (varType + '' == 'variable') {

                    var isMandatory = sysIdJson[key].mandatory;
                    varName = sysIdJson[key].name + '';
                    var sysid = sysIdJson[key].sys_id;
                    var name = (sysIdJson[key] && sysIdJson[key].type == 'datagrid') ? sysIdJson[key].name.toLowerCase() + '' : sysIdJson[key].name + '';
                    var check_dropdown = sysIdJson[key].isDropdown;
                    var check_external_dropdown = sysIdJson[key].isExternal_dropdown;
                    var isMacro = sysIdJson[key].isMacro;
                    var reqCond = (isMacro) ? "name=(curView=='sc_req_item') ? '" + name + "'.replace('macro_','') : '" + name + "';" : "name='" + name + "';";
                    condition += reqCond;
					var miscCondition ='';
                    if (defaultFlag) {
                        if (check_dropdown == "true") {
                            if (check_external_dropdown == "true") {
                                setCondition += 'if (curView != "sc_req_item") { if (!(sessionStorage.getItem(name) == null || sessionStorage.getItem(name) == "null")) { var a = sessionStorage.getItem(name).split(","); sessionStorage.setItem("Conditional_" + name, defaultVal_); if (a.lastIndexOf(defaultVal_ ) != -1) { g_form.setValue(name, defaultVal_); } else { g_form.clearValue(name); } } else { sessionStorage.setItem("Conditional_" + name, defaultVal_); } }';
                            } else {
                                setCondition += 'if (curView != "sc_req_item") { var catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge"); gAjax.addParam("sysparm_name", "dropDownValueList"); gAjax.addParam("sysparm_sys_id", catItemSysid); gAjax.addParam("sysparm_field", name); gAjax.addParam("sysparm_value", defaultVal_); gAjax.getXMLAnswer(callBack); function callBack(response) { var parsedResponse = JSON.parse(response); var newField = parsedResponse.field; var list = parsedResponse.list; var val = parsedResponse.value; if (list.length == 0 && val != "") { g_form.clearOptions(newField); g_form.addOption(newField, "", "--None--"); g_form.addOption(newField, val, val); g_form.setValue(newField, val); } else { if (list.lastIndexOf(val) != -1) { g_form.setValue(newField, val); } else { g_form.clearValue(newField); } } } }';
                            }
                        } else {
                            setCondition += 'if (curView != "sc_req_item") { g_form.setValue(name, defaultVal_); }';
                        }
                        condition += defaultVal;
                    }
                    if (readFlag) {
                        miscCondition += "if (curView != 'sc_req_item') { g_form.setReadOnly(name, readonlyVal_); }";
                        condition += readonlyVal;
                    }
                    if (visibleFlag) {
                        mandatoryCond = (isMandatory + "" == "true") ? "sessionStorage[name+'_variable'] = visibleVal_ + '';" + "g_form.setMandatory(name, visibleVal_);" : "";
                        miscCondition += "g_form.setDisplay(name, visibleVal_);";
                        condition += visibleVal;
                    }
                    condition += setCondition + mandatoryCond + miscCondition;

                } else {
                    hasContainer = true;
                    varName = key + "";
                    var containerName = key + "";
					if(readFlag){
						condition += readonlyVal + "if (curView != 'sc_req_item') {g_form.setReadOnly('" + containerName + "',  readonlyVal_ );}";
					}
					if(visibleFlag){
                    condition += visibleVal + "var containerJson = allContainers['" + containerName + "']; for (var i = 0; i < containerJson.length; i++) { if (containerJson[i].mandatory + '' == 'true' && sessionStorage[containerJson[i].name + '_variable'] + '' != 'false') { name = (containerJson[i].isMacro && g_form.tableName + '' == 'sc_req_item') ? (containerJson[i].name).replace('macro_', '') : containerJson[i].name; g_form.setMandatory(name, visibleVal_); sessionStorage[containerJson[i].name + '_container'] = visibleVal_ + ''; } if(containerJson[i].type == 'datagrid'){ g_form.setDisplay(containerJson[i].name, visibleVal_); } } g_form.setDisplay('" + containerName + "', visibleVal_);";
					}
                }

                var addContainerJson = (hasContainer) ? "var allContainers = " + JSON.stringify(containerJson) + ";" : "";
                var onChangeScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n" + "function onChange(control, oldValue, newValue, isLoading) { var name=''; var curView=g_form.tableName+'';" + addContainerJson + " " + condition + " }";

                var keyArr = {};
                for (var n = 0; n < condArr.length; n++) {
                    if (sysIdJson[condArr[n].key]) {
                        if (keyArr[condArr[n].key]) {
                            continue;
                        } else {
                            keyArr[condArr[n].key] = [];
                            keyArr[condArr[n].key].push({
                                "sys_id": sysIdJson[condArr[n].key].sys_id
                            });
                        }
                    }
                }

                for (var field in keyArr) {
                    var variable = "IO:" + sysIdJson[field].sys_id;

                    if (customCatalogType == 'action') {
                        this.daoUtil.insertActionOnchangeVisibilyScript(catalog, onChangeScript, varName, sysIdJson[field].sys_id);
                    } else {
                        this.daoUtil.insertClientScript(catalog, onChangeScript, "", 'tabVisibilityScript', variable);
                    }
                    versionChangeScript +=  "g_form.setValue('" + variable + "', ' ');" + "g_form.setValue('" + variable + "', '" + sysIdJson[field].value + "');";
                }

            }

        }
		onChange.push(versionChangeScript);
        onChange.push(requestScript);
		return JSON.stringify(onChange);
		
    } catch (e) {
        gs.error("Exception caught inside CatalogImport.createConditionalScript :" + e +' Catalog :'+ catalog );
    }

},
	/* 
    	Function Name:createExternalScript
        Description: This function creates catalog client script for External read-only and visibility for day-0.
        updated On: 31/05/23
        created By: Vrushali
    	Updated commnets: Added the support for External readonly and visibility.
    	*/
	
	createExternalScript: function(catalog, visibilityJson, sysIdJson, containerJson, version, externalObj){
		try {
			CASLogger.debug("inside CatalogImport.createExternalScript : catalog : "+ catalog + " visibilityJson : "+JSON.stringify(visibilityJson)+ "sysIdJson : "+JSON.stringify(sysIdJson)+" containerJson :"+JSON.stringify(containerJson)+" version :"+ version +" external obj : "+JSON.stringify(externalObj));
			
			var versionChangeScript = "";
            var requestScript = "";
            var obj = JSON.stringify(externalObj);
			var appScope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var var_set = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
            var schema = JSON.parse(obj);
			var onChange = [];

            for (var field in schema) {
                CASLogger.debug('Inside For loop: CatalogImport.createExternalScript: Field: ' + field);
                if (field != 'type' && schema[field] != '') {
                    var fieldSysID = '';
                    var Version = '';
					if (schema[field][0].versions == "") {
						Version = "'undefined'";
					} else {
						Version = JSON.stringify(schema[field][0].versions);
					}
                    var script = '';
                    var condition = "var fields = " + JSON.stringify(schema[field]) + "; if (isLoading) { for (var i = 0; i < fields.length; i++) { if (fields[i].fieldType == 'container') { var containerJson = allContainers[fields[i].varField]; for (var j = 0; j < containerJson.length; j++) { if (containerJson[j].mandatory + '' == 'true') { var key = (containerJson[j].isMacro && g_form.tableName + '' == 'sc_req_item') ? (containerJson[j].name).replace('macro_', '') : containerJson[j].name; if (fields[i].condition == 'visibility') { g_form.setMandatory(key, visible); } } } } name = fields[i].varField; if (fields[i].isMacro == true) { name = (curView == 'sc_req_item') ? fields[i].varField : 'macro_' + fields[i].varField; } if (fields[i].condition == 'readonly') { g_form.setReadOnly(name, readonly); } else { if (fields[i].isMandatory == 'true') { g_form.setMandatory(name, visible); } g_form.setDisplay(name, visible); } } return; } if (sessionStorage.getItem('catalog_script_counter') == 0) { var ga = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); ga.addParam('sysparm_name', 'getProperty'); ga.getXML(result); function result(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ans = answer.toLowerCase(); if (ans == 'true' || ans == true) { try { var loadingDialog3 = new GlideDialogWindow('x_vmw_cloudservice_Loader_Catalog', true, '500', '200'); loadingDialog3.setTitle(''); loadingDialog3.render(); var interval = setInterval(function() { if (sessionStorage.getItem('catalog_script_counter') == 0) { loadingDialog3.destroy(); clearInterval(interval); } }, 500); } catch (e) {} } } } var projectId = g_form.getValue('u_project'); var catItemSysid = ''; var cat_itemm = g_form.getValue('cat_item'); if (cat_itemm == '' || cat_itemm == undefined) { catItemSysid = g_form.getUniqueValue(); } else { catItemSysid = cat_itemm; } var obj = []; var fieldsdata = {}; var requestID = 10; var parsed = fields; for (var field in parsed) { var parameters = parsed[field].parameters; var dependency = (parsed[field].dependency); var uri = parsed[field].uri; var datasource = parsed[field].type; if (!parameters) { parameters = []; } else {} var dependencyArr = ''; if (dependency) { dependencyArr = dependency.toString().split(','); } if (dependencyArr) { for (var i = 0; i < dependencyArr.length; i = i + 2) { var value = g_form.getValue(dependencyArr[i + 1]); parameters.push({ 'name': dependencyArr[i], 'value': value, 'useResultFromRequestId': -1 }); } var body = { 'uri': uri, 'datasource': datasource, 'parameters': (parameters), 'requestId': requestID }; fieldsdata[requestID] = {}; fieldsdata[requestID].name = parsed[field].varField; fieldsdata[requestID].mandatory = parsed[field].isMandatory; fieldsdata[requestID].fieldType = parsed[field].fieldType; fieldsdata[requestID].macro = parsed[field].isMacro; fieldsdata[requestID].condition = parsed[field].condition; obj.push(body); requestID++; } } var gAjax = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax.addParam('sysparm_name', 'multipleRequestDropdownValues'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_obj', JSON.stringify(obj)); gAjax.addParam('sysparm_projectId', projectId); sessionStorage.setItem('catalog_script_counter', parseInt(sessionStorage.getItem('catalog_script_counter')) + 1); gAjax.getXMLAnswer(callBack); function callBack(response) { sessionStorage.setItem('catalog_script_counter', sessionStorage.getItem('catalog_script_counter') - 1); var parsedResponse = JSON.parse(response); for (var answer = 0; answer < parsedResponse.length; answer++) { var requestID = parsedResponse[answer].requestId; var fields = fieldsdata[requestID].name; var mand = fieldsdata[requestID].mandatory; var fieldtype = fieldsdata[requestID].fieldType; var macro = fieldsdata[requestID].macro; if (macro == true) { fields = (curView == 'sc_req_item') ? fields : 'macro_' + fields; } var condition = fieldsdata[requestID].condition; var ans = parsedResponse[answer].data; if (fieldtype == 'container') { var containerJson = allContainers[fields]; for (var i = 0; i < containerJson.length; i++) { if (containerJson[i].mandatory + '' == 'true') { name = (containerJson[i].isMacro && g_form.tableName + '' == 'sc_req_item') ? 'macro_' + containerJson[i].name : containerJson[i].name; if (condition == 'readonly') { g_form.setMandatory(name, true); sessionStorage[containerJson[i].name + '_container'] = true + ''; } else { g_form.setMandatory(name, ans); sessionStorage[containerJson[i].name + '_container'] = ans + ''; } } if(containerJson[i].type == 'datagrid'){ g_form.setDisplay(containerJson[i].name, ans); } } } ";

					
						script =  condition  + "if (condition == 'readonly') { ans = (cat_itemm == '') ? ans : true ; ans == true || ans == false || ans == 'true' || ans == 'false' ? g_form.setReadOnly(fields, ans): g_form.setReadOnly(fields, 'false'); } else { if (mand == 'true') { g_form.setMandatory(fields, ans); sessionStorage[fields + '_variable'] = ans + ''; } ans == true || ans == false || ans == 'true' || ans == 'false' ? g_form.setDisplay(fields, ans): g_form.setDisplay(fields, 'false'); }}}";
					
                    var addContainerJson = "var allContainers = " + JSON.stringify(containerJson) + ";"

                    onChangeScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) {if (g_form.getValue('u_version') != " + Version + ") {return;} var visible = 'false';var readonly = 'false';var name = ''; var curView=g_form.tableName+'';" + addContainerJson + " " + script + " }";

                    var variable = '';
                    var val = '';
                    if (version == '' || version == 'undefined' || version == 'undefined,') {
                        val = field;
                    } else {
						val = (field == 'u_version')? field : field.slice(0, (field.lastIndexOf("__")));
                    }
                    if (sysIdJson[val] && sysIdJson[val].type + "" != 'dropDown' && sysIdJson[val].type + "" != 'textField' && sysIdJson[val].type + "" != 'integerField' && sysIdJson[val].type + "" != 'decimalField' && sysIdJson[val].type + "" != 'textArea' && sysIdJson[val].type + "" != 'checkbox')
                        continue;

                    if (field == 'u_project' || field == 'u_version') {
                        var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
						var query = (field == 'u_project')? 'name=u_project' : 'name=u_version' + '^sys_scope=' + appScope + '^variable_set=' + var_set ;
                        varGR.addEncodedQuery(query);
                        varGR.query();
                        if (varGR.next()) {
                            fieldSysID = varGR.sys_id;
                        }
                        variable = "IO:" + fieldSysID;
                    } else {
                        variable = "IO:" + sysIdJson[val]["sys_id"];
                        requestScript += "g_form.setValue('" + sysIdJson[val].name + "',g_form.getValue('" + sysIdJson[val].name + "'));";
                        versionChangeScript +=  "g_form.setValue('" + variable + "', ' ');" + "g_form.setValue('" + variable + "', '" + sysIdJson[val].value + "');";
                    }
                    this.daoUtil.insertClientScript(catalog, onChangeScript, "", 'tabVisibilityScript', variable);
                }
				
            }
			
            onChange.push(versionChangeScript);
            onChange.push(requestScript);
			return JSON.stringify(onChange);
		}catch(e){
			gs.error("Exception caught inside ImportCatalog.createExternalScript : "+e + ' Catalog : '+ catalog);
		}
	},
		
		
	
	/* 
    	Function Name:getReverseJSON
        Description: This function returns the reverse JSON for conditional read-only and hide/unhide and default condition array.
        updated On: 17/02/23
        created By: Vrushali
    	Updated commnets: Added the support for conditional readonly and default value.
    	*/

	
	getReverseJSON: function(sysIdJson, key, conditionobj, type, reversedJson) {
        try {

            CASLogger.debug('Inside the CatalogImport.getReverseJSON: visibility Array ' + JSON.stringify(conditionobj));
            
            for (var arrtype in conditionobj) {
            var genericArr = conditionobj[arrtype]['data'];
            var conditionOn = conditionobj[arrtype]['conditionType'];
			var setVal;
            if (genericArr) {
                for (var j = 0; j < genericArr.length; j++) {
					if((conditionOn =='visibility'||conditionOn =='readonly') &&(genericArr[j].value != true) &&(type =='variable' || key.startsWith('custom_property__') )){
						setVal = false;
					}
					else{	
						if((conditionOn =='visibility'||conditionOn =='readonly') &&(genericArr[j].value != false) && type =='container' && !(key.startsWith('custom_property__'))){
							setVal=true;
						}else
							if(conditionOn =='default' && genericArr[j].value =="#unset"){
								setVal = '';
							}else{
								setVal = genericArr[j].value;
							}
					}
                    for (var k in genericArr[j]) {
                        if (typeof genericArr[j][k] == 'object') {
                            for (var m in genericArr[j][k]) {
                                //  this can restricts the support only to dropdown,textfield,decimalField and integerField
                                if (sysIdJson[m] && sysIdJson[m].type + "" != 'dropDown' && sysIdJson[m].type + "" != 'textField' && sysIdJson[m].type + "" != 'integerField' && sysIdJson[m].type + "" != 'decimalField' && sysIdJson[m].type + "" != 'checkbox')
                                    continue;
                                 if (!reversedJson[key]) {
										reversedJson[key] = [];
								}
                                    reversedJson[key].push({
                                        "key": m,
                                        "visibleValue": setVal,
                                        "condType": k,
                                        "condVal": genericArr[j][k][m],
                                        "type": type,
                                        "conditionOn": conditionOn,
                                    });
                                 
                            }
                        }
                    }
                }
            }
			}
            return reversedJson;

        } catch (e) {
            CASLogger.debug("Inside Catch Block of CatalogImport.getReverseJSON: Exception Block: " + e);
            CASLogger.error("Exception caught inside CatalogImport.getReverseJSON" + e);
        }
    },

	/* 
    	Function Name:getConditionScript
        Description: This function returns the condition script for conditional read-only and hide/unhide & default on change catalog client scripts. 
        Updated On: 17/02/2023
        created by: Vrushali
    	Updated commnets: Added the for conditional readOnly, visibility and Default.
    	*/
	
	
	getConditionScript: function(sysIdJson, condArr, supportedOps,requestScript) {
        try {
            CASLogger.debug('Inside the CatalogImport.getReverseJSON: condArr : ' + JSON.stringify(condArr));

            var visibleVal = "var visibleVal_ = false ;";
            var readonlyVal = "var readonlyVal_ = false ;";
			var defaultVal = "var defaultVal_ = '';";
           // var requestScript = ""; // Jira ticket 2981 , changes by Sachin Gavhane
            var varType = "";
            var visibleFlag = false;
            var readFlag = false;
			var defaultFlag = false;
            var conditionData = {};
            for (var n = 0; n < condArr.length; n++) {
                var visibleValue = condArr[n].visibleValue + '';
				if(visibleValue.indexOf('.000Z') == -1){
					visibleValue = condArr[n].visibleValue;
					
				}else{
					var d = new Date(visibleValue);
                    visibleValue = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth()+1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes( d.getHours() )+ ":" + this.appUtil.appendLeadingZeroes( d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes( d.getSeconds());
				}
                var condVal = condArr[n].condVal;
                varType = condArr[n].type + "";
                if (sysIdJson[condArr[n].key])
                    requestScript += "g_form.setValue('" + sysIdJson[condArr[n].key].name + "',g_form.getValue('" + sysIdJson[condArr[n].key].name + "'));";
                if (supportedOps.indexOf(condArr[n].condType) == -1)
                    continue;

                switch (condArr[n].condType) {

                    case "equals":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
                                    visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == " + condVal + ") visibleVal_ = " + visibleValue + ";";
                                else
                                    visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '" + condVal + "') visibleVal_ = " + visibleValue + ";";
                            }
                        if (condArr[n].conditionOn == 'readonly') {
                            readFlag = true;
                            if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
                                readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == " + condVal + ") readonlyVal_ = " + visibleValue + ";";
                            else
                                readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '" + condVal + "') readonlyVal_ = " + visibleValue + ";";

                        }
						if (condArr[n].conditionOn == 'default') {
							defaultFlag = true;
							if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
								defaultVal = defaultVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == " + condVal + ") defaultVal_ = '" + visibleValue + "';";
							else
								defaultVal = defaultVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '" + condVal + "') defaultVal_ = '" + visibleValue + "';";
						}
					}
                        break;

                    case "notEqual":

                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
                                    visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != " + condVal + ") visibleVal_ = " + visibleValue + ";";
                                else
                                    visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '" + condVal + "') visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
									readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != " + condVal + ") readonlyVal_ = " + visibleValue + ";";
								else
									readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '" + condVal + "') readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
								defaultFlag = true;
								if (sysIdJson[condArr[n].key].type == 'decimalField' || sysIdJson[condArr[n].key].type == 'integerField')
									defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != " + condVal + ") defaultVal_ = '" + visibleValue + "';";
								else
									defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '" + condVal + "') defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;

                    case "within":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' &&'" + condVal + "'.indexOf(g_form.getValue('" + sysIdJson[condArr[n].key].name + "')) != -1) visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' &&'" + condVal + "'.indexOf(g_form.getValue('" + sysIdJson[condArr[n].key].name + "')) != -1) readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
								defaultFlag = true;
								defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) &&'" + condVal + "'.indexOf(g_form.getValue('" + sysIdJson[condArr[n].key].name + "')) != -1) defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;

                    case ">":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') > " + condVal + ") visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') > " + condVal + ") readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
							defaultFlag = true;
							defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') > " + condVal + ") defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;

                    case ">=":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') >= " + condVal + ") visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') >= " + condVal + ") readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
								defaultFlag = true;
								defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') >= " + condVal + ") defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;

                    case "<":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') < " + condVal + ") visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') < " + condVal + ") readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
								defaultFlag = true;
								defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') < " + condVal + ") defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;

                    case "<=":
                        if (sysIdJson[condArr[n].key]){
                            if (condArr[n].conditionOn == 'visibility') {
                                visibleFlag = true;
                                visibleVal = visibleVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') <= " + condVal + ") visibleVal_ = " + visibleValue + ";";
                            }
							if (condArr[n].conditionOn == 'readonly') {
								readFlag = true;
								readonlyVal = readonlyVal + " if(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') != '' && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') <= " + condVal + ") readonlyVal_ = " + visibleValue + ";";
							}
							if (condArr[n].conditionOn == 'default') {
								defaultFlag = true;
								defaultVal = defaultVal + " if((!(g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == '' || g_form.getValue('" + sysIdJson[condArr[n].key].name + "') == ' ')) && " + " g_form.getValue('" + sysIdJson[condArr[n].key].name + "') <= " + condVal + ") defaultVal_ = '" + visibleValue + "';";
							}
						}
                        break;
                }
            }

            conditionData = {
                "requestScript": requestScript,
                "visibleVal": visibleVal,
                "readonlyVal": readonlyVal,
				"defaultVal": defaultVal,
                "CondType": varType,
                "visibleFlag": visibleFlag,
                "readFlag": readFlag,
				"defaultFlag": defaultFlag
            };

            return conditionData;

        } catch (e) {
            CASLogger.debug("Inside Catch Block of CatalogImport.getConditionScript: Exception Block: " + e);
            CASLogger.error("Exception caught inside CatalogImport.getConditionScript" + e);
        }
    },
	

    preImportCatalogSchedule: function(current) {
        try {

            CASLogger.debug('Inside CatalogImport.preImportCatalogSchedule: PreImporting of Catalog. ');
            var midserver = '';
            var endPoint = '';
            var token = '';
            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue();
                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=0&$orderby=name";
                CASLogger.debug('Inside CatalogImport.preImportCatalogSchedule: cloud endpoint: ' + endPoint);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=0&$orderby=name";
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue();
                CASLogger.debug('Inside CatalogImport.preImportCatalogSchedule: cloud endpoint: ' + endPoint + ' midserver: ' + midserver);
            }
            var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
            CASLogger.debug('Inside CatalogImport.preImportCatalogSchedule:---response: ' + response.getBody());
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error('Import::: Catalog: ' + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.preImportCatalogSchedule):");
                    } else {
                        CASLogger.error('Import::: Catalog: ' + '\n endPoint: ' + endPoint + ' REST call error found inside CatalogImport.preImportCatalogSchedule: ' + '\n Error found: ' + response.getErrorMessage());
                    }
                }

                return false;
            } else {
                var responseBody = response.getBody();
                var res = this.daoUtil.checkNull(responseBody);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.preImportCatalogSchedule :responseBody: ' + responseBody);
                    return false;
                } else {
                    CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.preImportCatalogSchedule: responseBody: ' + responseBody);
                    var jsonResponse = responseBody;
                    var obj = this.appUtil.parse(responseBody);
                    var catalogId = '';
                    var catalogDetails = obj.content.length;

                    for (var i = 0; i < catalogDetails; i++) {
                        catalogId = obj.content[i].id;
                        //CASLogger.debug('Inside for loop of catalogDetails of CatalogImport.preImportCatalogSchedule:---catalogId: ' + catalogId);
                        this.daoUtil.insert("PreImportCatalog", jsonResponse, catalogId, current.organization);
                    }

                    var pageElement = obj.totalPages;
                    for (var j = 1; j <= pageElement; j++) {


                        if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                            token = current.organization.api_token.getDecryptedValue();
                            endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                            CASLogger.debug("Inside for loop of pageElement: CatalogImport.preImportCatalogSchedule: cloud endpoint: " + endPoint);
                        }
                        if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                            endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                            midserver = current.organization.mid_server.name;
                            token = current.organization.api_token.getDecryptedValue();
                            CASLogger.debug("Inside for loop of pageElement: CatalogImport.preImportCatalogSchedule: cloud endpoint: " + endPoint + ' midserver: ' + midserver);
                        }
                        response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                        //CASLogger.debug('Inside for loop of pageElement of CatalogImport.preImportCatalogSchedule:---response: ' + response);
                        if (response.haveError()) {
                            propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                            for (s = 0; s < propertyStatus.length; s++) {
                                if (propertyStatus[s] == response.getStatusCode()) {
                                    CASLogger.error('Import::: Catalog: ' + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.preImportCatalogSchedule):");
                                } else {
                                    CASLogger.error('Import::: Catalog: ' + '\n endPoint: ' + endPoint + '\n REST call error found inside CatalogImport.preImportCatalogSchedule: ' + '\n Error found: ' + response.getErrorMessage());
                                }
                            }

                            return false;
                        } else {
                            responseBody = response.getBody();
                            var res = this.daoUtil.checkNull(responseBody);
                            if (res == false || res == 'false') {
                                CASLogger.error('Inside null/empty if block of CatalogImport.preImportCatalogSchedule :responseBody: ' + responseBody);
                                return false;
                            } else {
                                CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.preImportCatalogSchedule: responseBody: ' + responseBody);
                                jsonResponse = responseBody;
                                obj = this.appUtil.parse(responseBody);
                                catalogId = '';
                                catalogDetails = obj.content.length;
                                for (i = 0; i < catalogDetails; i++) {
                                    catalogId = obj.content[i].id;
                                    //CASLogger.debug('Inside for loop of catalogDetails2 of CatalogImport.preImportCatalogSchedule:---catalogId2: ' + catalogId );
                                    this.daoUtil.insert("PreImportCatalog", jsonResponse, catalogId, current.organization); //loop 2 for functionality
                                }
                            }
                        }
                    }

                }
                return true;
            }
        } catch (e) {
            CASLogger.error("Import::: Catalog: " + "\n endPoint: " + endPoint + "\n Exception caught inside CatalogImport.preImportCatalogSchedule" + e + ".\n Error found: " + e.stack);
            CASLogger.debug('Inside Catch Block of  CatalogImport.preImportCatalogSchedule: Exception Block: responseBody: ' + responseBody + ' catalogId: ' + catalogId);
            return "exceptionError";
        }


    },


    preImportCatalog: function(current) {
        try {
            CASLogger.debug('Inside  CatalogImport.preImportCatalog: PreImporting of Catalog. ');
            var midserver = '';
            var endPoint = '';
            var token = '';
            var projectID = current.request;
            CASLogger.debug('Inside  CatalogImport.preImportCatalog: projectID: ' + projectID);


            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue();
                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?projects=" + projectID + "&size=" + this.pageSize + "&page=0&$orderby=name";
                CASLogger.debug('Inside CatalogImport.preImportCatalog: cloud endpoint: ' + endPoint);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?projects=" + projectID + "&size=" + this.pageSize + "&page=0&$orderby=name";
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue();
                CASLogger.debug('Inside CatalogImport.preImportCatalog: endpoint: ' + endPoint + ' midserver: ' + midserver);
            }
            var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
            CASLogger.debug('Inside CatalogImport.preImportCatalog:---response: ' + response);
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error(this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.preImportCatalog):" + endPoint);
                    } else {
                        CASLogger.error('REST call error found inside CatalogImport.preImportCatalog: ' + response.getErrorMessage());
                    }
                }

                return false;
            } else {
                var responseBody = response.getBody();
                var res = this.daoUtil.checkNull(responseBody);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.preImportCatalog:responseBody: ' + responseBody);
                    return false;
                } else {
                    CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.preImportCatalog: responseBody: ' + responseBody);
                    var jsonResponse = responseBody;
                    var obj = this.appUtil.parse(responseBody);
                    var catalogId = '';
                    var catalogDetails = obj.content.length;
                    for (var i = 0; i < catalogDetails; i++) {
                        catalogId = obj.content[i].id;
                        var check = this.catalogCheck(catalogId);
                        //CASLogger.debug('Inside for loop of catalogDetail of CatalogImport.preImportCatalog:---catalogId: ' + catalogId + ' check: ' + check);
                        if (check != true) {
                            CASLogger.debug('Inside for loop of catalogDetail of CatalogImport.preImportCatalog: check: ' + check);
                            this.daoUtil.insert("PreImportCatalog", jsonResponse, catalogId, current.organization); //loop 2 for functionality
                        }
                    }
                    var pageElement = obj.totalPages;
                    for (var j = 1; j <= pageElement; j++) {
                        if (current.organization.select_automation_service == 'vRealiseAutomationCloud')
                            token = current.organization.api_token.getDecryptedValue();
                        endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?projects=" + projectID + "&size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                        CASLogger.debug('Inside for loop of pageElement:  CatalogImport.preImportCatalog: cloud endpoint: ' + endPoint);

                        if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                            endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?projects=" + projectID + "&size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                            midserver = current.organization.mid_server.name;
                            token = current.organization.api_token.getDecryptedValue();
                            CASLogger.debug('Inside for loop of pageElement:  CatalogImport.preImportCatalog: endpoint: ' + endPoint + ' midserver: ' + midserver);
                        }
                        response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                        //CASLogger.debug('Inside for loop of pageElement of CatalogImport.preImportCatalog:---response: ' + response);
                        if (response.haveError()) {
                            propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                            for (s = 0; s < propertyStatus.length; s++) {
                                if (propertyStatus[s] == response.getStatusCode()) {
                                    CASLogger.error(this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.preImportCatalog):" + endPoint);
                                } else {
                                    CASLogger.error('REST call error found inside CatalogImport.preImportCatalog: ' + response.getErrorMessage());
                                }
                            }

                            return false;
                        } else {
                            responseBody = response.getBody();
                            var res = this.daoUtil.checkNull(responseBody);
                            if (res == false || res == 'false') {
                                CASLogger.error('Inside null/empty if block of CatalogImport.preImportCatalog:responseBody: ' + responseBody);
                                return false;
                            } else {
                                CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.preImportCatalog: responseBody: ' + responseBody);
                                jsonResponse = responseBody;
                                obj = this.appUtil.parse(responseBody);
                                catalogId = '';
                                catalogDetails = obj.content.length;
                                for (i = 0; i < catalogDetails; i++) {
                                    catalogId = obj.content[i].id;
                                    var check = this.catalogCheck(catalogId);
                                    //CASLogger.debug('Inside for loop of catalogDetails of CatalogImport.preImportCatalog: Check: '+check + ' catalogId: ' + catalogId);
                                    if (check != true) {
                                        CASLogger.debug('Inside for loop of else block of catalogDetails of CatalogImport.preImportCatalog: Check: ' + check);
                                        this.daoUtil.insert("PreImportCatalog", jsonResponse, catalogId, current.organization); //loop 2 for functionality
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.preImportCatalog: Exception Block: catalogId: ' + catalogId + ' responseBody: ' + responseBody + ' projectID: ' + projectID + ' check: ' + check);
            CASLogger.error("Exception caught inside CatalogImport.preImportCatalog" + e + ". Error found" + e.stack);

        }


    },



    //Function Name:importCatalog
    //Description: To import catalog item schema and handing custom form
    //Created By:Ajay Gunjal
    //Updated By: Ajay Gunjal.

    importCatalog: function(current) {
        try {
            CASLogger.debug('Inside  CatalogImport.importCatalog: Importing of Catalog: CatalogID:' + catalogId);
            var midserver = '';
            var endPoint = '';
            var token = '';
            var catalogId = current.request;
            var CustomFormFilter = gs.getProperty(this.appUtil.configuration.properties.CustomFormFilter);
            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue();
                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "/" + catalogId + "/?expandProjects=true";
                CASLogger.debug("Inside CatalogImport.preImportCatalog: cloud endpoint: " + endPoint);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "/" + catalogId + "/?expandProjects=true";
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue();
                CASLogger.debug("Inside CatalogImport.preImportCatalog: endpoint: " + endPoint + ' midserver: ' + midserver);
            }
            var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
            CASLogger.debug('Inside CatalogImport.importCatalog:---response: ' + response.getBody());
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error('Import::: Project: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.importCatalog):");
                    } else {
                        CASLogger.error('Import::: Project: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n REST call error found inside CatalogImport.importCatalog: Error found: ' + response.getErrorMessage() + '\n statusCode: ' + response.getStatusCode() + '\n Status code: ' + response.getStatusCode());
                    }
                }

                return false;
            } else {


                var responseBody = response.getBody();
                var res = this.daoUtil.checkNull(responseBody);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.importCatalog:responseBody: ' + responseBody);
                    return false;
                } else {
                    CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.importCatalog: responseBody: ' + responseBody);
                    var jsonResponse = responseBody;

                    var isExcluded = false;
                    var parsedCatalogItem = this.appUtil.parse(jsonResponse);
                    var catalogVraId = parsedCatalogItem.id;
                    var catalogType = parsedCatalogItem.type.id;

                    CASLogger.debug('Inside else block of response.haveError(): CatalogImport.importCatalog: catalogId: ' + catalogVraId + ' catalogType: ' + catalogType);

                    if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                        token = current.organization.api_token.getDecryptedValue();
                        endPoint = current.organization.cas_url + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId + "&formType=requestForm";
                        CASLogger.debug('Inside else block of response.haveError(): CatalogImport.importCatalog: cloud endpoint: ' + endPoint);
                    }
                    if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                        endPoint = current.organization.hostname + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId + "&formType=requestForm";
                        midserver = current.organization.mid_server.name;
                        token = current.organization.api_token.getDecryptedValue();
                        CASLogger.debug('Inside else block of response.haveError(): CatalogImport.importCatalog: endpoint: ' + endPoint);
                    }

                    ////'body'='schema' tag from response received by making REST call using 'catalog API' using version.
                    var body = this.appUtil.stringify(parsedCatalogItem.schema);
                    CASLogger.debug('Inside CatalogImport.importCatalog:----- body:---- ' + body);
                    body = body.replaceAll("encrypted", "writeOnly");
                    response = this.appUtil.makeApiCall(endPoint, 'post', body, midserver, "application/json", "application/json", 'Bearer ' + token);
                    if (response.haveError()) {
                        propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                        for (s = 0; s < propertyStatus.length; s++) {
                            if (propertyStatus[s] == response.getStatusCode()) {
                                CASLogger.error('Import::: Project: ' + '\n catalogId: ' + catalogVraId + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.importCatalog):");
                            } else {
                                CASLogger.error('Import::: Project: ' + '\n catalogId: ' + catalogVraId + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n REST call error found inside CatalogImport.importCatalog: \n Error found: ' + response.getErrorMessage() + '\n statusCode: ' + response.getStatusCode());
                            }
                        }

                        return false;
                    } else {
                        var customResponse = response.getBody();
                        var res = this.daoUtil.checkNull(customResponse);
                        if (res == false || res == 'false') {
                            CASLogger.error('Inside null/empty if block of CatalogImport.importCatalog:customResponse: ' + customResponse);
                            return false;
                        } else {
                            CASLogger.debug('Inside Else Block of response.haveError(): CatalogImport.importCatalog: customResponse: ' + customResponse);
                            var objSchema = this.appUtil.parse(customResponse);
                            var schema = objSchema.model.schema;
                            var pageSchema = objSchema.model.layout.pages;
                            var length = objSchema.model.layout.pages.length; //page length ie.e total containers
                            for (var i = 0; i < length; i++) {
                                var name = objSchema.model.layout.pages[i].id;
                                var title = objSchema.model.layout.pages[i].title;
                                var length2 = objSchema.model.layout.pages[i].sections.length;
                                for (var j = 0; j < length2; j++) {
                                    var length3 = objSchema.model.layout.pages[i].sections[j].fields.length; // details of form field i.e datatype, field id(name),state(visible, read-only)
                                    for (var k = 0; k < length3; k++) {
                                        for (var key in schema) {
                                            if (key == objSchema.model.layout.pages[i].sections[j].fields[k].id) {
                                                if (key == 'description' || key == 'project') {
                                                    //do nothing
                                                } else {
                                                    //displayValue == 'valuePicker' ||
                                                    var displayValue = objSchema.model.layout.pages[i].sections[j].fields[k].display;
                                                    if (displayValue == 'multiValuePicker') {
                                                        isExcluded = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (isExcluded) {
					CASLogger.error("Error caught inside CatalogImport.importCatalog. The VMware Aria Automation Plug-in does not support the Multi-value Picker field type. We will skip this catalog import: catalogId: " + catalogId + "\n endPoint: " + endPoint  );
                    var catItem = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                    CASLogger.debug('Inside if block of table.catalogItem gliderecord of CatalogImport.importCatalog. ');
                    catItem.addQuery('cas_uid', catalogVraId);
                    catItem.addQuery('organisation_name', current.organization);
                    catItem.query();
                    if (catItem.next()) {
                        catItem.deleteRecord();
                    }
                } else {
                    this.daoUtil.insert("ImportCatalog", jsonResponse, catalogId, current.organization);
                }
                return true;
            }
        } catch (e) {
            CASLogger.error("Import::: Project: " + "\n catalogId: " + catalogVraId + "\n catalogId: " + catalogId + "\n endPoint: " + endPoint + "\n Exception caught inside CatalogImport.importCatalog" + e + ".\n Error found" + e.stack);
            CASLogger.debug('Inside Catch Block of CatalogImport.importCatalog: Exception Block: catalogId: ' + catalogVraId + ' catalogType: ' + catalogType + ' catalogId: ' + catalogId + ' responseBody: ' + responseBody + ' schema: ' + schema + ' pageSchema: ' + pageSchema + ' customResponse: ' + customResponse);
            return "exceptionError";
        }
    },


    //This returns whether catalog item is 'insert' or 'update'
    processCASCatalog: function(current) {
        try {
            CASLogger.debug('Inside  CatalogImport.processCASCatalog: Used for processing the catalog. ');
            return this.daoUtil.catalogItemCheck(current);
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.processCASCatalog: Exception Block.');
            CASLogger.error("Import::: Catalog: Exception caught inside CatalogImport.processCASCatalog " + e + ".\n Error found" + e.stack);
            return "exceptionError";
        }
    },


    //current=  Queue table record Topic='ImportCatalog'

    /*
    Function Name: createCatalog
    Comments: This function used to create the Catalog.
    Updated On: 22 April 2022
    Updated By: Zabiulla M
    Update Comments: Added error handling logic to the function. 
    */
    createCatalog: function(current) {
        try {
            CASLogger.debug('Inside the CatalogImport.createCatalog');
            var parsedCatalogItem = this.appUtil.parse(current.response);
            var versions = this.getCatalogVersions(current);
            //getProjectsId function will find out all the projects id's catlog is associated with.

            var projectsIdDetails = this.getProjectsId(parsedCatalogItem);
            var projectid = parsedCatalogItem.projects[0].id;
            var catalogVraId = parsedCatalogItem.id;
            var catalogType = parsedCatalogItem.type.id;
            var contentSource = parsedCatalogItem.type.name;
			var iconID = parsedCatalogItem.iconId;
            CASLogger.debug('Inside the CatalogImport.createCatalog: versions: ' + versions + ' response: ' + current.response + ' catalogId: ' + catalogVraId + ' catalogType: ' + catalogType);

            var projectSysid = '';
            var projectgr = this.daoUtil.genericGRquery(this.appUtil.configuration.table.project, 'project_id=' + projectid, '1');
            if (projectgr.next()) {
                projectSysid = projectgr.sys_id;
                CASLogger.debug('Inside CatalogImport.createCatalog:---projectSysid: ' + projectSysid);

            }

            var catalogItemName = parsedCatalogItem.name;
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var checkATF = gs.getProperty(this.appUtil.configuration.properties.ATF);
            var ATF = '';
            if (checkATF == 'true') {
                ATF = 'ATF';
                CASLogger.debug('Inside CatalogImport.createCatalog:---checkATF: ' + checkATF);

            }

            var attr = {
                "sys_scope": app_scope,
                "workflow": gs.getProperty(this.appUtil.configuration.properties.catalogRequestWorkflow),
                "name": parsedCatalogItem.name,
                "active": true,
                "use_sc_layout": false,
                "versions": versions,
                "projects_id": projectsIdDetails,
                "no_quantity": true,
                "availability": "on_both",
                "cas_uid": parsedCatalogItem.id,
                "sc_catalogs": (gs.getProperty(this.appUtil.configuration.properties.catalogSysID).trim()),
                "category": projectSysid,
                "short_description": parsedCatalogItem.description,
                "meta": ATF,
                "organisation_name": current.organization
            };

            //var categorysysid = this.daoUtil.insertCatalolgCategory(parsedCatalogItem);
            var catItem = new sn_sc.CatItem();
            catItem.setTableName('x_vmw_cloudservice_cas_catalog_items');
            catItem.setAttributes(attr);
            //catItem.setCategories(categorysysid);
            var catalog = catItem.create(true);

            //Create relationship between Catalog and categories in sc_cat_item_categories table
            if (catalog) {
				if (!(iconID == "undefined" || iconID == undefined)) {
                    this.fetchIcon(catalog, iconID, current);
                }
                this.daoUtil.insertCatalolgCategory(catalog, parsedCatalogItem);
                this.createDefaultVariables(catalog);
                CASLogger.debug('Inside CatalogImport.createCatalog:---catalog' + catalog);

                if (versions == "undefined," || versions == undefined || versions == 'undefined,') {
                    this.getcustomformschema(current, catalog, catalogVraId, '', catalogType, current.response, contentSource);
                } else {
                    this.parseCatalogVariables(current, catalog, catalogVraId, '', contentSource);
                }
                this.createDefaultCatalogClientScript(catalog, catalogItemName);
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createCatalog: Exception Block: ' + ' versions: ' + versions + ' projectid: ' + projectid + ' catalogId: ' + catalogVraId + ' catalogType: ' + catalogType + ' projectSysid: ' + projectSysid + ' catalogItemName: ' + catalogItemName + ' app_scope: ' + app_scope + ' attr: ' + attr + ' catalog: ' + catalog);
            CASLogger.error("Import::: Catalog: '+'\n projectid: ' + projectid + '\n catalogId: ' + catalogVraId + '\n catalogItemName: ' + catalogItemName +'\n Exception caught inside CatalogImport.createCatalog " + e + ".\n Error found" + e.stack);
        }
    },

    /*
       Function Name: updateCatalog
       Comments: This function used to update the Catalog.
       Updated On: 22nd April 2022
       Updated By: Zabiulla M
       Update Comments: Added error handling logic to the function.
       */

    updateCatalog: function(current) {
        try {

            CASLogger.debug('Inside the CatalogImport.updateCatalog:---response: ' + current.response);
            var parsedCatalogItem = this.appUtil.parse(current.response);
            var catalogItemName = parsedCatalogItem.name;
            var versions = this.getCatalogVersions(current);
            //getProjectsId function will find out all the projects id's catlog is associated with.
            var projectsIdDetails = this.getProjectsId(parsedCatalogItem);
            var projectid = parsedCatalogItem.projects[0].id;
            var catalogVraId = parsedCatalogItem.id;
            var catalogType = parsedCatalogItem.type.id;
            var contentSource = parsedCatalogItem.type.name;
			var iconID = parsedCatalogItem.iconId;
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            CASLogger.debug('Inside CatalogImport.updateCatalog: catalogId: ' + catalogVraId + ' catalogType: ' + catalogType + ' catalogItemName: ' + catalogItemName);

            var projectSysid = '';
            var projectgr = this.daoUtil.genericGRquery(this.appUtil.configuration.table.project, 'project_id=' + projectid, '1');
            if (projectgr.next()) {
                projectSysid = projectgr.sys_id;
                CASLogger.debug('Inside CatalogImport.updateCatalog:---projectSysid: ' + projectSysid);

            }

            //retriving the previous versions of the Catalog Item
            var previousVersions = '';
            var deletedVersion = '';
            var deletedPreviousVersion = '';
            var grCatItem = this.daoUtil.genericGRquery(this.appUtil.configuration.table.catalogItem, 'cas_uid=' + catalogVraId, '1');
            if (grCatItem.next()) {
                previousVersions = grCatItem.versions;
                deletedPreviousVersion = grCatItem.u_deleted_version;
                CASLogger.debug('Inside CatalogImport.updateCatalog:---previousVersions: ' + previousVersions + '---deletedPreviousVersion: ' + deletedPreviousVersion);
                var latestVersion = previousVersions.split(",");
                for (var i = 0; i < latestVersion.length; i++) {

                    if (versions.indexOf(latestVersion[i]) == -1) {
                        deletedVersion = deletedVersion + latestVersion[i] + ',';
                    }
                }

            }

            var uniqueArray = deletedPreviousVersion + deletedVersion;
            uniqueArray = uniqueArray.split(',');
            uniqueArray = this.arrayUtil.unique(uniqueArray);
            if (parsedCatalogItem.id) {
                var casCatalogItemGR = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                casCatalogItemGR.addQuery('cas_uid', parsedCatalogItem.id);
                casCatalogItemGR.addQuery('organisation_name', current.organization);
                casCatalogItemGR.query();
                if (casCatalogItemGR.next()) {
                    CASLogger.debug('Inside table.catalogItem gliderecord of CatalogImport.updateCatalog. ');

                    var attr = {
                        "sys_scope": app_scope,
                        "name": parsedCatalogItem.name,
                        "versions": versions,
						"active": true,
                        "projects_id": projectsIdDetails,
                        "category": projectSysid,
                        "short_description": parsedCatalogItem.description,
                        "organisation_name": current.organization,
                        "u_deleted_version": uniqueArray + ''
                    };
                    var catItem = new sn_sc.CatItem(casCatalogItemGR.sys_id);
                    catItem.setTableName('x_vmw_cloudservice_cas_catalog_items');
                    catItem.update(attr, true);
                    var catalog = casCatalogItemGR.sys_id;

                    if (catalog) {
						if (!(iconID == "undefined" || iconID == undefined)) {
                            this.fetchIcon(catalog, iconID, current);
                        }
                        this.daoUtil.deleteClientScript(catalog);
                        this.daoUtil.insertCatalolgCategory(catalog, parsedCatalogItem);
                        this.daoUtil.reconcileCatalogCategory(catalog, parsedCatalogItem);
                        CASLogger.debug('Inside CatalogImport.updateCatalog: catalog: ' + catalog + ' versions: ' + versions);

                        if (versions == "undefined," || versions == undefined || versions == 'undefined,') {
                            this.getcustomformschema(current, catalog, catalogVraId, '', catalogType, current.response, contentSource);


                        } else {
                            this.parseCatalogVariables(current, catalog, catalogVraId, previousVersions, contentSource);

                        }
                        this.createDefaultCatalogClientScript(catalog, catalogItemName);
                    }
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.updateCatalog: Exception Block: ' + ' versions: ' + versions + ' projectid: ' + projectid + ' catalogId: ' + catalogVraId + ' catalogType: ' + catalogType + ' projectSysid: ' + projectSysid + ' catalogItemName: ' + catalogItemName + ' app_scope: ' + app_scope + ' attr: ' + attr + ' previousVersions: ' + previousVersions + 'deletedPreviousVersion: ' + deletedPreviousVersion + ' UniqueArray: ' + uniqueArray + '');
            CASLogger.error("Import::: Catalog: ' + '\n projectid: ' + projectid + '\n catalogId: ' + catalogVraId +' projectSysid: ' + projectSysid + ' catalogItemName: ' + catalogItemName +'\n Exception caught inside CatalogImport.updateCatalog " + e + ".\n Error found" + e.stack);
        }
    },

    /*
    Function Name: getProjectsId
    Description: This function is used to  find out all the projects id's associated with Catalog Item.
    Created On: 03 Dec 2021
    Created By: Shivam Goyal
	Release : ITSM 8.6
    
    */
    getProjectsId: function(parsedCatalogItem) {
        try {
            CASLogger.debug('Inside the CatalogImport.getProjectsId: Get ProjectsId Details ');
            var projectsId = '';
            for (var i = 0; i < parsedCatalogItem.projects.length; i++) {

                projectsId = projectsId + parsedCatalogItem.projects[i].id + ',';
            }
            return projectsId.toString();
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.getProjectsId: Exception Block: ' + 'projectid: ' + projectid);
            CASLogger.error("Exception caught inside CatalogImport.getProjectsId " + e);
        }
    },



    getCatalogVersions: function(current) {
        try {
            CASLogger.debug('Inside the CatalogImport.getCatalogVersions: Get Versions of Catalog. ');
            var versions = '';
            var catalogID = current.request;
            CASLogger.debug("----------------inside getCatalogVersions CATALOG ID-------------->" + catalogID);
            var midserver = '';
            var endPoint = '';
            var token = '';

            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue();
                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/?page=0&size=" + this.pageSize;
                CASLogger.debug("------------inside  API call build--------" + endPoint + "--------------------" + catalogID);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/?page=0&size=" + this.pageSize;
                CASLogger.debug("------------inside api call building MIDSERVER---------" + endPoint + "----------" + catalogID);
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue();
            }
            var checkATF = gs.getProperty(this.appUtil.configuration.properties.ATF);
            CASLogger.debug("----------------inside getCatalogVersions CheckATF-------------->" + checkATF);
            var response = '';
            if (checkATF == 'true') {

                endPoint = current.organization.server_url + this.appUtil.configuration.ATF.catalogItem + catalogID + "/versions";

                midserver = current.organization.user_name;
                token = current.organization.password.getDecryptedValue();

                response = this.appUtil.makeApiCallATF(endPoint, 'get', '', midserver, token);
            } else {
                response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                CASLogger.debug("--------------Inside after API call---------" + catalogID);
            }
            CASLogger.debug('Inside CatalogImport.getCatalogVersions:---response: ' + response);
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error(this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.getCatalogVersions):" + endPoint);
                        CASLogger.debug("------------INSIDE IF API CALL ERROR First call----------" + response.getStatusCode() + "--------" + catalogID);
                    } else {
                        CASLogger.error('REST call error found inside CatalogImport.getCatalogVersions: ' + response.getErrorMessage());
                        CASLogger.debug("------------INSIDE ELSE API CALL ERROR First call----------" + response.getStatusCode() + "--------" + catalogID);
                    }
                }

                return 'No Versions Found';
            } else {
                var responseBody = response.getBody();
                var res = this.daoUtil.checkNull(responseBody);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.getCatalogVersions:responseBody: ' + responseBody);
                    return '';
                } else {
                    CASLogger.debug('----------Inside RESPONSEBODY 1---------' + responseBody + "-----------" + catalogID);
                    var parsedVersions = this.appUtil.parse(responseBody);
                    CASLogger.debug("-------------------PARSED RESPONSE BODY-----------------------" + parsedVersions.content.length + "--------------------" + catalogID);
                    for (var i = 0; i < parsedVersions.content.length; i++) {
                        CASLogger.debug("-----------version list---------" + versions + parsedVersions.content[i].id + ',' + "--------" + catalogID);
                        versions = versions + parsedVersions.content[i].id + ',';

                    }
                    CASLogger.debug("-------------------Response page length------" + parsedVersions.totalPages + "-------" + catalogID);
                    if (parsedVersions.totalPages > 1) {
                        for (var j = 1; j < parsedVersions.totalPages.length; j++) {
                            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                                token = current.organization.api_token.getDecryptedValue();
                                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/?page='+j+'&size=" + this.pageSize;
                                CASLogger.debug("------------inside  API call build second page-------" + endPoint + "--------------------" + catalogID);
                            }
                            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/?page='+j+'&size=" + this.pageSize;
                                CASLogger.debug("------------inside api call building MIDSERVER second page---------" + endPoint + "----------" + catalogID);
                                midserver = current.organization.mid_server.name;
                                token = current.organization.api_token.getDecryptedValue();
                            }
                            var pageResponse = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                            CASLogger.debug("--------------Inside after API call second page---------" + catalogID);
                            if (pageResponse.haveError()) {
                                CASLogger.error('REST call error found inside CatalogImport.getCatalogVersions pagination: ' + pageResponse.getErrorMessage());
                                CASLogger.debug("------------INSIDE API CALL ERROR second call----------" + response.getStatusCode() + "--------" + catalogID);
                                return 'No Versions Found';
                            } else {
                                var pageResponseBody = pageResponse.getBody();
                                var res = this.daoUtil.checkNull(pageResponseBody);
                                if (res == false || res == 'false') {
                                    CASLogger.error('Inside null/empty if block of CatalogImport.getCatalogVersions:pageResponseBody: ' + pageResponseBody);
                                    return '';
                                } else {
                                    CASLogger.debug('----------RESPONSE BODY 2---------' + pageResponseBody + "-----------" + catalogID);
                                    var parsedPageVersions = this.appUtil.parse(pageResponseBody);
                                    CASLogger.debug("-------------------PARSED RESPONSE BODY 2-----------------------" + parsedPageVersions.content.length + "--------------------" + catalogID);
                                    for (var i = 0; i < parsedPageVersions.content.length; i++) {
                                        CASLogger.debug("-----------Second version list ---------" + versions + parsedPageVersions.content[i].id + ',' + "--------" + catalogID);
                                        versions = versions + parsedPageVersions.content[i].id + ',';
                                    }
                                }
                            }
                        }

                    }
                    CASLogger.debug("------------Inside version return to catalog item-----------" + versions + "-----" + catalogID);
                    return versions;
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.getCatalogVersions: Exception Block: versions: ' + versions + ' catalogID: ' + catalogID + ' checkATF: ' + checkATF + ' responseBody: ' + responseBody + ' pageResponseBody: ' + pageResponseBody);
            CASLogger.error("Exception caught inside CatalogImport.getCatalogVersions " + e + ". Error found" + e.stack);
            CASLogger.debug("-------------Inside getCatalogVersions exception ----------" + catalogID + "--------------" + responseBody + "----------" + parsedVersions.content.length);
            return 'No Versions Found';
        }

    },

    /*	
    Function Name :createContainerStart
    Comments: This function is used to create the Container Start.
    Updated On:22/02/2022
    Updated By:Shivam Goyal
	Updated commnets: Change Order for  the Custom Container start.
    */

    createContainerStart: function(catalog, name, title, order, version, visible, catalogVraId, custom, actionId, day2Version , schema) {
        try {
            CASLogger.debug('Inside the CatalogImport.createContainerStart:---catalog: ' + catalog);
            var servicenowName;
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var varName = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            CASLogger.debug('Inside createContainerStart varName:  ' + varName + '----- version:  ' + version);


            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogVraId == '') {
                    servicenowName = varName + '__' + day2Version;
                } else {
                    servicenowName = varName;
                }
            } else {
                var varVersion = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                servicenowName = varName + '__' + varVersion;

            }

            CASLogger.debug('Inside createContainerStart -----servicenowName: ' + servicenowName);
            var containerStartGR = new GlideRecord(this.appUtil.configuration.table.variable);
            containerStartGR.addQuery("cat_item", catalog);
            containerStartGR.addQuery("type", '19');

            if (custom == 'false') {
                containerStartGR.addQuery("name", servicenowName);
                containerStartGR.addQuery("x_vmw_cloudservice_versions", version + ",");
                if (catalogVraId == '') {
                    containerStartGR.addQuery('x_vmw_cloudservice_vra_day2_action', actionId);
                }
            } else {
                containerStartGR.addQuery('name', name);
            }

            containerStartGR.query();

            if (containerStartGR.next()) {
                if (custom == 'false') {
                    containerStartGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                    containerStartGR.type = '19';
                    containerStartGR.display_title = 'true';
                    containerStartGR.cat_item = catalog;
                    containerStartGR.active = 'true';
                    containerStartGR.order = this.order;
                    this.order = this.order + 3;
                    containerStartGR.x_vmw_cloudservice_versions = version + ",";
                    containerStartGR.visible_standalone = 'true';
                    containerStartGR.visible_bundle = 'true';
                    containerStartGR.visible_guide = 'true';
                    containerStartGR.visible_summary = 'true';
                    containerStartGR.x_vmw_cloudservice_field_visibility = visible;
                    containerStartGR.question_text = title;
                    containerStartGR.name = servicenowName;
                    containerStartGR.layout = 'normal';
					if (!(schema == "" ) && !(schema.signpost == undefined || schema.signpost == "undefined")){
						containerStartGR.help_text = schema.signpost.split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
						containerStartGR.show_help = true;
					}
                    if (catalogVraId == '') {
                        containerStartGR.x_vmw_cloudservice_vra_day2_action = actionId;
                        containerStartGR.x_vmw_cloudservice_vra_day2_version = day2Version;
                    }
                    containerStartGR.update();
                }
            } else {

                containerStartGR.initialize();
                containerStartGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                containerStartGR.type = '19';
                containerStartGR.display_title = 'true';
                containerStartGR.cat_item = catalog;
                containerStartGR.active = 'true';
                containerStartGR.visible_standalone = 'true';
                containerStartGR.visible_bundle = 'true';
                containerStartGR.visible_guide = 'true';
                containerStartGR.visible_summary = 'true';
                containerStartGR.layout = 'normal';
                if (custom == 'false') {
                    containerStartGR.x_vmw_cloudservice_field_visibility = visible;
                    containerStartGR.order = this.order;
                    this.order = this.order + 3;
                    containerStartGR.question_text = title;
                    containerStartGR.name = servicenowName;
                    containerStartGR.x_vmw_cloudservice_versions = version + ',';								
					if (!(schema == "") && !(schema.signpost == undefined || schema.signpost == "undefined")){						
						containerStartGR.help_text = schema.signpost.split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
						containerStartGR.show_help = true;
					}
                    if (catalogVraId == '') {
                        containerStartGR.x_vmw_cloudservice_vra_day2_action = actionId;
                        containerStartGR.x_vmw_cloudservice_vra_day2_version = day2Version;
                    }
                } else {
                    containerStartGR.order = '10001';
                    containerStartGR.name = name;
                    containerStartGR.question_text = 'Custom_Fields ';
                }

                var data = containerStartGR.insert();
                CASLogger.debug('Inside CatalogImport.createContainerStart:---containerStartGR: ' + data);
            }


            return servicenowName;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createContainerStart: Exception Block: catalog: ' + catalog + ' name: ' + name + ' title: ' + title + ' version: ' + version + ' visible: ' + visible + ' varVersion: ' + varVersion + ' varName: ' + varName);
            CASLogger.error("Exception caught inside CatalogImport.createContainerStart " + e + ". Error found" + e.stack);
        }
    },
    /*	
    Function Name :createContainerEnd
    Comments: This function is used to create the Container End
    Updated On:21/02/2022
    Updated By:Shivam Goyal
	Updated commnets: Change Order for  the Custom Container end.
    */

    createContainerEnd: function(catalog, name, version, visible, catalogVraId, custom, actionId, day2Version) {
        try {

            CASLogger.debug('Inside the CatalogImport.createContainerEnd:---catalog: ' + catalog);
            var servicenowName;
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var varName = name.replace(rgx, ' ').trim().replaceAll(' ', '_');
            CASLogger.debug('Inside CatalogImport.createContainerEnd catalog: ' + catalog + ' VarName: ' + varName + ' version: ' + version);

            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogVraId == '') {
                    servicenowName = varName + '__' + day2Version + '_end';
                } else {
                    servicenowName = varName + '_end';
                }
            } else {
                var varVersion = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                servicenowName = varName + '__' + varVersion + '_end';
            }

            CASLogger.debug('Inside CatalogImport.createContainerEnd servicenowName:  ' + servicenowName);

            var containerEndGR = new GlideRecord(this.appUtil.configuration.table.variable);
            containerEndGR.addQuery("cat_item", catalog);
            containerEndGR.addQuery("type", '20');
            if (custom == 'false') {
                containerEndGR.addQuery("name", servicenowName);
                containerEndGR.addQuery("x_vmw_cloudservice_versions", version + ",");
                if (catalogVraId == '') {
                    containerEndGR.addQuery('x_vmw_cloudservice_vra_day2_action', actionId);
                }
            } else {
                containerEndGR.addQuery("name", name);
            }
            containerEndGR.query();
            if (containerEndGR.next()) {
                if (custom == 'false') {
                    containerEndGR.name = servicenowName;
                    containerEndGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                    containerEndGR.type = '20';
                    containerEndGR.cat_item = catalog;
                    containerEndGR.active = 'true';
                    containerEndGR.x_vmw_cloudservice_field_visibility = visible;
                    containerEndGR.x_vmw_cloudservice_versions = version + ',';
                    containerEndGR.order = this.order;
                    this.order = this.order + 3;
                    if (catalogVraId == '') {
                        containerEndGR.x_vmw_cloudservice_vra_day2_action = actionId;
                        containerEndGR.x_vmw_cloudservice_vra_day2_version = day2Version;
                    }
                    containerEndGR.update();
                }
            } else {
                containerEndGR.initialize();
                containerEndGR.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
                containerEndGR.type = '20';
                containerEndGR.cat_item = catalog;
                containerEndGR.active = 'true';
                if (custom == 'false') {
                    containerEndGR.name = servicenowName;
                    containerEndGR.x_vmw_cloudservice_field_visibility = visible;
                    containerEndGR.x_vmw_cloudservice_versions = version + ',';
                    if (catalogVraId == '') {
                        containerEndGR.x_vmw_cloudservice_vra_day2_action = actionId;
                        containerEndGR.x_vmw_cloudservice_vra_day2_version = day2Version;
                    }
                    containerEndGR.order = this.order;
                    this.order = this.order + 3;
                } else {
                    containerEndGR.name = name;
                    containerEndGR.order = '10100';
                }
                var data = containerEndGR.insert();
                CASLogger.debug('Inside CatalogImport.createContainerEnd:---containerEndGR: ' + data);
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createContainerEnd: Exception Block: catalog: ' + catalog + ' name: ' + name + ' version: ' + version + ' visible: ' + visible + ' varName: ' + varName + ' varVersion: ' + varVersion);
            CASLogger.error("Exception caught inside CatalogImport.createContainerEnd " + e + ". Error found" + e.stack);
        }
    },


    createDefaultVariables: function(catalog) {
        try {
            CASLogger.debug('Inside the CatalogImport.createDefaultVariables:---catalog: ' + catalog);
            var variableset = gs.getProperty(this.appUtil.configuration.properties.variableSetSysID);
            var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            var varset = new sn_sc.CatalogItemVariableSetM2M();
            var attr = {
                'variable_set': variableset,
                'sc_cat_item': catalog,
                'sys_scope': app_scope,
                'order': 2
            };
            CASLogger.debug('Inside the CatalogImport.createDefaultVariables:---attr: ' + attr);
            varset.setAttributes(attr);
            varset.create(true);

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createDefaultVariables: Exception Block: catalog: ' + catalog + ' variableset: ' + variableset + ' app_scope: ' + app_scope + ' attr: ' + attr);
            CASLogger.error("Exception caught inside CatalogImport.createDefaultVariables " + e + ". Error found" + e.stack);

        }
    },



    //current=  Queue table record withTopic='CatalogImport'
    //catalog= sys id of catalog item
    parseCatalogVariables: function(current, catalog, catalogVraId, previousVersions, contentSource) {
        try {
            CASLogger.debug('Inside the CatalogImport.parseCatalogVariables:---response: ' + current.response + ' catalog: ' + catalog + ' catalogId: ' + catalogVraId + ' previousVersions: ' + previousVersions +"contentSource:"+contentSource);
            var obj = this.appUtil.parse(current.response);
            var catalogType = obj.type.id;

            var catalogversion = '';
            var grCatItem = this.daoUtil.genericGRquery(this.appUtil.configuration.table.catalogItem, 'sys_id=' + catalog, '1');
            if (grCatItem.next()) {
                catalogversion = grCatItem.versions;
                CASLogger.debug('Inside CatalogImport.parseCatalogVariables:---catalogversion: ' + catalogversion);

            }
            var catalogID = current.request; //this is id of catalog item
            CASLogger.debug('Inside parseCatalogVariables----- catalogID: ' + catalogID);
            var midserver;
            var token;
            var endpoint;
            var response;

            var versionArr = catalogversion.split(",");
            versionArr = versionArr.slice(0, -1);
            CASLogger.debug('Inside parseCatalogVariables----- versionArr: ' + versionArr);

            //caalling the method for eliminating the versions which are unreleased from VMware Aria Automation.
            if (previousVersions != '') {
                this.deleteCatalogVersions(previousVersions, versionArr, catalog);
            }

            //REST call using catalog API to get catalog item schema based on version
            for (var i = 0; i < versionArr.length; i++) {

                if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                    endpoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/" + versionArr[i] + "/?expandProjects=true";
                    token = current.organization.api_token.getDecryptedValue();
                    CASLogger.debug('Inside CatalogImport.parseCatalogVariables: cloud endpoint: ' + endpoint);
                }
                if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                    endpoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "/" + catalogID + "/versions/" + versionArr[i] + "/?expandProjects=true";
                    midserver = current.organization.mid_server.name;
                    token = current.organization.api_token.getDecryptedValue();
                    CASLogger.debug('Inside CatalogImport.parseCatalogVariables: endpoint: ' + endpoint + ' midserver: ' + midserver);
                }
                var checkATF = gs.getProperty(this.appUtil.configuration.properties.ATF);
                if (checkATF == 'true') {
                    endpoint = current.organization.server_url + this.appUtil.configuration.ATF.catalogItem + catalogID + "/versions/" + versionArr[i];

                    midserver = current.organization.user_name;
                    token = current.organization.password.getDecryptedValue();
                    response = this.appUtil.makeApiCallATF(endpoint, 'get', '', midserver, token);
                } else {
                    response = this.appUtil.makeApiCall(endpoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                }
                //response = this.appUtil.makeApiCall(endpoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                CASLogger.debug('Inside CatalogImport.parseCatalogVariables:---response: ' + response);
                if (response.haveError()) {
                    var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                    for (var s = 0; s < propertyStatus.length; s++) {
                        if (propertyStatus[s] == response.getStatusCode()) {
                            CASLogger.error(this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.parseCatalogVariables):" + endpoint);
                        } else {
                            CASLogger.error('REST call error found inside CatalogImport.parseCatalogVariables: ' + response.getErrorMessage());
                        }
                    }

                    return;
                } else {
                    var responseBodyBlue = response.getBody();
                    CASLogger.debug('Inside Else parseCatalogVariables----- responseBodyBlue: ' + responseBodyBlue);

                    this.getcustomformschema(current, catalog, catalogVraId, versionArr[i], catalogType, responseBodyBlue, contentSource);

                }

            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.parseCatalogVariables: Exception Block: catalogType: ' + catalogType + ' versionArr: ' + versionArr + ' catalogID: ' + catalogID + ' responseBodyBlue: ' + responseBodyBlue + ' checkATF: ' + checkATF);
            CASLogger.error("Exception caught inside CatalogImport.parseCatalogVariables " + e + ". Error found" + e.stack);
        }
    },


    //method for eliminating the versions which are unreleased from VMware Aria Automation.	
    deleteCatalogVersions: function(previousVersions, versionArr, catalog) {
        try {

            var previousVersionsArr = previousVersions.split(',').slice(0, -1);
            CASLogger.debug('Inside the CatalogImport.deleteCatalogVersions: previousVersionsArr: ' + previousVersionsArr + ' catalog: ' + catalog);
            var unreleaseVersionsArr = [];

            //creating the unreleased version's array
            previousVersionsArr.map(function(version) {
                if ((versionArr.indexOf(version) == -1)) unreleaseVersionsArr.push(version);
            });

            CASLogger.debug('Inside CatalogImport.deleteCatalogVersions:---unreleaseVersionsArr: ' + unreleaseVersionsArr);

            for (var j = 0; j < unreleaseVersionsArr.length; j++) {
                this.daoUtil.deleteUnreleaseVersionVariable(catalog, unreleaseVersionsArr[j]);
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.deleteCatalogVersions: Exception Block: previousVersionsArr: ' + previousVersionsArr + ' versionArr: ' + versionArr + ' unreleaseVersionsArr: ' + unreleaseVersionsArr);
            CASLogger.error("Exception caught inside CatalogImport.deleteCatalogVersions" + e + ". Error found" + e.stack);
        }
    },

    /*
    	Function Name : getcustomformschema
    	Comments: 'response'=catalog schema received by making REST call using 'catalog API' using version
    	Updated On: 26/05/2021
    	Updated By: Ayush
    	Update Comments : Handled additional parameter in endpoint i.e which is received in case of vRO workflows catalogs.
    	*/

    getcustomformschema: function(current, catalog, catalogVraId, versions, catalogType, response, contentSource) {

        try {
            CASLogger.debug('Inside the CatalogImport.getcustomformschema :---response: ' + response);
            var parsedCatalogItem = this.appUtil.parse(response);

            var formid = parsedCatalogItem.formId;
            var midserver;
            var token;
            var endpoint;

            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue();
				if(versions!=''){
					catalogType= catalogType + '.version';
					endPoint = current.organization.cas_url + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId +"%2F" + versions + "&formType=requestForm";
				}else{
					endPoint = current.organization.cas_url + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId + "&formType=requestForm";
				}
                CASLogger.debug('Inside CatalogImport.getcustomformschema : cloud endpoint: ' + endPoint);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {
				if(versions!=''){
					catalogType= catalogType + '.version';
					endPoint = current.organization.hostname + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId +"%2F" + versions +"&formType=requestForm";
				}else{
					endPoint = current.organization.hostname + this.appUtil.configuration.api.customform + catalogType + "&sourceId=" + catalogVraId + "&formType=requestForm";
				}
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue();
                CASLogger.debug('Inside CatalogImport.getcustomformschema : endpoint: ' + endPoint + ' midserver: ' + midserver);
            }

            var obj = this.appUtil.parse(response);
            ////'body'='schema' tag from response received by making REST call using 'catalog API' using version
            var body = this.appUtil.stringify(obj.schema);
            CASLogger.debug('Inside the CatalogImport.getcustomformschema: body: ' + body);
            body = body.replaceAll("encrypted", "writeOnly");
            checkATF = gs.getProperty(this.appUtil.configuration.properties.ATF);
            CASLogger.debug('Inside getcustomformschema----CheckATF--- ' + checkATF);
            if (checkATF == 'true') {
                endPoint = current.organization.server_url + this.appUtil.configuration.ATF.catalogItem + catalogVraId + "/variableschema";
                midserver = current.organization.user_name;
                token = current.organization.password.getDecryptedValue();
                response = this.appUtil.makeApiCallATF(endPoint, 'post', body, midserver, token);
            } else {
                if (formid == "undefined" || formid == undefined || formid == 'undefined') {
                    response = this.appUtil.makeApiCall(endPoint, 'post', body, midserver, "application/json", "application/json", 'Bearer ' + token);
                } else {
                    var vroworkflow = "";
                    vroworkflow = "&formId=" + formid;
                    var newendPoint = endPoint + vroworkflow;
                    CASLogger.debug('Inside CatalogImport.getcustomformschema: new endpoint: ' + newendPoint);
                    response = this.appUtil.makeApiCall(newendPoint, 'post', body, midserver, "application/json", "application/json", 'Bearer ' + token);
                }
            }

            CASLogger.debug('Inside after making api call in CatalogImport.getcustomformschema:---response: ' + response);
            //response = this.appUtil.makeApiCall(endPoint, 'post', body, midserver, "application/json", "application/json", 'Bearer ' + token);
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error(this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.getcustomformschema):" + endPoint);
                    } else {
                        CASLogger.error('REST call error found inside CatalogImport.getcustomformschema: ' + response.getErrorMessage());
                    }
                }

                return false;
            } else {
                var customResponse = response.getBody();
                var res = this.daoUtil.checkNull(customResponse);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.getcustomformschema: customResponse' + customResponse);
                    return false;
                } else {
                    if (checkATF == 'true') {
                        var ATF = JSON.parse(customResponse);
                        var ATFResponse = ATF.result;
                        customResponse = JSON.stringify(ATFResponse);
                        CASLogger.debug('Inside If ---getcustomformschema: customResponse: ' + customResponse);

                    }

                    var grCatItem = this.daoUtil.genericGRquery(this.appUtil.configuration.table.catalogItem, 'sys_id=' + catalog, '1');
                    if (grCatItem.next()) {
                        var organizationId = grCatItem.category.organization_id;
                        var catalogName = grCatItem.name;
                    }

                    var requestArray = [];
                    requestArray.push("catalogVraId");
                    requestArray.push(catalogVraId);
                    requestArray.push("catalogType");
                    requestArray.push(catalogType);
                    requestArray.push("versions");
                    requestArray.push(versions);
                    requestArray.push("catalog");
                    requestArray.push(catalog);
                    requestArray.push("organizationId");
                    requestArray.push(organizationId);
                    requestArray.push("catalogName");
                    requestArray.push(catalogName);

                    var requestJson = this.appUtil.arrToJSON(requestArray);
                    CASLogger.debug('Inside Else ---getcustomformschema: requestJson: ' + requestJson);


                    this.daoUtil.insert("processCatalogCustomFormSchema", customResponse, requestJson, current.organization);
                    this.processCatalogCustomFormSchema(current, customResponse, requestJson, contentSource);

                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.getcustomformschema: Exception Block: parsedCatalogItem: ' + parsedCatalogItem + ' formid: ' + formid + ' propertyStatus: ' + propertyStatus + ' requestArray: ' + requestArray + ' customResponse: ' + customResponse + ' body: ' + body);
            CASLogger.error("Exception caught inside CatalogImport.getcustomformschema" + e + ". Error found" + e.stack);
        }
    },

    /*
	Function Name : processCatalogCustomFormSchema
	Comments: This is used to process the catalog item schema as well as schema for day-2 action and check to create or to Update existing variable
	Updated On: 02 Feb 2022, 08 Feb 2022, 21 June 2022
	Updated By: Shivam Goyal, Prajakta ,Ajay
	Update Comments : Modified code to create Custom Container start and Container End.
	Prajakta Comments : Removed description from exclude condition to create description variable in catalog form if it's coming from VMware Aria Automation.
	Ajay Comments : Added request info field value for day0  catalog item external source 
	*/
    processCatalogCustomFormSchema: function(current, customResponse, requestJson, contentSource) {
        try {
            CASLogger.debug('Inside the CatalogImport.processCatalogCustomFormSchema. ');
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            requestJson = this.appUtil.parse(requestJson);
            var versions = requestJson.versions;
            var catalogVraId = requestJson.catalogVraId;
            var catalog = requestJson.catalog;
            var catalogType = requestJson.catalogType;
            var actionId = requestJson.actionId;
            var day2Version = '';
            if (catalogVraId === '' && versions === '') {
                var itemCheck = new GlideRecord(this.appUtil.configuration.table.variable);
                itemCheck.addEncodedQuery('cat_item=' + catalog + '^x_vmw_cloudservice_vra_day2_action=' + actionId);
                itemCheck.query();
                if (itemCheck.next()) {
                    day2Version = itemCheck.x_vmw_cloudservice_vra_day2_version + '';
                } else {
                    var gr = new GlideRecord('item_option_new');
                    gr.addEncodedQuery('cat_item=' + catalog);
                    gr.orderByDesc('x_vmw_cloudservice_vra_day2_version');
                    gr.setLimit(1);
                    gr.query();
                    if (gr.next()) {
                        var oldVersion = gr.x_vmw_cloudservice_vra_day2_version;
                        oldVersion++;
                        day2Version = oldVersion + '';
                    } else {
                        day2Version = '1' + '';

                    }

                }
                this.order = day2Version * 201;
            }

            CASLogger.debug('Inside CatalogImport.processCatalogCustomFormSchema: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalogType: ' + catalogType + ' customResponse: ' + customResponse);
            var objSchema = this.appUtil.parse(customResponse);
            var schema = objSchema.model.schema;
            var pageSchema = objSchema.model.layout.pages;


            if (catalogVraId || catalogType || versions) {
                this.daoUtil.deleteContainer(pageSchema, catalog, versions);
                this.daoUtil.deleteVariable(schema, catalog, versions);
				this.daoUtil.deleteVariableSet(schema, catalog, versions);
				
            }else{
				this.daoUtil.deleteContainerStartforDay2(catalog);
			}
            var visibility;
            var tabVisibility;
            var readOnly;
            var size;
            var length = objSchema.model.layout.pages.length; //page length ie.e total containers
            var containerSnowName = '';
            var visibilityJson = {};
			var custom_properties = {};
            var isConditional = false;
            var sysIdJson = {};
            var containerJson = {};
			var supportedCondDt = ["textField","passwordField","integerField","textArea","decimalField","checkbox","radio","dateTime","dropDown", "datagrid"];

			
            for (var i = 0; i < length; i++) {
				var dg_id = '';
				var dgCheck = 'false';
                var name = objSchema.model.layout.pages[i].id;
                var title = objSchema.model.layout.pages[i].title;
                var length2 = objSchema.model.layout.pages[i].sections.length; //section length/i.e. total fields in 1 container
                CASLogger.debug('Inside for loop of length: CatalogImport.processCatalogCustomFormSchema. ');
                if (objSchema.model.layout.pages[i].state == "undefined" || objSchema.model.layout.pages[i].state == undefined || objSchema.model.layout.pages[i].state.visible == null) {

                    tabVisibility = "true";
                    containerSnowName = this.createContainerStart(catalog, name, title, "", versions, tabVisibility, catalogVraId, 'false', actionId, day2Version , "");
                } else {
                    tabVisibility = objSchema.model.layout.pages[i].state.visible;
                    containerSnowName = this.createContainerStart(catalog, name, title, "", versions, tabVisibility, catalogVraId, 'false', actionId, day2Version , "");
                }

                containerJson[containerSnowName] = [];
                if (objSchema.model.layout.pages[i].state && typeof objSchema.model.layout.pages[i].state.visible == 'object') {
                    isConditional = true;
                    visibilityJson[containerSnowName] = {};
                    visibilityJson[containerSnowName].visible = objSchema.model.layout.pages[i].state.visible;
                    visibilityJson[containerSnowName].type = 'container';
                }

                if (length2 == '0' || length2 == 0) {
                    this.createContainerEnd(catalog, name, versions, tabVisibility, catalogVraId, 'false', actionId, day2Version);
                }
                for (var j = 0; j < length2; j++) {

                    var length3 = objSchema.model.layout.pages[i].sections[j].fields.length; // details of form field i.e datatype, field id(name),state(visible, read-only)
                    CASLogger.debug('Inside for loop of length2: CatalogImport.processCatalogCustomFormSchema. ');
                    for (var k = 0; k < length3; k++) {
                        
                        for (var key in schema) {
							custom_properties['nested_read'] = 'false';
                            if (key == objSchema.model.layout.pages[i].sections[j].fields[k].id) {
                                if (key == 'project' && catalogVraId) {

                                } else {

                                    var displayValue = objSchema.model.layout.pages[i].sections[j].fields[k].display;
                                    if (objSchema.model.layout.pages[i].sections[j].fields[k].state == null) {

                                        visibility = 'true';
                                        readOnly = 'false';
                                    } else {

                                        if ("visible" in objSchema.model.layout.pages[i].sections[j].fields[k].state || "read-only" in objSchema.model.layout.pages[i].sections[j].fields[k].state) {
											visibility = objSchema.model.layout.pages[i].sections[j].fields[k].state.visible;
											readOnly = objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'];
                                            if (typeof objSchema.model.layout.pages[i].sections[j].fields[k].state.visible == 'object' || typeof objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'] == 'object') {
                                                isConditional = true;
                                                if (displayValue == 'objectField') {
                                                    var newKey = (versions) ? 'custom_property__' + key + '__' + versions : 'custom_property__' + key;
													newKey = newKey.replace(rgx, ' ').trim().replaceAll(' ', '_');
													visibilityJson[newKey] = {};
                                                    if (typeof objSchema.model.layout.pages[i].sections[j].fields[k].state.visible == 'object' && !objSchema.model.layout.pages[i].sections[j].fields[k].state.visible.bind){
                                                        visibilityJson[newKey].visible = objSchema.model.layout.pages[i].sections[j].fields[k].state.visible;
													}
													if (typeof objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'] == 'object'){
														visibilityJson[newKey].readonly = objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'];
													}
													visibilityJson[newKey].type = 'container';
                                                } else {
                                                    visibilityJson[key] = {};
                                                    if (typeof objSchema.model.layout.pages[i].sections[j].fields[k].state.visible == 'object' && !objSchema.model.layout.pages[i].sections[j].fields[k].state.visible.bind){
                                                        visibilityJson[key].visible = objSchema.model.layout.pages[i].sections[j].fields[k].state.visible;
													}
													if (typeof objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'] == 'object' && supportedCondDt.indexOf(displayValue) != -1){
                                                        visibilityJson[key].readonly = objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'];
													}
                                                    visibilityJson[key].type = 'variable';
                                                }
                                            } else {
                                                if((objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'] == 'false' || objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'] == false) && displayValue == 'objectField'){
													if(objSchema.model.layout.pages[i].sections[j].fields[k].nestedFields){
														var nested_length = objSchema.model.layout.pages[i].sections[j].fields[k].nestedFields.length;
														for(var l=0; l<nested_length; l++){
															if(objSchema.model.layout.pages[i].sections[j].fields[k].nestedFields[l].state){
																
																custom_properties[key] = {};
																custom_properties[key] = objSchema.model.layout.pages[i].sections[j].fields[k].nestedFields;
																custom_properties['nested_read'] = 'true';
																break;
															}
														}
													
													}else{
														readOnly = objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'];
													}
												}else
													readOnly = objSchema.model.layout.pages[i].sections[j].fields[k].state['read-only'];
                                            }
                                        } else{
                                            visibility = true;
                                            readOnly = false;
										}

                                        if (objSchema.model.layout.pages[i].sections[j].fields[k].size) {

                                            size = objSchema.model.layout.pages[i].sections[j].fields[k].size;

                                        } else {
                                            size = '';
                                        }

                                    }
									
									if("default" in objSchema.model.schema[key]){
										if (typeof objSchema.model.schema[key].default == 'object'  &&   !objSchema.model.schema[key].default.bind &&  objSchema.model.schema[key].default.type != 'scriptAction'){
											if(supportedCondDt.indexOf(displayValue) != -1 && displayValue != 'radio'){
												if(visibilityJson[key]){
													visibilityJson[key].default = objSchema.model.schema[key].default;
												} else {
													isConditional = true;
													visibilityJson[key] = {};
													visibilityJson[key].default = objSchema.model.schema[key].default;
													visibilityJson[key].type = 'variable';
												}
											}
										}
									}
									
                                    if (tabVisibility == false) {
                                        visibility = false;
                                    }

                                    var customCatalogType = '';
                                    if (catalogVraId === '' && versions === '') {
                                        customCatalogType = 'action';
                                    }

									
                                    
                                    var properties = {};
									
									if(displayValue == 'datagrid'){
										this.daoUtil.checkVariableOfSetDelete(key, catalog, versions, schema);
										dgCheck = 'true';
										var dg_sys_ids = '';
										var checkVarSet = this.daoUtil.checkVariableSet(key, catalog, versions);
										if(checkVarSet == 'create'){
											properties = this.createDatagrid(key, catalog, versions, schema, displayValue, visibility, readOnly, size, customCatalogType, catalogVraId);
											if(!(properties == undefined || properties == 'undefined')){
												dg_sys_ids = properties['sys_id'];
												dg_id  +=  dg_sys_ids + ',';
											}
										}
										if(checkVarSet == 'update'){
										properties = this.updateDatagrid(key, catalog, versions, schema, displayValue, visibility, readOnly, size, customCatalogType, catalogVraId);
																					

											if(!(properties == undefined || properties == 'undefined')){
												dg_sys_ids = properties['sys_id'];
												dg_id  +=  dg_sys_ids + ',';
										}
									}
									}else{
										var checkBlue = this.daoUtil.checkVariable(key, catalog, versions, catalogVraId, actionId, day2Version, displayValue);
                                    CASLogger.debug('Inside CatalogImport.processCatalogCustomFormSchema:---checkBlue: ' + checkBlue);
									custom_properties['custom_property_check'] = {};
									custom_properties['custom_property_check'] = 'false';
										if (checkBlue == 'create') {
                                        properties = this.createVariable(key, catalog, versions, schema, displayValue, visibility, readOnly, size, customCatalogType, catalogVraId, actionId, day2Version, custom_properties);
                                    }
                                    if (checkBlue == 'update') {
                                        properties = this.updateVariable(key, catalog, versions, schema, displayValue, visibility, readOnly, size, customCatalogType, catalogVraId, actionId, day2Version, custom_properties);
                                    }
									}
									
                                    
									if(!(properties == undefined || properties == 'undefined')){
										sysIdJson[key] = properties;
										if(displayValue == 'objectField'){
											var catName= (versions) ? 'custom_property__'+ key +'__'+versions : 'custom_property__'+ key;
											catName = catName.replace(rgx, ' ').trim().replaceAll(' ', '_');
											containerJson[catName] = [];
												if(properties.length>0){
													for(var s=0;s<properties.length;s++){
														containerJson[catName].push(properties[s]);
													}
												}else{
													containerJson[catName].push(properties);
												}
											}else{
												containerJson[containerSnowName].push(properties);
										}
									}
								}
                            }
                        }
                        this.createContainerEnd(catalog, name, versions, tabVisibility, catalogVraId, 'false', actionId, day2Version);
                        CASLogger.debug('Inside for loop of length3: CatalogImport.processCatalogCustomFormSchema. ');
						if(dgCheck == 'true'){
							var dg_sys = dg_id.split(',');
							for(var dg in dg_sys){
								var gr_order = new GlideRecord(this.appUtil.configuration.table.variableSet);
								gr_order.addQuery('variable_set.sys_id', dg_sys[dg]);
								gr_order.addQuery('sc_cat_item.sys_id', catalog);
								gr_order.query()
								if(gr_order.next()){
									var varset = new sn_sc.CatalogItemVariableSetM2M(gr_order.getUniqueValue());
									var varset_order = this.order + 1;
									var attr = {
										'order':varset_order
									};
									varset.update(attr, true);
									this.order = this.order + 3;
								}
							}
						}
						
                    }
                }
            }
            if (catalogVraId != '') {
                this.createContainerStart(catalog, 'Custom__start', '', '', '', '', '', 'true' , "");
                this.createContainerEnd(catalog, 'Custom__end', '', '', '', 'true');
            }

           var itemData = {
			"catalogVraId":catalogVraId,
			"catalog":catalog,
			"versions":versions,
			"day2Version":day2Version,
			"contentSource":contentSource
		};
			this.createSchemaForValueSource(customResponse, requestJson,visibilityJson, sysIdJson, containerJson, isConditional, itemData);

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.processCatalogCustomFormSchema: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog + 'day2Version : '+ day2Version + ' catalogType: ' + catalogType + ' schema: ' + schema + ' pageSchema: ' + pageSchema + ' tabVisibility: ' + tabVisibility + ' containerSnowName: ' + containerSnowName);
            CASLogger.error("Exception caught inside CatalogImport.processCatalogCustomFormSchema" + e + ". Error found" + e.stack);
        }

    },
	
	/*
      Function Name : createSchemaForValueSource
      Comments: This is used to create catalog client script for catalog item and Day-2 actions based on the variable type
      Created On: 03/02/2023
      Created By: Shivam
      */
	createSchemaForValueSource: function(customResponse, requestJson,visibilityJson, sysIdJson, containerJson, isConditional, itemData){
        try {
			
			CASLogger.debug('Inside the CatalogImport.createSchemaForValueSource');
			
			var catalogVraId = itemData.catalogVraId;
			var catalog = itemData.catalog;
			var versions = itemData.versions;
			var day2Version = itemData.day2Version;
			var contentSource = itemData.contentSource;
			
			CASLogger.debug('Inside the CatalogImport.createSchemaForValueSource: catalogVraId : '+ catalogVraId + ' catalog: ' + catalog + ' versions: '+ versions +' day2Version : '+ day2Version + ' contentSource : '+ contentSource );
			
            var objSchema = this.appUtil.parse(customResponse);
            var schema = objSchema.model.schema;
            var onChangeObj = {};
            var onChangeDefaultObj = {};
            var onChangeBindObj = {};
            var valueListObj = {};
            valueListObj.u_version = [];
            valueListObj.type = 'valueList';
            var defaultValueObj = {};
            defaultValueObj.u_version = [];
            defaultValueObj.type = 'defaultValue';
            var defaultBindObj = {};
            defaultBindObj.u_version = [];
			var defaultComputedObj = {};
			defaultComputedObj.u_version = [];
			var onLoadCompObj = {};
			var onChangeCompObj = {};
			var defaultConstant = {};
			defaultConstant.u_version = [];
			var onLoadConstantDef = {};
			
            for (var field in schema) {
				var readonly = '';
				var displayType = this.getDisplayName(objSchema, field);
				if (displayType == 'objectField') {
					readonly = (sysIdJson[field] && typeof sysIdJson[field][0].readonly != 'object') ? sysIdJson[field][0].readonly : false;
				} else {
					readonly = (sysIdJson[field] && typeof sysIdJson[field].readonly != 'object') ? sysIdJson[field].readonly : false;
				}
                var datatype = schema[field].type.dataType;
                var refType = schema[field].type.referenceType;
                if (schema[field].constraints && catalogVraId) {
                    var minValue = '';
                    var maxValue = '';
                    var pattern = '';
                    var patternMessage = '';
                    for (var validation in schema[field].constraints) {
                        CASLogger.debug('Inside for loop of validation: CatalogImport.createSchemaForValueSource:---validation:' + validation);
                        if (validation == 'min-value') {
							if (datatype == 'dateTime') {
								var d = new Date(schema[field].constraints[validation]);
								var minValue1 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
								minValue ='"'+ minValue1 +'" ';
							} else {
								minValue = schema[field].constraints[validation];
							}
						}
						if (validation == 'max-value') {
							if (datatype == 'dateTime') {
								var d = new Date(schema[field].constraints[validation]);
								var maxValue2 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
								maxValue ='"'+ maxValue2 +'" ';
							} else {
								maxValue = schema[field].constraints[validation];
							}
						}
                        if (validation == 'pattern' && datatype != 'dateTime') {
                            pattern = schema[field].constraints[validation].value;
                            patternMessage = schema[field].constraints[validation].message;
                        }
                    }
					
                    CASLogger.debug('Inside CatalogImport.createSchemaForValueSource: minValue: ' + minValue + ' maxValue: ' + maxValue + ' pattern: ' + pattern);
                    //display message.
                    if (minValue || maxValue || pattern) {
                        this.clientscript = this.daoUtil.insertValidationScript(minValue, maxValue, pattern, datatype, catalog, versions, field, patternMessage, this.clientscript);
                    }
                }
                if (field != 'project' && field != 'deploymentName' && field != 'description' && this.getDisplayName(objSchema, field) != 'valuePicker') {

                    CASLogger.debug('Inside if block of field: CatalogImport.createSchemaForValueSource: field: ' + field);

                    if (schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {

                        var responseSchemaValue = this.externalValue(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, valueListObj, onChangeObj, readonly);
                        onChangeObj = responseSchemaValue[0];
                        valueListObj = responseSchemaValue[1];  
						CASLogger.debug('Inside if block of : schema[field]["valueList"] : CatalogImport.createSchemaForValueSource. ');
                    }
                }
				if (catalogVraId != '') {
					var responseConst = this.constantDefault(schema, field, objSchema, catalogVraId, catalog, versions, defaultConstant, readonly);
					onLoadConstantDef = responseConst[0];
				}
                if (schema[field] && catalogVraId == '' && (field == 'newOwner'|| field =='targetProjectId') && this.getDisplayName(objSchema, field) == 'valuePicker') {
					var type = (field == 'newOwner') ? 'ownerType__' + day2Version : 'targetProjectId__' + day2Version;
                    var dependency =[];
					dependency.push(type);
					dependency.push(type);
					var action = (field == 'newOwner') ? 'ChangeOwner' : 'Project';
					this.clientscript = this.daoUtil.insertActionOnchangeScript('', '', '', dependency, type, catalog, versions, action);

				}


                if (schema[field]["default"] && typeof schema[field]["default"] == 'object' && typeof schema[field]["default"]["bind"] != 'object' && schema[field]["default"]["bind"] && this.getDisplayName(objSchema, field) != 'valuePicker') {

                    var responseSchemaBind = this.externalBindDefault(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultBindObj, onChangeBindObj);

                    onChangeBindObj = responseSchemaBind[0];
                    defaultBindObj = responseSchemaBind[1];
					CASLogger.debug('Inside if block of : schema[field]["default"]["bind"]  : CatalogImport.createSchemaForValueSource. ');
                }

				// Below check is to identify if the field is having computed default 
				
				if(schema[field]["default"] && typeof schema[field]["default"] == 'object' && schema[field]["default"]["bind"] && typeof schema[field]["default"]["bind"] == 'object' && this.supportedCompDt.indexOf(this.getDisplayName(objSchema, field)) != -1){
					
					var responseComp = this.computedDefault(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultComputedObj, onChangeCompObj);
					
					onChangeCompObj = responseComp[0];
					onLoadCompObj = responseComp[1];
				}



                if (schema[field]["default"] && typeof schema[field]["default"] == 'object' && schema[field]["default"]["type"] == 'scriptAction' && this.getDisplayName(objSchema, field) != 'valuePicker') {

                    var responseSchemaDeafult = this.externalDefault(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultValueObj, onChangeDefaultObj, readonly);

                    onChangeDefaultObj = responseSchemaDeafult[0];
                    defaultValueObj = responseSchemaDeafult[1];                
                    CASLogger.debug('Inside if block of : schema[field]["default"]  : CatalogImport.createSchemaForValueSource. ');


                }

            }
			
           CASLogger.debug('Inside CatalogImport.createSchemaForValueSource:' + ' valueListObj: ' + JSON.stringify(valueListObj) + ' defaultValueObj: ' + JSON.stringify(defaultValueObj) + ' onChangeObj: ' + JSON.stringify(onChangeObj) + ' onChangeDefaultObj: ' + JSON.stringify(onChangeDefaultObj) + ' defaultBindObj: ' + JSON.stringify(defaultBindObj) + ' onChangeBindObj: ' + JSON.stringify(onChangeBindObj) + 'onLoadCompObj ' + JSON.stringify(onLoadCompObj) + 'onChangeCompObj ' + JSON.stringify(onChangeCompObj));

            this.daoUtil.insertSingleClientScript(JSON.stringify(valueListObj), '');
            this.daoUtil.insertSingleClientScript(JSON.stringify(defaultValueObj), 'default');
            this.daoUtil.insertSingleClientScript(JSON.stringify(onChangeDefaultObj), 'default');
            this.daoUtil.insertSingleClientScript(JSON.stringify(onChangeObj), '');
            this.daoUtil.insertSingleClientScript(JSON.stringify(defaultBindObj), 'bind');
            this.daoUtil.insertSingleClientScript(JSON.stringify(onChangeBindObj), 'bind');
			this.daoUtil.insertSingleClientScript(JSON.stringify(onLoadCompObj), 'computed');
			this.daoUtil.insertSingleClientScript(JSON.stringify(onChangeCompObj), 'computed');
			this.daoUtil.insertSingleClientScript(JSON.stringify(onLoadConstantDef), 'constant');
			
			var customCatalogType = '';
            if (catalogVraId === '' && versions === '') {
				customCatalogType = 'action';
			}

			if (isConditional) {
                this.createOnChangeVisibilityScript(catalog, visibilityJson, sysIdJson, containerJson, versions, customCatalogType, contentSource, requestJson);
            }
			
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createSchemaForValueSource: Exception Block: versions: ' + versions + ' catalogVraId: ' + catalogVraId + ' catalog: ' + catalog + ' customResponse: ' + customResponse + 'requestJson: '+ requestJson + 'day2Version : '+ day2Version + ' valueListObj: ' + JSON.stringify(valueListObj) + ' defaultValueObj: ' + JSON.stringify(defaultValueObj) + ' onChangeObj: ' + JSON.stringify(onChangeObj) + ' onChangeDefaultObj: ' + JSON.stringify(onChangeDefaultObj) + ' defaultBindObj: ' + JSON.stringify(defaultBindObj) + ' onChangeBindObj: ' + JSON.stringify(onChangeBindObj)  + 'onLoadCompObj ' + JSON.stringify(onLoadCompObj) + 'onChangeCompObj ' + JSON.stringify(onChangeCompObj));
            CASLogger.error("Exception caught inside CatalogImport.createSchemaForValueSource" + e + ". Error found" + e.stack);
        }
    },
	
	/*
      Function Name : constantDefault
      Comments: This function is responsible for creating dynamic object of fields that have constant default for day-0.
      Created On: 10/08/2023
      Created By: Vrushali
      */
	
	constantDefault: function(schema, field, objSchema, catalogVraId, catalog, versions, defaultConstant, readonly) {
    try {
        CASLogger.debug('Inside the CatalogImport.constantDefault : versions : ' + versions + ' field : '+ field + ' catalog :  '+ catalog + ' catalogVraId : '+ catalogVraId );
        var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
        var responseSchema = [];
        var valueList = 'false';
        var value = "";
        var displayType = this.getDisplayName(objSchema, field);
        if (displayType == 'objectField') {
            var type_schema = schema[field]['type'];
            var custom_property_length = type_schema.fields.length;
            for (var i = 0; i < custom_property_length; i++) {
                var custom_property_datatype = type_schema.fields[i]['type']['dataType'];
                var custom_property_key = type_schema.fields[i]['id'];
                if (schema[field]["default"] && schema[field]["default"][custom_property_key]) {
                    value = schema[field]["default"][custom_property_key];
                    if (custom_property_datatype == 'dateTime') {
                        var d = new Date(value);
                        value = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
                    }
                } else if (custom_property_datatype == 'integer' || custom_property_datatype == 'decimal') {
                    if (type_schema.fields[i]['constraints'] && type_schema.fields[i]['constraints']['min-value']) {
                        value = type_schema.fields[i]['constraints']['min-value'];
                    }
                } else {
                    value = '';
                }
				
				if (versions) {
					varField = 'custom_property__' + field + '__' + custom_property_key + '__' + versions;
					varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
				} else {
					varField = 'custom_property__' + field + '__' + custom_property_key.replace(rgx, ' ').trim().replaceAll(' ', '_');
				}
                
                if (value) {
                        defaultConstant["u_version"].push({
                            "varField": varField,
                            "catalog": catalog,
                            "versions": versions,
                            "displayType": displayType,
                            "valueList": valueList,
                            "defaultValue": value,
							"readonly": readonly+''
                        });
				}
            }
        } else {
			value = this.getConstantDefaultValue(schema, field, displayType);
            var varField = '';
            if (versions) {
                varField = field + "__" + versions;
                varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
            } else {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
            }

            if (schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                valueList = 'true';
            }

             if (value && displayType != 'radio') {
				defaultConstant["u_version"].push({
                        "varField": varField,
                        "catalog": catalog,
                        "versions": versions,
                        "displayType": displayType,
                        "valueList": valueList,
                        "defaultValue": value + '',
						"readonly": readonly + ''
                    });
            }
        }

		CASLogger.debug('Inside CatalogImport. constantDefault: defaultConstant :  ' + JSON.stringify(defaultConstant));
        responseSchema.push(defaultConstant);
        return responseSchema;


    } catch (e) {
        CASLogger.debug('Inside Catch Block of CatalogImport. constantDefault: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog + 'schema: ' + schema + ' field: ' + field + ' defaultConstant : ' + JSON.stringify(defaultConstant) + 'responseSchema: ' + responseSchema);
        CASLogger.error("Exception caught inside CatalogImport.constantDefault" + e + ". Error found" + e.stack);

    }
},
/*
      Function Name : getConstantDefaultValue
      Comments: This function is responsible for returning the constant default value from schema.
      Created On: 30/11/2023
      Created By: Vrushali Kolte
*/

	getConstantDefaultValue: function(schema, field, displayType) {
    try {
		CASLogger.debug('Inside CatalogImport.getConstantDefaultValue: schema  :  ' + JSON.stringify(schema) +" field : "+ field + " displayType : "+ displayType);
        var value = '';
		var flag = '';
        if (schema[field]["default"]) {
            if (typeof schema[field]["default"] != 'object') {
                value = schema[field]["default"];
                if (displayType == 'dateTime') {
                    var d = new Date(value);
                    value = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
                }
                if ((displayType == 'dropDown' || displayType == 'radio') && schema[field]["valueList"] != '' && schema[field]["valueList"]['type'] != 'scriptAction') {
                    for (var i = 0; i < schema[field]["valueList"].length; i++) {
                        if (schema[field]['default'] == schema[field]["valueList"][i] || schema[field]['default'] == schema[field]["valueList"][i]['value']) {
							flag = 'true';
                            break;
                        } 
                    } 
					if(flag != 'true'){
						value = '';
					}
                }
            }
        } else {
            if (displayType == 'dropDown') {
                if (schema[field]['type']['dataType'] == 'integer' || schema[field]['type']['dataType'] == 'decimal') {
                    if (schema[field]["valueList"] != '' && (schema[field]["valueList"] != undefined)) {
                        if (schema[field]['constraints'] != undefined) {
                            if (schema[field]['constraints']['min-value'] != undefined) {
                                for (var choice = 0; choice < schema[field]["valueList"].length; choice++) {
                                    if (schema[field]["valueList"][choice].value == schema[field]['constraints']['min-value']) {
                                        value = schema[field]['constraints']['min-value'];
                                        break;
                                    }
                                }
                            }
                        }
                    } else if (schema[field]['constraints'] != undefined) {
                        if (schema[field]['constraints']['min-value'] != undefined) {
                            value = schema[field]['constraints']['min-value'];
                        }
                    }
                }
            }
            if (displayType == 'integerField' || displayType == 'decimalField') {
                if (schema[field]['constraints']) {
                    if (schema[field]['constraints']['min-value'] != undefined) {
                        value = schema[field]['constraints']['min-value'];
                    }
                }
            }
        }
		CASLogger.debug('Inside CatalogImport.getConstantDefaultValue: Default Value  :  ' + value +" field : "+ field);
        
        return value;
    } catch (e) {
        CASLogger.debug('Inside Catch Block of CatalogImport.getConstantDefaultValue: Exception Block: field :'+ field +" Display Type : " + displayType);
        CASLogger.error("Exception caught inside CatalogImport.getConstantDefaultValue" + e + ". Error found" + e.stack);
    }
},
	
	/*
      Function Name : computedDefault
      Comments: This is used to create on change catalog client script to handle computed default value support for Day-0 catalog items.
      Created On: 16/02/2023
      Created By: Vrushali
      */
	
	computedDefault: function(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultComputedObj, onChangeCompObj) {
        try {
			CASLogger.debug('Inside the CatalogImport.computedDefault :');
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var responseSchema = [];
            var parameters = [];
            var dependency = [];
            var valueList = 'false';
            var displayType = this.getDisplayName(objSchema, field);
            if (schema[field]["default"]["bind"] == null) {
                parameters.push({
                    "name": field,
                    "value": null
                });
            } else {
                var valueArr = schema[field]["default"]["bind"]["values"];
                for (var i = 0; i < valueArr.length; i++) {
                    if (valueArr[i].indexOf("`") == 0) {
                        dependency.push(valueArr[i]);
                    } else {
                        if (valueArr[i] == 'project') {
                            dependency.push("u_project");
                        } else if (valueArr[i].startsWith('_')) {
                            var compValue = valueArr[i];
                            if (catalogVraId !== '') {
                                if (compValue == '_contentSourceType') {
                                    compValue = contentSource;
                                } else if (compValue == '_currentOrgId') {
                                    compValue = requestJson.organizationId + '';
                                } else if (compValue == '_catalogItemName') {
                                    if(versions){
										compValue = requestJson.catalogName + '' +  "/" + versions;
									}else{
										compValue = requestJson.catalogName + '';
									}
                                } else if (compValue == '_requestedBy') {
                                    compValue = '';
                                } else {
                                    compValue = '';
                                }
								dependency.push("`" + compValue + "`");
                            }
                        } else{
							if(this.supportedCompDt.indexOf(this.getDisplayName(objSchema, valueArr[i])) != -1){
								if (!versions){
									if (catalogVraId != '') {
										dependency.push(valueArr[i]);
									}
								} else {
									dependency.push(valueArr[i] + "__" + versions.replace(rgx, ' ').trim().replaceAll(' ', '_'));
								}
							}
						}
                    }
                }
            }

            var operator = schema[field]["default"]["bind"]["operator"];

            var varField = '';
            if (versions) {
                varField = field + "__" + versions;
                varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');

            } else {
                if (catalogVraId != '') {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
                }
            }
			
			if (schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                valueList = 'true';
            }
			
            var fieldType = schema[field].type;
            if (!(catalogVraId === '' && versions === '')) {


                defaultComputedObj["u_version"].push({
                    "parameters": parameters,
                    "dependency": dependency,
                    "varField": varField,
                    "fieldType": schema[field].type,
                    "catalog": catalog,
                    "versions": versions,
                    "displayType": displayType,
					"valueList": valueList,
                    "operator": operator,
                });

                for (var k = 0; k < dependency.length; k++) {
                    if (dependency[k].indexOf("`") != 0) {
                        var depend = dependency[k];
                        if (onChangeCompObj[depend]) {
                            onChangeCompObj[depend].push({
                                "parameters": parameters,
                                "dependency": dependency,
                                "varField": varField,
                                "fieldType": schema[field].type,
                                "catalog": catalog,
                                "versions": versions,
                                "displayType": displayType,
								"valueList": valueList,
                                "operator": operator
                            });
                        } else {
                            onChangeCompObj[depend] = [];
                            onChangeCompObj[depend].push({
                                "parameters": parameters,
                                "dependency": dependency,
                                "varField": varField,
                                "fieldType": schema[field].type,
                                "catalog": catalog,
                                "versions": versions,
                                "displayType": displayType,
								"valueList": valueList,
                                "operator": operator
                            });
                        }
                    }
                }

            }
		
		
		responseSchema.push(onChangeCompObj);
		responseSchema.push(defaultComputedObj);
        return responseSchema;
        

    } catch (e) {
		CASLogger.debug('Inside Catch Block of CatalogImport. computedDefault: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog  + 'schema: '+ schema + ' field: ' + field + 'requestJson: '+ requestJson + 'day2Version : '+ day2Version + ' defaultComputedObj : ' + JSON.stringify(defaultComputedObj) + ' onChangeCompObj: ' + JSON.stringify(onChangeCompObj) + 'responseSchema: '+ responseSchema);
            CASLogger.error("Exception caught inside CatalogImport.computedDefault" + e + ". Error found" + e.stack);

	}
},
	
	
	
	/*
      Function Name : externalValue
      Comments: This is used to create catalog client script of values as external valueSource for catalog item and Day-2 actions based on the variable type
      Created On: 03/02/2023
      Created By: Shivam
      */
    externalValue: function(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, valueListObj, onChangeObj, readonly) {
        try {
			CASLogger.debug('Inside the CatalogImport.externalValue :' + schema[field]["valueList"]);
            var responseSchema = [];
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var displayType = this.getDisplayName(objSchema, field);
            var type = schema[field]["valueList"]["type"];
            var uri = schema[field]["valueList"]["id"];
            var parameters = [];
            var dependency = [];
            var bind = 'false';
			var computed = 'false';
			var constant = 'false';
            if (schema[field]["valueList"]["parameters"]) {

                for (var param in schema[field]["valueList"]["parameters"]) {
                    for (var param1 in schema[field]["valueList"]["parameters"][param]) {
                        if (param1 != "$type") {
                            if (schema[field]["valueList"]["parameters"][param][param1] == null) {
                                parameters.push({
                                    "name": param1,
                                    "value": null
                                });
                            } else if (schema[field]["valueList"]["parameters"][param][param1] == 'project') {
                                dependency.push(param1);
                                dependency.push("u_project");
                            } else if (schema[field]["valueList"]["parameters"][param][param1].startsWith('`') && schema[field]["valueList"]["parameters"][param][param1].endsWith('`')) {
                                var value = schema[field]["valueList"]["parameters"][param][param1].slice(1, -1);
                                value = value.replaceAll('`', '');
                                parameters.push({
                                    "name": param1,
                                    "value": value
                                });

                            } else if (schema[field]["valueList"]["parameters"][param][param1].startsWith('_')) {
                                var bindValue = schema[field]["valueList"]["parameters"][param][param1];
                                if (catalogVraId !== '') {
                                    if (bindValue == '_contentSourceType') {
                                        bindValue = contentSource;
                                    } else if (bindValue == '_currentOrgId') {
                                        bindValue = requestJson.organizationId + '';
                                    } else if (bindValue == '_catalogItemName') {
                                        if(versions){
											bindValue = requestJson.catalogName + '' +  "/" + versions;
										}else{
											bindValue = requestJson.catalogName + '';
										}
                                    } else if (bindValue == '_requestedBy') {
                                        bindValue = '';
                                    } else {
                                        bindValue = '';
                                    }

                                }


                                parameters.push({
                                    "name": param1,
                                    "value": bindValue
                                });
                            } else {
                                var value = schema[field]["valueList"]["parameters"][param][param1];
                                value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                dependency.push(param1);
                                if (!versions) {
                                    if (catalogVraId === '' && versions === ''){
                                        dependency.push(value + "__" + day2Version);
                                    } else {
                                        dependency.push(value);
                                    }
                                } else {
                                    dependency.push(value + "__" + versions.replace(rgx, ' ').trim().replaceAll(' ', '_'));
                                }
                            }


                        }
                    }

                }

            }
            var varField = '';
            if (versions) {
                varField = field + "__" + versions;
                varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
            } else {
                if (catalogVraId === '' && versions === '') {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_') + "__" + day2Version;
                } else {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
                }
            }
			
			if(schema[field]["default"] && typeof schema[field]["default"] != 'object'){
				constant = 'true';
			}

            if (schema[field]["default"] && typeof schema[field]["default"] == 'object' && typeof schema[field]["default"]["bind"] != 'object' && schema[field]["default"]["bind"]) {
                bind = 'true';
            }

			if (schema[field]["default"] && typeof schema[field]["default"] == 'object' && typeof schema[field]["default"]["bind"] == 'object' && schema[field]["default"]["bind"]) {
                computed = 'true';
            }

            if (!(catalogVraId === '' && versions === '')) {

                var dynamic_query = 'cat_item=' + catalog + '^name=' + varField + '^x_vmw_cloudservice_datatype=DataGrid^ORx_vmw_cloudservice_datatype=Duallist^ORx_vmw_cloudservice_datatype=Multiselect';
                var var_GR_1 = new GlideRecord(this.appUtil.configuration.table.variable);
                var_GR_1.addEncodedQuery(dynamic_query);
                var_GR_1.query();
                if (var_GR_1.next()) {
                    var casDatatype_1 = var_GR_1.x_vmw_cloudservice_datatype;
                    if (casDatatype_1 == "Duallist" || casDatatype_1 == 'Multiselect' || casDatatype_1 == 'DataGrid') {
                        this.clientscript = this.daoUtil.insertonloadscript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, 'onload_valueList');
                    }



                } else {
                    valueListObj["u_version"].push({
                        "type": type,
                        "uri": uri,
                        "parameters": parameters,
                        "dependency": dependency,
                        "varField": varField,
                        "fieldType": schema[field].type,
                        "catalog": catalog,
                        "versions": versions,
                        "displayType": displayType,
                        "bind": bind,
						"computed": computed,
						"constant": constant,
						"readonly" : readonly+''
                    });
                }






                // this.clientscript = this.daoUtil.insertonloadscript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, 'onload_valueList');
            }
            if (dependency.toString()) {

                if (catalogVraId === '' && versions === '') {
                    this.clientscript = this.daoUtil.insertActionOnchangeScript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, '', '', '', bind);
                } else {
                    //this.clientscript = this.daoUtil.insertonchangescript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions);

                    if (dependency) {
                        for (var inc = 0; inc < dependency.length; inc = inc + 2) {
                            var depend = dependency[inc + 1];
                            if (onChangeObj[depend]) {
                                onChangeObj[depend].push({
                                    "type": type,
                                    "uri": uri,
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "bind": bind,
									"computed": computed,
									"constant": constant,
									"readonly" : readonly+''
                                });
                            } else {
                                onChangeObj[depend] = [];
                                onChangeObj[depend].push({
                                    "type": type,
                                    "uri": uri,
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "bind": bind,
									"computed": computed,
									"constant": constant,
									"readonly" : readonly+''
                                });

                            }
                        }
                    }

                }

            }			
            responseSchema.push(onChangeObj);
            responseSchema.push(valueListObj);
            return responseSchema;

        } catch (e) {
			CASLogger.debug('Inside Catch Block of CatalogImport. externalValue: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog  + 'schema: '+ schema + ' field: ' + field + 'requestJson: '+ requestJson + 'day2Version : '+ day2Version + ' valueListObj: ' + JSON.stringify(valueListObj) + ' onChangeObj: ' + JSON.stringify(onChangeObj) + 'responseSchema: '+ responseSchema);
            CASLogger.error("Exception caught inside CatalogImport.externalValue" + e + ". Error found" + e.stack);

        }
    },
	
	/*
      Function Name : externalBindDefault
      Comments: This is used to create catalog client script of default value as Bind  for catalog item and Day-2 actions based on the variable type
      Created On: 03/02/2023
      Created By: Shivam
      */
    externalBindDefault: function(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultBindObj, onChangeBindObj) {
        try {
			CASLogger.debug('Inside the CatalogImport.externalBindDefault :' + schema[field]["default"]["bind"]);
            var responseSchema = [];
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var parameters = [];
            var dependency = [];
            var valueList = 'false';
            var displayType = this.getDisplayName(objSchema, field);

            if (schema[field]["default"]["bind"] == null) {
                parameters.push({
                    "name": field,
                    "value": null
                });
            } else
            if (schema[field]["default"]["bind"] == 'project') {
                dependency.push(field);
                dependency.push("u_project");
            } else
            if (schema[field]["default"]["bind"].startsWith('_')) {
                var bindValue = schema[field]["default"]["bind"];
                if (catalogVraId !== '') {
                    if (bindValue == '_contentSourceType') {
                        bindValue = contentSource;
                    } else if (bindValue == '_currentOrgId') {
                        bindValue = requestJson.organizationId + '';
                    } else if (bindValue == '_catalogItemName') {
                        if(versions){
							bindValue = requestJson.catalogName + '' +  "/" + versions;
						}else{
							bindValue = requestJson.catalogName + '';
						}
                    } else if (bindValue == '_requestedBy') {
                        bindValue = '';
                    } else {
                        bindValue = '';
                    }

                }

                parameters.push({
                    "name": field,
                    "value": bindValue
                });
            } else {
                var value = schema[field]["default"]["bind"];
                value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                dependency.push(field);

                if (!versions) {
                    if (catalogVraId === '' && versions === '') {
                        dependency.push(value + "__" + day2Version);
                    } else {
                        dependency.push(value);
                    }
                } else {
                    dependency.push(value + "__" + versions.replace(rgx, ' ').trim().replaceAll(' ', '_'));
                }
            }


            var varField = '';
		
            if (versions) {
                varField = field + "__" + versions;
                varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
            } else {
                if (catalogVraId === '' && versions === '') {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_') + "__" + day2Version;
                } else {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
                }
            }
            if (schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction') {
                valueList = 'true';
            }
            if (!(catalogVraId === '' && versions === '')) {
                defaultBindObj["u_version"].push({
                    "parameters": parameters,
                    "dependency": dependency,
                    "varField": varField,
                    "fieldType": schema[field].type,
                    "catalog": catalog,
                    "versions": versions,
                    "displayType": displayType,
                    "valueList": valueList
                });
            }


            if (dependency.toString() || JSON.stringify(parameters)) {

                if (catalogVraId === '' && versions === '') {

                    this.clientscript = this.daoUtil.insertActionOnchangeScript('', '', JSON.stringify(parameters), dependency, varField, catalog, versions, 'bind', displayType, valueList);
                } else {

                    if (dependency) {
                        for (var inc = 0; inc < dependency.length; inc = inc + 2) {
                            var depend = dependency[inc + 1];

                            if (onChangeBindObj[depend]) {
                                onChangeBindObj[depend].push({
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "valueList": valueList
                                });
                            } else {
                                onChangeBindObj[depend] = [];
                                onChangeBindObj[depend].push({
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "valueList": valueList
                                });
                            }
                        }
                    }
                }
            }
            responseSchema.push(onChangeBindObj);
            responseSchema.push(defaultBindObj);
            return responseSchema;

        } catch (e) {
			CASLogger.debug('Inside Catch Block of CatalogImport. externalBindDefault: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog  + 'schema: '+ schema +  ' field: ' + field + 'requestJson: '+ requestJson + 'day2Version : '+ day2Version + ' defaultBindObj: ' + JSON.stringify(defaultBindObj) + ' onChangeBindObj: ' + JSON.stringify(onChangeBindObj) + 'responseSchema: '+ responseSchema);
            CASLogger.error("Exception caught inside CatalogImport.externalBindDefault" + e + ". Error found" + e.stack);

        }
    },
	
	/*
      Function Name : externalDefault
      Comments: This is used to create catalog client script of default value as external valueSource for catalog item and Day-2 actions based on the variable type
      Created On: 03/02/2023
      Created By: Shivam
      */
    externalDefault: function(schema, field, objSchema, requestJson, catalogVraId, catalog, versions, day2Version, contentSource, defaultValueObj, onChangeDefaultObj, readonly) {
        try {
			CASLogger.debug('Inside the CatalogImport.externalDefault : ' + schema[field]["default"]);
            var responseSchema = [];
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var displayType = this.getDisplayName(objSchema, field);
            var type = schema[field]["default"]["type"];
            var uri = schema[field]["default"]["id"];
            var parameters = [];
            var dependency = [];
            var valueList = 'false';
            if (schema[field]["default"]["parameters"]) {

                for (var param in schema[field]["default"]["parameters"]) {
                    for (var param1 in schema[field]["default"]["parameters"][param]) {
                        if (param1 != "$type") {
                            if (schema[field]["default"]["parameters"][param][param1] == null) {
                                parameters.push({
                                    "name": param1,
                                    "value": null
                                });
                            } else if (schema[field]["default"]["parameters"][param][param1] == 'project') {
                                dependency.push(param1);
                                dependency.push("u_project");
                            } else if (schema[field]["default"]["parameters"][param][param1].startsWith('`') && schema[field]["default"]["parameters"][param][param1].endsWith('`')) {
                                var value = schema[field]["default"]["parameters"][param][param1].slice(1, -1);
                                value = value.replaceAll('`', '');
                                parameters.push({
                                    "name": param1,
                                    "value": value
                                });
                            } else if (schema[field]["default"]["parameters"][param][param1].startsWith('_')) {
                                var bindValue = schema[field]["default"]["parameters"][param][param1];
                                if (catalogVraId !== '') {
                                    if (bindValue == '_contentSourceType') {
                                        bindValue = contentSource;
                                    } else if (bindValue == '_currentOrgId') {
                                        bindValue = requestJson.organizationId + '';
                                    } else if (bindValue == '_catalogItemName') {
										if(versions){
											bindValue = requestJson.catalogName + '' +  "/" + versions;
										}else{
											bindValue = requestJson.catalogName + '';
										}                                    
									} else if (bindValue == '_requestedBy') {
                                        bindValue = '';
                                    } else {
                                        bindValue = '';
                                    }
                                }

                                parameters.push({
                                    "name": param1,
                                    "value": bindValue
                                });
                            } else {
                                var value = schema[field]["default"]["parameters"][param][param1];
                                value = value.replace(rgx, ' ').trim().replaceAll(' ', '_');
                                dependency.push(param1);
                                if (!versions) {
                                    if (catalogVraId === '' && versions === '') {
                                        dependency.push(value + "__" + day2Version);
                                    } else {
                                        dependency.push(value);
                                    }
                                } else {
                                    dependency.push(value + "__" + versions.replace(rgx, ' ').trim().replaceAll(' ', '_'));
                                }
                            }


                        }
                    }

                }
            }
            var varField = '';
			if(displayType == 'datagrid'){
				var len = schema[field]['type']['fields'].length;
				var result = {};
				result[field] = [];
				for(p=0; p<len; p++){
					var dg_datatype = schema[field]['type']['fields'][p]['type']['dataType'];
					var dg_key = schema[field]['type']['fields'][p].id;
					result[field].push({ "id": dg_key ,"dataType": dg_datatype});
				}
			}
            if (versions) {
				if(displayType == 'datagrid'){
					varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
				}else{
					varField = field + "__" + versions;
					varField = varField.replace(rgx, ' ').trim().replaceAll(' ', '_');
				}
            } else {
                if (catalogVraId === '' && versions === '') {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_') + "__" + day2Version;
                } else {
                    varField = field.replace(rgx, ' ').trim().replaceAll(' ', '_');
                }
            }
            if (schema[field]["valueList"] && typeof schema[field]["valueList"] == 'object' && schema[field]["valueList"]["type"] == 'scriptAction' && this.getDisplayName(objSchema, field) != 'valuePicker') {
                valueList = 'true';
            }
            if (!(catalogVraId === '' && versions === '')) {

                var dynamic_query1 = 'cat_item=' + catalog + '^name=' + varField + '^x_vmw_cloudservice_datatype=DataGrid^ORx_vmw_cloudservice_datatype=Duallist^ORx_vmw_cloudservice_datatype=Multiselect';
                var var_GR_2 = new GlideRecord(this.appUtil.configuration.table.variable);
                var_GR_2.addEncodedQuery(dynamic_query1);
                var_GR_2.query();
                if (var_GR_2.next()) {
                    var casDatatype_2 = var_GR_2.x_vmw_cloudservice_datatype;
                    if (casDatatype_2 == "Duallist" || casDatatype_2 == 'Multiselect' || casDatatype_2 == 'DataGrid') {
                        this.clientscript = this.daoUtil.insertonloadscript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, 'onload_defaultValue');
                    }



                } else {

                    defaultValueObj["u_version"].push({
                        "type": type,
                        "uri": uri,
                        "parameters": parameters,
                        "dependency": dependency,
                        "varField": varField,
                        "fieldType": schema[field].type,
                        "catalog": catalog,
                        "versions": versions,
                        "displayType": displayType,
                        "valueList": valueList,
						"result": result,
						"readonly" : readonly+''
                    });
                }
                //this.clientscript = this.daoUtil.insertonloadscript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, 'onload_defaultValue');
            }

            //      if ((!schema[field]["valueList"]) && (dependency.toString() || JSON.stringify(parameters))) {

            if ((dependency.toString() || JSON.stringify(parameters))) {
                if (catalogVraId === '' && versions === '') {
                    this.clientscript = this.daoUtil.insertActionOnchangeScript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions, 'default', displayType, valueList);
                } else {
                    //this.clientscript = this.daoUtil.insertonchangescript(type, uri, JSON.stringify(parameters), dependency, varField, catalog, versions);

                    if (dependency) {
                        for (var inc = 0; inc < dependency.length; inc = inc + 2) {
                            var depend = dependency[inc + 1];
                            if (onChangeDefaultObj[depend]) {
                                onChangeDefaultObj[depend].push({
                                    "type": type,
                                    "uri": uri,
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "valueList": valueList,
									"result": result,
									"readonly" : readonly+''
                                });
                            } else {
                                onChangeDefaultObj[depend] = [];
                                onChangeDefaultObj[depend].push({
                                    "type": type,
                                    "uri": uri,
                                    "parameters": parameters,
                                    "dependency": dependency,
                                    "varField": varField,
                                    "fieldType": schema[field].type,
                                    "catalog": catalog,
                                    "versions": versions,
                                    "displayType": displayType,
                                    "valueList": valueList,
									"result": result,
									"readonly" : readonly+''
                                });
                            }
                        }
                    }
                }

            }
            responseSchema.push(onChangeDefaultObj);
            responseSchema.push(defaultValueObj);
            return responseSchema;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.externalDefault: Exception Block: versions: ' + versions + ' catalogId: ' + catalogVraId + ' catalog: ' + catalog + 'schema: '+ schema + ' field: ' + field + 'requestJson: '+ requestJson + 'day2Version : '+ day2Version + ' defaultValueObj: ' + JSON.stringify(defaultValueObj) + ' onChangeDefaultObj: ' + JSON.stringify(onChangeDefaultObj) + 'responseSchema: '+ responseSchema );
            CASLogger.error("Exception caught inside CatalogImport.externalDefault" + e + ". Error found" + e.stack);
        }
    },



    //'displayValue'= datatype e.g.'dropDown'
    //'key'= field name 
    //'catalog'= sys id of catalog item
    //'schema'= schema tag from 'form service API response' which contains all field details
    //x_vmw_cloudservice_vra_uri	
    //x_vmw_cloudservice_vra_datasource	
    //x_vmw_cloudservice_vra_parameter
    //x_vmw_cloudservice_vra_client_script

    /*
      Function Name : createVariable
      Comments: This is used to create variable for catalog item and Day-2 actions based on the variable type
      Updated On: 30/05/2022, 24/05/2022, 22/11/22
      Updated By: Shivam, Prajakta
      Update Comments : Handle the checkbox order for day-2 action.
	  Prajakta Comments : Handled default values for dropdown having valuelist and also handled for dropdown without label. Added the support of custom properties and property groups for displaytype 'objectField'.

      */
    createVariable: function(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey)

    {
        try {
            CASLogger.debug('Inside the CatalogImport.createVariable:---catalog: ' + catalog + ' catalogType: ' + catalogType + ' catalogId: ' + catalogVraId + ' actionId: ' + actionId + ' day2Versions: ' + day2Versions);
            var GRVariable = new GlideRecord(this.appUtil.configuration.table.variable);
            GRVariable.initialize();
            GRVariable.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            GRVariable.mandatory = 'false';
            var clientScriptVersion = version;
            CASLogger.debug('Inside CatalogImport.createVariable---clientScriptVersion: ' + clientScriptVersion);
            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogType == 'action') {
                    clientScriptVersion = day2Versions;
                } else {
                    clientScriptVersion = 'undefined';
                }
            }
			var check_external_dropdown = 'false';
			if(schema[key]["valueList"] && schema[key]["valueList"]['type'] == 'scriptAction' && displayValue == 'dropDown'){
				check_external_dropdown = 'true';
			}
            var dropdown = 'false';
            var isMacro = false;
            var macroSysId = "";

            GRVariable.type = '6';
            GRVariable.x_vmw_cloudservice_cas_name = 'STR__' + key;

            if (GRVariable.x_vmw_cloudservice_cas_name == 'STR__Warning') {
                GRVariable.x_vmw_cloudservice_datatype = 'ObjectType';
            }

            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
			var VersionCheck ='';
			if(custom_properties['custom_property_check'] == true || custom_properties['custom_property_check'] =='true' ){
				VersionCheck =   'custom_property' + '__' + contKey + '__' +key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			}else{
				VersionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			}
            CASLogger.debug('Inside CatalogImport.createVariable---VersionCheck: ' + VersionCheck);
            var name = '';
            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogType == 'action') {
                    name = VersionCheck + '__' + day2Versions;
                    GRVariable.name = VersionCheck + '__' + day2Versions;
                } else {
                    GRVariable.name = VersionCheck;
                    name = VersionCheck;
                }
            } else {
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                GRVariable.name = VersionCheck + '__' + versionEncrypt;
                name = VersionCheck + '__' + versionEncrypt;
            }



            CASLogger.debug('Inside CatalogImport.createVariable---displayValue: ' + displayValue);
			
		
			if (displayValue == 'objectField' && (!(catalogVraId=='' && key == 'Warning'))) {
               
				var contKey1 = key;
				custom_properties['custom_property_check'] = 'true';
				var properties = {};
				var properties_array = [];
				var custom_property_name = key;
				var custom_property_container_name = 'custom_property' + '__' + key;
				var custom_property_title = (this.appUtil.stringify(schema[key]['label'])).replaceAll('"', '');
				var type_schema = schema[key]['type'];
				var custom_property_length = type_schema.fields.length;

				this.createContainerStart(catalog, custom_property_container_name, custom_property_title, this.order, version, visibility, catalogVraId, 'false', actionId, day2Versions , schema[key]);

				for (var i = 0; i < custom_property_length; i++) {
					var custom_property_datatype = type_schema.fields[i]['type']['dataType'];
					var custom_property_key = type_schema.fields[i]['id'];
					var custom_property_value = type_schema['fields'][i];
					var new_schema = {};
					var custom_property_constraints = '';
					var field_created = 'custom_property' + '__' + contKey1 + '__' + custom_property_key.replaceAll(' ', '_');

					if (custom_property_datatype == 'string') {

						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);

						if (new_schema[custom_property_key].constraints) {

							custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, custom_property_datatype, catalog, version, field_created);
						}

					}
					if (custom_property_datatype == 'integer') {
						var prop_integer = 'integerField';
						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, prop_integer, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);

						if (new_schema[custom_property_key].constraints) {
							custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, prop_integer, catalog, version, field_created);
						}

					}
					if(custom_property_datatype == 'secureString'){
						var secure_string = 'passwordField';
						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, secure_string, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
						if (new_schema[custom_property_key].constraints) {
							custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, custom_property_datatype, catalog, version, field_created);
						}

					}
					if(custom_property_datatype == 'decimal'){
						var decimal_field = 'decimalField';
						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, decimal_field, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
						if (new_schema[custom_property_key].constraints) {
							custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, decimal_field, catalog, version, field_created);
						}
					}
					if(custom_property_datatype == 'dateTime'){
						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
						
					}
					if (custom_property_datatype == 'boolean') {
						var checkBox = 'checkbox';
						this.create_custom_property_schema(custom_property_key, custom_property_value);
						new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
						properties = this.createVariable(custom_property_key, catalog, version, new_schema, checkBox, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);

					}
					
					if(custom_property_datatype == 'complex'){
						var displayval = 'objectField';
						var obj_schema = schema[key]['type']['fields'][i];
						var obj_schema1 = {};
						var obj_key = schema[key]['type']['fields'][i].id;
					    obj_schema1[obj_key] = {};
						obj_schema1[obj_key] = obj_schema;
						this.createVariable(obj_key, catalog, version, obj_schema1, displayval, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
					}

					if(custom_properties['nested_read'] == 'true' || custom_properties['nested_read'] == true){
						this.setNestedReadOnly(custom_properties, field_created, catalog, custom_property_key, version, contKey1);
						
					}
					properties_array.push(properties);
				}

				this.createContainerEnd(catalog, custom_property_container_name, version, visibility, catalogVraId, 'false', actionId, day2Versions);
				return properties_array;

			}

          /*  if (displayValue == 'datagrid') {
                if (!catalogVraId) {
                    return;
                }
                GRVariable.x_vmw_cloudservice_field_json = this.appUtil.stringify(schema[key]);
                GRVariable.x_vmw_cloudservice_datatype = 'DataGrid';
                GRVariable.x_vmw_cloudservice_step = size;
                macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version);
                isMacro = true;
            } */

            if (displayValue == 'integerField') {
                if (!this.number) {
                    var validationGR = new GlideRecord(this.appUtil.configuration.table.regex);
                    validationGR.addEncodedQuery('active=true^name=Integer');
                    validationGR.query();
                    if (validationGR.next()) {
                        this.number = validationGR.sys_id;
                    }

                }
                GRVariable.x_vmw_cloudservice_cas_name = 'INT__' + key;
				if(custom_properties['custom_property_check'] == 'false' || custom_properties['custom_property_check'] == false){
					GRVariable.x_vmw_cloudservice_step = schema[key]['step'];
				}
                GRVariable.validate_regex = this.number;
            }
            if (displayValue == 'decimalField') {
                if (!this.decimal) {
                    var decimalGR = new GlideRecord(this.appUtil.configuration.table.regex);
                    decimalGR.addEncodedQuery('active=true^name=Decimal');
                    decimalGR.query();
                    if (decimalGR.next()) {
                        this.decimal = decimalGR.sys_id;
                    } else {
                        decimalGR.initialize();
                        decimalGR.name = 'Decimal';
                        decimalGR.validation_message = 'Not a Decimal Number';
                        decimalGR.regex = '^[-+]?\d+(\.\d+)?$';
                        var decimal = decimalGR.insert();
                        this.decimal = decimal;
                    }

                }
                GRVariable.x_vmw_cloudservice_cas_name = 'INT__' + key;
                GRVariable.x_vmw_cloudservice_datatype = 'Decimal';
				if(custom_properties['custom_property_check'] == 'false' || custom_properties['custom_property_check'] == false){
					GRVariable.x_vmw_cloudservice_step = schema[key]['step'];
				}
                GRVariable.validate_regex = this.decimal;
            }
            if (displayValue == 'passwordField') {

                GRVariable.type = '25';
                GRVariable.x_vmw_cloudservice_cas_name = 'PSD__' + key;
                GRVariable.mask_use_encryption = true;

            }
            if (displayValue == 'textArea') {
                GRVariable.type = '2';
            }
            if (displayValue == 'dateTime') {
                GRVariable.type = '10';
                GRVariable.x_vmw_cloudservice_cas_name = 'DATE__' + key;
            }

            if (displayValue == 'checkbox') {

                var lablevariable1 = new GlideRecord(this.appUtil.configuration.table.variable);
                lablevariable1.initialize();
                lablevariable1.type = "11";
                lablevariable1.cat_item = catalog; // catalog item
                lablevariable1.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID); // application
                lablevariable1.active = "true";
                if (schema[key]['label']) {
                    lablevariable1.question_text = schema[key]['label'];
                } else {
                    lablevariable1.question_text = key;
                }
				if (schema[key]['signpost']) {
                lablevariable1.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
				lablevariable1.show_help = true;
				}

               if (versionEncrypt == 'undefined' || versionEncrypt == undefined) {
                    if (catalogType == 'action') {
                        lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + day2Versions;
                    } else {
                        lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__";
                    }
                } else {
                    lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + versionEncrypt;
                    lablevariable1.x_vmw_cloudservice_versions = version + ",";
                }

                if (catalogType == 'action') {
                    lablevariable1.x_vmw_cloudservice_vra_day2_action = actionId;
                    lablevariable1.x_vmw_cloudservice_vra_day2_version = day2Versions;
                    lablevariable1.order = this.order + 1;
                } else {
                    lablevariable1.order = this.order;
                    this.order = this.order + 3;
                }

                lablevariable1.insert();

                GRVariable.type = '7';
                GRVariable.x_vmw_cloudservice_cas_name = 'BOOL__' + key;

            }

            if (schema[key]["valueList"]) {
                GRVariable.type = '5';
                dropdown = 'true';
                if (schema[key]['valueList']['type'] == 'scriptAction' && displayValue != 'valuePicker') {

                    if (schema[key]['valueList']['parameters'] == '' || schema[key]['valueList']['parameters'] == null) {
                        GRVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion;
                    } else {
                        if (schema[key]['valueList']['type'] == 'scriptAction') {
                            GRVariable.x_vmw_cloudservice_vra_value_client_script = "OnChange__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion;
                        }
                    }


                }
            }
			
			var default_val = this.getConstantDefaultValue(schema, key, displayValue);
			
			if(catalogVraId == ''){
				GRVariable.default_value = default_val;
			}
			
			if(!schema[key]['default'] && displayValue == 'checkbox'){
				default_val = 'false';
			}

            if(schema[key]['default'] != undefined) {
                if (schema[key]['default']['type'] == 'scriptAction') {
                    if (schema[key]['default']['parameters'] == '' || schema[key]['default']['parameters'] == null) {
                        GRVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                    } else {
                        GRVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                    }
				
                } else {
                    if (typeof schema[key]['default'] === 'object') {
                        if (!schema[key]['default']['bind'] && !Array.isArray(schema[key]['default'])) {
                            GRVariable.default_value = this.appUtil.stringify(schema[key]['default']);
                        }
                    }
				}
			}

            if (displayValue == 'multiSelect') {
                if (!catalogVraId) {
                    return;
                }
                GRVariable.x_vmw_cloudservice_datatype = 'Multiselect';
                var def_val = schema[key];

                var constraints = schema[key]['constraints'];

                constraints["read_only"] = readOnly;
                def_val['constraints'] = constraints;
                def_val["field_id"] = name;
                macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val);
                isMacro = true;
            }
            if (displayValue == 'dualList') {
                if (!catalogVraId) {
                    return;
                }
                GRVariable.x_vmw_cloudservice_datatype = 'Duallist';
                var def_val = schema[key];
                var constraints = schema[key]['constraints'];
                constraints["read_only"] = readOnly;
                def_val['constraints'] = constraints;
                def_val["field_id"] = name;
                macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val);
                isMacro = true;
            }
            if (displayValue == 'radio') {
                if (!catalogVraId) {
                    return;
                }
                GRVariable.type = '3';
                GRVariable.x_vmw_cloudservice_cas_name = 'RADO__' + key;
                GRVariable.do_not_select_first = true;
                dropdown = 'true';
				GRVariable.default_value = default_val;

            }
            if (displayValue == 'valuePicker') {
				if (catalogVraId=='' && (key == 'newOwner'|| key == 'targetProjectId')){
					GRVariable.type = '5';
					GRVariable.x_vmw_cloudservice_datatype = 'ValuePicker';
                    
				}else{
                GRVariable.type = '6';
                GRVariable.x_vmw_cloudservice_datatype = 'ValuePicker';
                var def_val = schema[key];
                var constraints = schema[key]['constraints'] || {};
                constraints["read_only"] = readOnly;
                def_val['constraints'] = constraints;
                def_val["field_id"] = name;
                macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, actionId, day2Versions);
                this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val, catalogType, catalogVraId, actionId, day2Versions);
                isMacro = true;

                if ((schema[key]['valueList'] == '' || schema[key]['valueList'] == null) && (schema[key]['type']['referenceType'] != null || schema[key]['type']['referenceType'] == '')) {
                    GRVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + "Nodata" + "__" + "Nodata" + "__" + "Nodata" + '__' + clientScriptVersion + "__" + schema[key]['type']['referenceType'];
                } else {

                    if (schema[key]['valueList']['type'] == 'scriptAction') {
                        GRVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion + "__" + schema[key]['type']['referenceType'];
                    }
                }
            }
				}
            var isMandatory = false;

            if (schema[key]['constraints']) {
				if(schema[key]['constraints']['required']){
					if (displayValue != 'datagrid') {
						if (typeof visibility == 'object') {
							GRVariable.mandatory = schema[key]['constraints']['required'];
						} else {
							GRVariable.mandatory = (schema[key]['constraints']['required'] && visibility);
						}
						isMandatory = GRVariable.mandatory + "";
					}
				}
                if (schema[key]['constraints']['min-value']) {
                    if (displayValue == 'dateTime') {
                        GRVariable.x_vmw_cloudservice_cas_min_date = schema[key]['constraints']['min-value'];
                    } else {
                        GRVariable.x_vmw_cloudservice_vra_minimum = schema[key]['constraints']['min-value'];
                    }
                }
                if (schema[key]['constraints']['max-value']) {
                    if (displayValue == 'dateTime') {
                        GRVariable.x_vmw_cloudservice_cas_max_date = schema[key]['constraints']['max-value'];
                    } else {
                        GRVariable.x_vmw_cloudservice_vra_maximum = schema[key]['constraints']['max-value'];
                    }
                }

                if (schema[key]['constraints']['pattern']) {
                    GRVariable.x_vmw_cloudservice_pattern = schema[key]['constraints']['pattern']['value'];
                    GRVariable.x_vmw_cloudservice_pattern_message = schema[key]['constraints']['pattern']['message'];
                }
            }

            if (schema[key]['signpost']) {
                GRVariable.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
				GRVariable.show_help = true;
            }


            if (schema[key]['placeholder']) {
                GRVariable.example_text = schema[key]['placeholder'];
            }
            if (schema[key]['label']) {
                GRVariable.question_text = schema[key]['label'];
            } else {
                GRVariable.question_text = key;
            }

            if (displayValue == 'text') {
                GRVariable.type = '11';
                if (schema[key]['default'] == 'undefined' || schema[key]['default'] == undefined || schema[key]['default'] == '' || typeof schema[key]['default'] == 'object') {
                    GRVariable.question_text = displayValue;
                } else {
                    GRVariable.question_text = schema[key]['default'];
                }
                GRVariable.x_vmw_cloudservice_cas_name = 'LAB__' + key;
            }

            if(!(custom_properties['nested_read'] == 'true' || custom_properties['nested_read'] == true)){
				GRVariable.x_vmw_cloudservice_field_readonly = readOnly;
			}
            GRVariable.x_vmw_cloudservice_field_visibility = visibility;
            GRVariable.display_title = 'true';
            GRVariable.cat_item = catalog;
            GRVariable.visible_standalone = visibility;

            GRVariable.x_vmw_cloudservice_versions = GRVariable.x_vmw_cloudservice_versions + version + ",";
            GRVariable.active = 'true';

            if (catalogType == 'action' && displayValue == 'checkbox') {
                GRVariable.order = this.order + 2;
            } else {
                GRVariable.order = this.order;
            }
            this.order = this.order + 3;

            if (catalogType == 'action') {
                GRVariable.x_vmw_cloudservice_vra_day2_action = actionId;
                GRVariable.x_vmw_cloudservice_vra_day2_version = day2Versions;
            }
			if(custom_properties['custom_property_check'] == true || custom_properties['custom_property_check'] == 'true'){
				GRVariable.x_vmw_cloudservice_datatype = 'objectfield';
				GRVariable.x_vmw_cloudservice_property_container = contKey;
			}
            GRVariable.visible_standalone = 'true';
            GRVariable.visible_bundle = 'true';
            GRVariable.visible_guide = 'true';
            GRVariable.x_vmw_cloudservice_vraorginalkeyname = key;
            GRVariable.visible_summary = 'true';
            GRVariable.variable_width = '100';
            if (dropdown && !( /*displayValue == 'multiSelect' || displayValue == 'dualList' || */ displayValue == 'valuePicker' || displayValue == 'radio')) {
                GRVariable.include_none = 'true';
            }


            var variable = GRVariable.insert();

            if (dropdown == 'true') {
                this.createChoices(schema[key]["valueList"], variable);

            }

            var returnId = (isMacro) ? macroSysId + "" : variable + "";
			
            var varProperties = {
                "sys_id": returnId,
                "mandatory": isMandatory,
                "type": displayValue,
                "isDropdown": dropdown,
                "value": default_val,
                "name": (isMacro) ? 'macro_' + name : name,
                "isMacro": isMacro,
				"isExternal_dropdown" : check_external_dropdown,
				"readonly" : readOnly
            };
			
            CASLogger.debug('Inside CatalogImport.createVariable: returnId: ' + returnId + ' varProperties: ' + JSON.stringify(varProperties));
            return varProperties;

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createVariable: Exception Block: catalog: ' + catalog + ' clientScriptVersion: ' + clientScriptVersion + ' dropdown: ' + dropdown + ' isMacro: ' + isMacro + ' macroSysId: ' + macroSysId + ' VersionCheck: ' + VersionCheck + ' name: ' + name + ' returnId: ' + returnId + ' varProperties: ' + varProperties + ' constraints: ' + constraints + ' def_val: ' + def_val);
            CASLogger.error("Exception caught inside CatalogImport.createVariable " + e + 'in Variable ' + key + ". Error found" + e.stack);
        }
    },
	
	createDatagrid: function(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, catalogVraId){
		try{
			CASLogger.debug('Inside the CatalogImport.createDatagrid:---catalog: '  + catalog + ' key: '+ key + ' catalogType: ' + catalogType + ' catalogId: ' + catalogVraId + ' version: ' + version);
			
			if (!catalogVraId) {
				return;
			}
			var len = schema[key]['type']['fields'].length;
		
			if(len == 0){
				return;
			}
		
			var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
			var VersionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			var name = '';
			
			if (version == '' || version == 'undefined' || version == 'undefined,') {
					name = VersionCheck + "_mrvs";
			} else {
					var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
					name = VersionCheck  + "_mrvs" + "_" + versionEncrypt;
			}
			
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var label = schema[key]['label'];
			
			var myVarSetAttrs = {
					"title": label,
					"internal_name": name,
					"description": visibility,
					"name": key,
					"type": 'one_to_many',
					"sys_scope": scope
			};

			var myVarSet = new sn_sc.CatalogItemVariableSet();
			myVarSet.setAttributes(myVarSetAttrs);
			var myVarSetId = myVarSet.create(true);
			var id = myVarSetId;
			
			CASLogger.debug('Inside the CatalogImport.createDatagrid:---catalog: ' + catalog + ' version: ' + version + ' name: ' + name + ' variable Set ID: ' + id);
		
			var varset = new sn_sc.CatalogItemVariableSetM2M();
			var attr = {
				'variable_set':id,
				'sc_cat_item': catalog,
				'sys_scope': scope
			};
			varset.setAttributes(attr);
			varset.create(true);
		
			var grVariable = new GlideRecord(this.appUtil.configuration.table.variable);
			grVariable.initialize();
			grVariable.sys_scope = scope;
			grVariable.mandatory = 'false';
			grVariable.variable_set = id;
			
			var result = {};
			result[key] = [];
		
			for(var p =0 ; p< len ; p++){
				var dg_datatype = schema[key]['type']['fields'][p]['type']['dataType'];
				var dg_key = schema[key]['type']['fields'][p].id;
				var dg_key_original_name = dg_key;
				var dg_key_new = name + '__' +dg_key.replace(rgx, ' ').trim().replaceAll(' ', '_');
				var dg_key_name = '';
				if (version == '' || version == 'undefined' || version == 'undefined,') {
					dg_key_name = name + '__' +dg_key.replace(rgx, ' ').trim().replaceAll(' ', '_');
				}else{
					dg_key_name = name + '__' +dg_key.replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + versionEncrypt;
				}
				result[key].push({ "id": dg_key_name ,"dataType": dg_datatype});
				var dg_label = schema[key]['type']['fields'][p]['label'];
				var dg_def_val = '';
				if(schema[key]['type']['fields'][p]['default']){
					dg_def_val = schema[key]['type']['fields'][p]['default'];
				}
				var dg_constraints = [];
				if(schema[key]['type']['fields'][p]['constraints']){
					dg_constraints = schema[key]['type']['fields'][p]['constraints'];
				}
				this.insertDataGridvariable(grVariable, dg_datatype, dg_label, dg_key_name, dg_key_original_name, id, dg_def_val, version, catalog, dg_constraints, dg_key_new);
				this.order += 1;
			}
			
			var flds = schema[key]['type']['fields'];
			this.createVarsetOnsubmit(flds,version, versionEncrypt, name,id, len);

			var constant_dep = 'false';
			
			var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n" + "function onLoad(){";
			var description = 'set_datagrid';
		
			if(schema[key]['default'] != 'undefined' &&  schema[key]['default'] != undefined && schema[key]['default']['type'] != 'scriptAction'){
				CASLogger.debug('Inside if block of default value for the CatalogImport.createDatagrid:---catalog: ' + catalog + ' version: ' + version + ' name: ' + name);
				constant_dep = 'true';
				var def_vals = JSON.stringify(schema[key]['default']);
				var parsed_def_val = JSON.parse(def_vals);
				var newKey = '';
				parsed_def_val.forEach(function(obj) {
					Object.keys(obj).forEach(function(col, index) {
						var key1 = col.replace(rgx, ' ').trim().replaceAll(' ', '_');
						if (version == '' || version == 'undefined' || version == 'undefined,') {
							newKey = name + '__' + key1;
						}else{
							newKey = name + '__' + key1 + '__' + versionEncrypt;
						}
						
						for (var k = 0; k < result[key].length; k++) {
							var d_id =  result[key][k].id;
							var dtype = result[key][k].dataType;
							if(dtype == 'dateTime' && d_id == newKey){
								this.appUtil = new CASAppUtil();
								var value = obj[col] + '';
								var d = new Date(value);
								value = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
								obj[newKey] = value + '';
							}else if(!(dtype == 'dateTime')){
								obj[newKey] = obj[col] + '';
							}
						}
						delete obj[col];
					});
				});
				var new_def_vals = JSON.stringify(parsed_def_val);
				script +=  "var def  =  '" + new_def_vals + "' ; def = JSON.parse(def);var obj =(g_form.getValue('"+name.toLowerCase()+"').length != 0) ?JSON.parse(g_form.getValue('"+name.toLowerCase()+"')): [];for(var i=0; i < def.length; i++){obj.push(def[i]);}g_form.setValue('"+name.toLowerCase()+"', JSON.stringify(obj));";
			}
			
			
			if(readOnly != '' && (typeof(readOnly) != 'object')){
				constant_dep = 'true';
				script += "g_form.setReadOnly('"+name.toLowerCase()+"', '"+readOnly+"');";
			}
			if((visibility == 'false' || visibility == false) && (typeof(visibility) != 'object')){
				constant_dep = 'true';
				script += "g_form.setVisible('"+name.toLowerCase()+"', '"+visibility+"');g_form.setDisplay('"+name.toLowerCase()+"', '"+visibility+"');";
				
			}
			
			script += '}';
			
			if(constant_dep == 'true'){
				this.daoUtil.insertClientScript(catalog, script,'', description, name);
			}
		
			var varProperties = {
				"sys_id": id,
                "mandatory": 'false',
                "type": displayValue,
                "isDropdown": 'false',     
                "name":  name,
                "isMacro": 'false',
				"isExternal_dropdown" : 'false'
            };
			
			CASLogger.debug('Inside the CatalogImport.createDatagrid:---catalog: ' + catalog + ' version: ' + version + ' name: ' + name + ' properties: ' + JSON.stringify(varProperties));
		
			return varProperties;
			
		}catch(e){
			CASLogger.debug('Inside Catch Block of CatalogImport.createDatagrid: Exception Block: variable: ' + name + ' versionCheck: ' + VersionCheck  + ' sys_id: ' + id + ' varProperties: ' + varProperties);
            CASLogger.error("Exception caught inside CatalogImport.createDatagrid " + e + 'in Variable ' + key +  "catalog:" + catalog + ". Error found" + e.stack);
		}
		
	},
	
	createVarsetOnsubmit: function(flds,version, versionEncrypt, name,id, len){
		try{
			
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var var_ids = [];
			for (var i = 0; i < flds.length; i++) {
  				var current_id = flds[i];
  				var_ids.push(current_id.id);
			}
			var onSubmitscript = "function onSubmit() { var rgx = new RegExp('[^a-zA-Z0-9]', 'g'); var multiRow; if (window == null) { multiRow = my_g_form.getValue('" + name.toLowerCase() + "'); } else { multiRow = parent.g_form.getValue('" + name.toLowerCase() + "'); } var fieldNames = []; var ver = '" + version + "'; var fld = '" + JSON.stringify(var_ids) + "'; var newfld = JSON.parse(fld); for (var i = 0; i < '" + len + "'; i++) { if (ver == '' || ver == 'undefined' || ver == 'undefined,') { dg_key = '" + name + "' + '__' + newfld[i].replace(rgx, ' ').trim().replaceAll(' ', '_'); } else { dg_key = '" + name + "' + '__' + newfld[i].replace(rgx, ' ').trim().replaceAll(' ', '_') + '__' + '" + versionEncrypt + "'; } fieldNames.push(dg_key); } var obj = {}; for (var j = 0; j < fieldNames.length; j++) { var fieldName = fieldNames[j]; obj[fieldName] = g_form.getValue(fieldName); } if (multiRow) { multiRow = JSON.parse(multiRow); var result = multiRow.filter(function(item) { for (var k = 0; k < fieldNames.length; k++) { var fieldName = fieldNames[k]; if (item[fieldName] !== obj[fieldName]) { return false; } } return true; }); if (result.length > 0) { g_form.addErrorMessage('Data provided is already entered.'); return false; } } }";
			var onSubmitClientScript = new sn_sc.CatalogClientScript();
            onSubmitClientScript.setAttributes({
                'name': "OnSubmit for " + name,
                'description': 'x_vmw_clientScript_' + 'onSubmit ' + name,
                'applies_to': 'set',
                'ui_type': '10',
                'type': 'onSubmit',
                'sys_scope': scope,
                'variable_set': id,
                'active': 'true',
            });

			onSubmitClientScript.addScript(onSubmitscript);
            onSubmitClientScript.appliesToCatalogItem(true);
            onSubmitClientScript.create();

		}catch(e){
			CASLogger.debug('Inside Catch Block of CatalogImport.createVarsetOnsubmit: Exception Block: variableset: ' + name + ' version ' + version);
            CASLogger.error("Exception caught inside CatalogImport.createVarsetOnsubmit " + e + 'in Variableset ' + name +  ". Error found" + e.stack);
		}
	},
	
	insertDataGridvariable: function(grVariable, dg_datatype, dg_label, dg_key_name, dg_key_original_name, id, dg_def_val, version, catalog,dg_constraints,dg_key_new){
		try{
			
			CASLogger.debug('Inside the CatalogImport.insertDataGridvariable:---variable set id ' + id + ' dg_datatype ' + dg_datatype + ' dg_label ' + dg_label + 'dg_key_name: ' + dg_key_name);
			grVariable.validate_regex = '';
			grVariable.mandatory = 'false';
			var pattern = '';
			var minValue = '';
			var maxValue = '';
			var patternMessage = '';
			grVariable.x_vmw_cloudservice_cas_name = '';
			if (dg_datatype == 'string') {
				grVariable.type = '6';
			} else if (dg_datatype == 'boolean') {
				grVariable.type = '7';
			} else if (dg_datatype == 'integer') {
			if (!this.number) {
				var validationGR = new GlideRecord(this.appUtil.configuration.table.regex);
				validationGR.addEncodedQuery('active=true^name=Integer');
				validationGR.query();
				if (validationGR.next()) {
					this.number = validationGR.sys_id;
				}
			}
			grVariable.validate_regex = this.number;
			grVariable.type = '6';
			} else if (dg_datatype === 'decimal') {
			
			if (!this.decimal) {
				var decimalGR = new GlideRecord(this.appUtil.configuration.table.regex);
				decimalGR.addEncodedQuery('active=true^name=Decimal');
				decimalGR.query();
				if (decimalGR.next()) {
					this.decimal = decimalGR.sys_id;
				} else {
					decimalGR.initialize();
					decimalGR.name = 'Decimal';
					decimalGR.validation_message = 'Not a Decimal Number';
					decimalGR.regex = '^[-+]?\\d+(\\.\\d+)?$';
					this.decimal = decimalGR.insert();
				}
			}
			grVariable.validate_regex = this.decimal;
			grVariable.type = '6';
			} else if (dg_datatype == 'secureString') {
				grVariable.type = '25';
				grVariable.mask_use_encryption = true;
			} else if (dg_datatype == 'dateTime') {
				if(dg_def_val != ''){
					var d = new Date(dg_def_val);
                    dg_def_val = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
				}
				
				grVariable.x_vmw_cloudservice_cas_name = 'DATE__' + dg_key_new;
				grVariable.type = '10';
			}
			if (!(dg_constraints == undefined || dg_constraints == 'undefined')) {
		    if (dg_constraints['required']) {
		        grVariable.mandatory = 'true';
		    }
		    if (dg_constraints['max-value']) {
		        if (dg_datatype == 'dateTime') {
		            var d = new Date(dg_constraints['max-value']);
		            var maxValue2 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
		            maxValue = '"' + maxValue2 + '" ';
		        } else {
		            maxValue = dg_constraints['max-value'];
		        }
		        grVariable.x_vmw_cloudservice_vra_maximum = maxValue;
		    }
		    if (dg_constraints['min-value']) {
		        if (dg_datatype == 'dateTime') {
		            var d = new Date(dg_constraints['min-value']);
		            var minValue2 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
		            minValue = '"' + minValue2 + '" ';
		        } else {
		            minValue = dg_constraints['min-value'];
		        }
		        grVariable.x_vmw_cloudservice_vra_minimum = minValue;
		    }
		    if (dg_constraints['pattern']) {
		        pattern = dg_constraints['pattern']['value'];
		        grVariable.x_vmw_cloudservice_pattern = pattern;
		        patternMessage = dg_constraints['pattern']['message'];
		        grVariable.x_vmw_cloudservice_pattern_message = patternMessage;
		    }
		}
			
    
			grVariable.x_vmw_cloudservice_vraorginalkeyname = dg_key_original_name;
			grVariable.question_text = dg_label;
			grVariable.name = dg_key_name;
			grVariable.default_value = dg_def_val;
			grVariable.x_vmw_cloudservice_versions = version;
			grVariable.order = this.order;
			grVariable.insert();
			
			if(minValue || maxValue || pattern){
				this.clientscript = this.daoUtil.insertValidationScript(minValue, maxValue, pattern, dg_datatype, catalog, version, dg_key_new, patternMessage, this.clientscript, id);
			}
			
		}catch(e){
			CASLogger.debug('Inside Catch Block of CatalogImport.insertDataGridvariable: Exception Block: variable: ' + ' dg_datatype : ' + dg_datatype +  ' dg_label: ' + dg_label + ' dg_key_name: ' + dg_key_name);
            CASLogger.error("Exception caught inside CatalogImport.insertDataGridvariable " + e +  ". Error found" + e.stack);
		}
		
	},

	
	create_custom_property_schema: function(key, value){
		try {
			var new_schema = {};
			new_schema[key] = value;
			return new_schema;
			} catch (e) {
				CASLogger.error("Exception caught inside CatalogImport.create_custom_property_schema" + e + 'in Variable ' + key + ". Error found" + e.stack);
			}
	},
	
	create_custom_property_constraints: function(schema1, field1, datatype, catalog, version, field){
		try{
					
			var minValue = '';
			var maxValue = '';
			var pattern = '';
			var s1 = schema1[field1].constraints;
		
			var patternMessage = '';
			for(var validation in s1){
				if(validation == 'min-value'){
					minValue = s1[validation];
				}
				if(validation == 'max-value'){
					maxValue = s1[validation];
				}
				if(validation == 'pattern'){
					pattern = s1[validation].value;
					patternMessage = s1[validation].message;
				}
			}
			if(minValue || maxValue || pattern){
				this.clientscript = this.daoUtil.insertValidationScript(minValue, maxValue, pattern, datatype, catalog, version, field, patternMessage, this.clientscript);
			}
		}catch(e){
				CASLogger.error("Exception caught inside CatalogImport.create_custom_property_constraints" + e + 'in Variable ' + field1 + ". Error found" + e.stack);
		}
	},
	
	/*
	Function Name : setNestedReadOnly
	Comments : This Function is used to set fiedls as readonly which are part of properties in Property Groups.
	Created On : 14/02/2023
	Created By : Prajakta
	
	*/
	
	setNestedReadOnly : function (custom_properties, field_created, catalog, custom_property_key, version, contKey1){
		try{
			field_created = field_created + '__' + version;
			var readGr = new GlideRecord(this.appUtil.configuration.table.variable);
			readGr.addQuery('cat_item', catalog);
			readGr.addQuery('name', field_created );
			readGr.query();
			if(readGr.next()){
				if(custom_properties[contKey1] != 'undefined' && custom_properties[contKey1] != undefined){
					for(var i=0; i< custom_properties[contKey1].length; i++){
						if(custom_properties[contKey1][i]['state'] != undefined){
							if(custom_properties[contKey1][i]['state']['read-only'] == true){
								if(custom_properties[contKey1][i].id == custom_property_key){
									readGr.x_vmw_cloudservice_field_readonly = true;
									readGr.update();
									
								}
							}
						}
					}
				}
			}
		}catch(e){
			CASLogger.error("Exception caught inside CatalogImport.setNestedReadOnly e " + e + 'in Variable ' + custom_property_key +  "catalog:" + catalog + ". Error found" + e.stack);
		}
	},

    /*
    Function Name : updateVariable
    Comments: This is used to update variable for catalog item and Day-2 actions based on the variable type
    Updated On: 30/05/2022, 24/05/2022, 22/11/22
    Updated By: Shivam, Prajakta
    Update Comments : Handle the checkbox order for day-2 action.
    Prajakta Comments: Handled default values for dropdown having valuelist and also handled for dropdown without label.  Added the support of custom properties and property groups for displaytype 'objectField'.
    */
    updateVariable: function(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions,custom_properties, contKey) {
        try {

            CASLogger.debug('Inside the CatalogImport.updateVariable:---catalog: ' + catalog + ' catalogType: ' + catalogType + ' catalogId: ' + catalogVraId + 'actionId: ' + actionId + ' day2Versions: ' + day2Versions);
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var variable = '';
            var versionCheck = '';
            var clientScriptVersion;
			if((custom_properties['nested_var'] == true || custom_properties['nested_var'] == 'true') || (displayValue == 'objectField' && (custom_properties['custom_property_check'] == false || custom_properties['custom_property_check'] == 'false'))){
				versionCheck =   'custom_property' + '__' + key.replace(rgx, ' ').trim().replaceAll(' ', '_');
				
			}else if(custom_properties['custom_property_check'] == true || custom_properties['custom_property_check'] =='true' ){
				versionCheck =   'custom_property' + '__' + contKey + '__' +key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			}
			else{
				versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			}

			CASLogger.debug('Inside the CatalogImport.updateVariable: versionCheck: ' + versionCheck);
            if (version == '' || version == "undefined" || version == "undefined,") {
                if (catalogType == 'action') {
                    variable = versionCheck + '__' + day2Versions;
                    clientScriptVersion = 'day2Versions';
                } else {
                    variable = versionCheck;
                    clientScriptVersion = 'undefined';
                }
            } else {
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                variable = versionCheck + "__" + versionEncrypt;
                clientScriptVersion = version;
                CASLogger.debug('Inside Else ---CatalogImport.updateVariable---: clientScriptVersion: ' + clientScriptVersion);
            }
			var check_external_dropdown = 'false';
			if(schema[key]["valueList"] && schema[key]["valueList"]['type'] == 'scriptAction' && displayValue == 'dropDown'){
				check_external_dropdown = 'true';
			}
            var dropdown = 'false';
            var isMacro = false;
            var macroSysId = "";

            var grVariable = this.daoUtil.genericGRquery(this.appUtil.configuration.table.variable, 'name=' + variable + '^cat_item=' + catalog, '1');

            grVariable.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            if (grVariable.next()) {
                grVariable.mandatory = 'false';
                grVariable.default_value = '';
                grVariable.x_vmw_cloudservice_cas_min_date = '';
                grVariable.x_vmw_cloudservice_vra_minimum = '';
                grVariable.x_vmw_cloudservice_cas_max_date = '';
                grVariable.x_vmw_cloudservice_vra_maximum = '';
                grVariable.x_vmw_cloudservice_pattern = '';
                grVariable.x_vmw_cloudservice_pattern_message = '';
                grVariable.x_vmw_cloudservice_step = '';
                grVariable.tooltip = '';
                grVariable.example_text = '';
                grVariable.x_vmw_cloudservice_vra_value_client_script = '';
                grVariable.x_vmw_cloudservice_vra_default_value_client_script = '';
                grVariable.type = '6';

                grVariable.x_vmw_cloudservice_cas_name = 'STR__' + key;
                CASLogger.debug('Inside CatalogImport.updateVariable:---displayValue: ' + displayValue);
				
				
				if (displayValue == 'objectField' && (!(catalogVraId=='' && key == 'Warning'))) {
					var contKey1 = key;
					custom_properties['custom_property_check'] = true;
					var properties = {};	
					var properties_array = [];
					var custom_property_name = key;
					var custom_property_container_name = 'custom_property' + '__' + key;
					var custom_property_title = (this.appUtil.stringify(schema[key]['label'])).replaceAll('"', ''); 
					var type_schema = schema[key]['type'];
					var custom_property_length = type_schema.fields.length;
						
					this.createContainerStart(catalog, custom_property_container_name, custom_property_title, this.order, version, visibility, catalogVraId, 'false', actionId, day2Versions , schema[key]);
						
					for(var i= 0; i<custom_property_length ; i++){
						custom_properties['nested_var'] = 'false';
						var custom_property_datatype = type_schema.fields[i]['type']['dataType'];
						var custom_property_key =  type_schema.fields[i]['id'];
						var custom_property_value = type_schema['fields'][i];
						var new_schema = {};
						var custom_property_constraints = '';
						var checkBlue;
						var field_created = 'custom_property' + '__' + contKey1 + '__' + custom_property_key.replaceAll(' ', '_');
							
						if(custom_property_datatype == 'complex' ){
							checkBlue = this.daoUtil.checkVariable(custom_property_key, catalog, version, catalogVraId, actionId, day2Versions,displayValue);
						}else{
							checkBlue = this.daoUtil.checkVariable(custom_property_key, catalog, version, catalogVraId, actionId, day2Versions, displayValue, contKey1);
						}
						
							if(custom_property_datatype == 'string'){
								new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								if (checkBlue == 'create') {
									properties = this.createVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);

								} if (checkBlue == 'update') {
								
									properties = this.updateVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);
								}
								
								if(new_schema[custom_property_key].constraints){
									custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, custom_property_datatype, catalog, version, field_created);
								}
								
							}
							if(custom_property_datatype == 'integer'){
								var prop_integer = 'integerField';
								new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								
								if (checkBlue == 'create') {
									properties = this.createVariable(custom_property_key, catalog, version, new_schema, prop_integer, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);

								} if (checkBlue == 'update') {
								
									properties = this.updateVariable(custom_property_key, catalog, version, new_schema, prop_integer, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);
								}
																
								if(new_schema[custom_property_key].constraints){
									custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, prop_integer, catalog, version, field_created);
								}
								
							}
						    if(custom_property_datatype == 'secureString'){
								var secure_string = 'passwordField';
								new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								if (checkBlue == 'create') {
									properties = this.createVariable(custom_property_key, catalog, version, new_schema, secure_string, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
								}
								if (checkBlue == 'update') {
									properties = this.updateVariable(custom_property_key, catalog, version, new_schema, secure_string, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
								}
								if (new_schema[custom_property_key].constraints) {
									custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, custom_property_datatype, catalog, version, field_created);
								}

							}
						    if(custom_property_datatype == 'decimal'){
								var decimal_field = 'decimalField';
									new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								    if (checkBlue == 'create') {
										properties = this.createVariable(custom_property_key, catalog, version, new_schema, decimal_field, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
									}
								    if (checkBlue == 'update') {
										properties = this.updateVariable(custom_property_key, catalog, version, new_schema, decimal_field, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
									}
								    if (new_schema[custom_property_key].constraints) {
										custom_property_constraints = this.create_custom_property_constraints(new_schema, custom_property_key, decimal_field, catalog, version, field_created);
									}
							}
						    if(custom_property_datatype == 'dateTime'){
								new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								    if (checkBlue == 'create') {
										properties = this.createVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
									}
								    if (checkBlue == 'update') {
										properties = this.updateVariable(custom_property_key, catalog, version, new_schema, custom_property_datatype, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
									}
							}
							if(custom_property_datatype == 'boolean'){
								var checkBox = 'checkbox';
								new_schema = this.create_custom_property_schema(custom_property_key, custom_property_value);
								if (checkBlue == 'create') {
									properties = this.createVariable(custom_property_key, catalog, version, new_schema, checkBox, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);

								} if (checkBlue == 'update') {
								
									properties = this.updateVariable(custom_property_key, catalog, version, new_schema, checkBox, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties,contKey1);
								}
								
								
							}
						
							if(custom_property_datatype == 'complex'){
								custom_properties['nested_var'] = 'true';
								var displayval = 'objectField';
								var obj_schema = schema[key]['type']['fields'][i];
								var obj_schema1 = {};
								var obj_key = schema[key]['type']['fields'][i].id;
								obj_schema1[obj_key] = {};
								obj_schema1[obj_key] = obj_schema;
								if (checkBlue == 'create') {
									this.createVariable(obj_key, catalog, version, obj_schema1, displayval, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
								}
								if (checkBlue == 'update') {
								this.updateVariable(obj_key, catalog, version, obj_schema1, displayval, visibility, readOnly, size, catalogType, catalogVraId, actionId, day2Versions, custom_properties, contKey1);
								}
						
							}
							
						    if(custom_properties['nested_read'] == 'true' || custom_properties['nested_read'] == true){
								this.setNestedReadOnly(custom_properties, field_created, catalog, custom_property_key, version, contKey1);
							}
							properties_array.push(properties);
						}
					
						this.createContainerEnd(catalog, custom_property_container_name, version, visibility, catalogVraId, 'false', actionId, day2Versions);
												
						return properties_array;
						
				}
				

                if (displayValue == 'textField' || displayValue == 'dropDown' || displayValue == 'textArea') {
                    if (!catalogVraId) {
                        var catalogClientScript = new sn_sc.CatalogClientScript();
                        var grClient = new GlideRecord(this.appUtil.configuration.table.clientScript);
                        grClient.addEncodedQuery('cat_item=' + catalog + '^nameSTARTSWITH' + variable + '^nameLIKE' + 'dependent');
                        grClient.query();
                        while (grClient.next()) {
                            catalogClientScript.deleteRecord(grClient.sys_id);
                        }
                    }
                }

             /*   if (displayValue == 'datagrid') {
                    if (!catalogVraId) {
                        grVariable.deleteRecord();
                        return;
                    }
                    grVariable.x_vmw_cloudservice_field_json = this.appUtil.stringify(schema[key]);
                    grVariable.x_vmw_cloudservice_datatype = 'DataGrid';
                    grVariable.x_vmw_cloudservice_step = size;
                    macroSysId = this.updateMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                    this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version);
                    isMacro = true;
                }*/

                if (displayValue == 'integerField') {

                    if (!this.number) {
                        var validationGR = new GlideRecord(this.appUtil.configuration.table.regex);
                        validationGR.addEncodedQuery('active=true^name=Integer');
                        validationGR.query();
                        if (validationGR.next()) {
                            this.number = validationGR.sys_id;
                        }

                    }
                    grVariable.x_vmw_cloudservice_cas_name = 'INT__' + key;
					if(custom_properties['custom_property_check'] == 'false' || custom_properties['custom_property_check'] == false){
						grVariable.x_vmw_cloudservice_step = schema[key]['step'];
					}
                    grVariable.validate_regex = this.number;
                }
                if (displayValue == 'decimalField') {

                    if (!this.decimal) {
                        var decimalGR = new GlideRecord(this.appUtil.configuration.table.regex);
                        decimalGR.addEncodedQuery('active=true^name=Decimal');
                        decimalGR.query();
                        if (decimalGR.next()) {
                            this.decimal = decimalGR.sys_id;
                        } else {
                            decimalGR.initialize();
                            decimalGR.name = 'Decimal';
                            decimalGR.validation_message = 'Not a Decimal Number';
                            decimalGR.regex = '^[-+]?\d+(\.\d+)?$';
                            var decimal = decimalGR.insert();
                            this.decimal = decimal;
                        }

                    }
                    grVariable.x_vmw_cloudservice_datatype = 'Decimal';
                    grVariable.x_vmw_cloudservice_cas_name = 'INT__' + key;
                    if(custom_properties['custom_property_check'] == 'false' || custom_properties['custom_property_check'] == false){
						grVariable.x_vmw_cloudservice_step = schema[key]['step'];
					}
                    grVariable.validate_regex = this.decimal;
                }
                if (displayValue == 'passwordField') {
                    grVariable.type = '25';
                    grVariable.x_vmw_cloudservice_cas_name = 'PSD__' + key;
                    grVariable.mask_use_encryption = true;
                }
                if (displayValue == 'dateTime') {
                    grVariable.type = '10';
                    grVariable.x_vmw_cloudservice_cas_name = 'DATE__' + key;
                }
                if (displayValue == 'textArea') {
                    grVariable.type = '2';
                }

                if (displayValue == 'checkbox') {
                    var labelName = '';
                    if (versionEncrypt == 'undefined' || versionEncrypt == undefined) {
                        if (catalogType == 'action') {
                            labelName = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + day2Versions;
                        } else {
                            labelName = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__";
                        }
                    } else {
                        labelName = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + versionEncrypt;
                    }

                    var lablevariable1 = new GlideRecord(this.appUtil.configuration.table.variable);
                    lablevariable1.addEncodedQuery('name=' + labelName + '^cat_item=' + catalog);
                    lablevariable1.query();
                    if (lablevariable1.next()) {
                        lablevariable1.type = "11";
                        lablevariable1.cat_item = catalog; // catalog item
                        lablevariable1.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID); // application
                        lablevariable1.active = "true";
                        if (schema[key]['label']) {
                            lablevariable1.question_text = schema[key]['label'];
                        } else {
                            lablevariable1.question_text = key;
                        }
						if (schema[key]['signpost']) {
							lablevariable1.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
							lablevariable1.show_help = true;
						}
                        if (versionEncrypt == 'undefined' || versionEncrypt == undefined) {
                            if (catalogType == 'action') {
                                lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + day2Versions;
                            } else {
                                lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__";
                            }
                        } else {
                            lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + versionEncrypt;
                        }

                        if (catalogType == 'action') {
                            lablevariable1.x_vmw_cloudservice_vra_day2_action = actionId;
                            lablevariable1.x_vmw_cloudservice_vra_day2_version = day2Versions;
                            lablevariable1.order = this.order + 1;
                        } else {
                            lablevariable1.order = this.order;
                            this.order = this.order + 3;
                        }

                        lablevariable1.update();
                    } else {
                        lablevariable1.initialize();
                        lablevariable1.type = "11";
                        lablevariable1.cat_item = catalog; // catalog item
                        lablevariable1.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID); // application
                        lablevariable1.active = "true";
                        if (schema[key]['label']) {
                            lablevariable1.question_text = schema[key]['label'];
                        } else {
                            lablevariable1.question_text = key;
                        }
						if (schema[key]['signpost']) {
							lablevariable1.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
							lablevariable1.show_help = true;
						}
                        if (versionEncrypt == 'undefined' || versionEncrypt == undefined) {
                            if (catalogType == 'action') {
                                lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + day2Versions;
                            } else {
                                lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__";
                            }
                        } 
						else {
                            lablevariable1.name = key.replace(rgx, ' ').trim().replaceAll(' ', '_') + "_label__" + versionEncrypt;
                            lablevariable1.x_vmw_cloudservice_versions = version + ",";
                        }
						
                        if (catalogType == 'action') {
                            lablevariable1.x_vmw_cloudservice_vra_day2_action = actionId;
                            lablevariable1.x_vmw_cloudservice_vra_day2_version = day2Versions;
                            lablevariable1.order = this.order + 1;
                        } else {
                            lablevariable1.order = this.order;
                            this.order = this.order + 3;
                        }

                        lablevariable1.insert();
                    }


                    grVariable.type = '7';
                    grVariable.x_vmw_cloudservice_cas_name = 'BOOL__' + key;

                    //}
                }
				
				var default_val = this.getConstantDefaultValue(schema, key, displayValue);
				
				if(catalogVraId == ''){
					grVariable.default_value = default_val;
				}
			
				if(!schema[key]['default'] && displayValue == 'checkbox'){
					default_val = 'false';
				}

				if (schema[key]['default'] != undefined) {
                	if (schema[key]['default']['type'] == 'scriptAction') {
                        if (schema[key]['default']['parameters'] == '' || schema[key]['default']['parameters'] == null) {
                            grVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        } else {
                            grVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        }
                    } else {
                        if (typeof schema[key]['default'] === 'object') {
                            if (!schema[key]['default']['bind'] && !Array.isArray(schema[key]['default'])) {
                                grVariable.default_value = this.appUtil.stringify(schema[key]['default']);
                            }
                        }
					}
				}
				
                if (schema[key]["valueList"]) {
                    grVariable.type = '5';
                    dropdown = 'true';

                    if (schema[key]['valueList']['type'] == 'scriptAction' && displayValue != 'valuePicker') {



                        if (schema[key]['valueList']['parameters'] == '' || schema[key]['valueList']['parameters'] == null) {
                            grVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion;
                        } else {
                            grVariable.x_vmw_cloudservice_vra_value_client_script = "OnChange__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion;
                        }

                    }

                }
                if (displayValue == 'multiSelect') {
                    if (!catalogVraId) {
                        grVariable.deleteRecord();
                        return;
                    }
                    grVariable.x_vmw_cloudservice_datatype = 'Multiselect';
                    var def_val = schema[key];
                    var constraints = schema[key]['constraints'];
                    constraints["read_only"] = readOnly;
                    def_val['constraints'] = constraints;
                    def_val["field_id"] = variable;
                    macroSysId = this.updateMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                    this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val);
                    isMacro = true;
                }
                if (displayValue == 'dualList') {
                    if (!catalogVraId) {
                        grVariable.deleteRecord();
                        return;
                    }
                    grVariable.x_vmw_cloudservice_datatype = 'Duallist';
                    var def_val = schema[key];
                    var constraints = schema[key]['constraints'];
                    constraints["read_only"] = readOnly;
                    def_val['constraints'] = constraints;
                    def_val["field_id"] = variable;
                    macroSysId = this.updateMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
                    this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val);
                    isMacro = true;
                }
                if (displayValue == 'radio') {
                    if (!catalogVraId) {
                        grVariable.deleteRecord();
                        return;
                    }
                    grVariable.type = '3';
                    grVariable.x_vmw_cloudservice_cas_name = 'RADO__' + key;
                    grVariable.do_not_select_first = true;
                    dropdown = 'true';
					grVariable.default_value = default_val;

                }
                if (displayValue == 'valuePicker') {
					if (catalogVraId=='' && (key == 'newOwner'|| key == 'targetProjectId')){
					grVariable.type = '5';
					grVariable.x_vmw_cloudservice_datatype = 'ValuePicker';

				}else{
                    grVariable.type = '6';
                    grVariable.x_vmw_cloudservice_datatype = 'ValuePicker';
                    var def_val = schema[key];
                    var constraints = schema[key]['constraints'] || {};
                    constraints["read_only"] = readOnly;
                    def_val['constraints'] = constraints;
                    def_val["field_id"] = variable;
                    macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, actionId, day2Versions);
                    isMacro = true;
                    if (catalogType != 'action') {
                        this.createClientScriptForDynamicDatatype(catalog, displayValue, key, version, def_val, catalogType, catalogVraId);
                    }

                    if ((schema[key]['valueList'] == '' || schema[key]['valueList'] == null || schema[key]['valueList'] == undefined) && (schema[key]['type']['referenceType'] != null || schema[key]['type']['referenceType'] == '' || schema[key]['type']['referenceType'] == undefined)) {
                        grVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + "Nodata" + "__" + "Nodata" + "__" + "Nodata" + '__' + clientScriptVersion + "__" + schema[key]['type']['referenceType'];
                    } else {

                        if (schema[key]['valueList']['type'] == 'scriptAction') {
                            grVariable.x_vmw_cloudservice_vra_value_client_script = "OnLoad__" + schema[key]['valueList']['id'] + "__" + schema[key]['valueList']['type'] + "__" + this.appUtil.stringify(schema[key]['valueList']['parameters']) + '__' + clientScriptVersion + "__" + schema[key]['type']['referenceType'];
                        }
                    }
                }
			}

                var isMandatory = false;

                if (schema[key]['constraints']) {
					if(schema[key]['constraints']['required']){
						if (displayValue != 'datagrid') {
							if (typeof visibility == 'object') {
								grVariable.mandatory = schema[key]['constraints']['required'];
							} else {
								grVariable.mandatory = (schema[key]['constraints']['required'] && visibility);
							}
							isMandatory = grVariable.mandatory + "";
						}
					}
                    if (schema[key]['constraints']['min-value']) {
                        if (displayValue == 'dateTime') {
                            grVariable.x_vmw_cloudservice_cas_min_date = schema[key]['constraints']['min-value'];
                        } else {
                            grVariable.x_vmw_cloudservice_vra_minimum = schema[key]['constraints']['min-value'];
                        }
                    }
                    if (schema[key]['constraints']['max-value']) {
                        if (displayValue == 'dateTime') {
                            grVariable.x_vmw_cloudservice_cas_max_date = schema[key]['constraints']['max-value'];
                        } else {
                            grVariable.x_vmw_cloudservice_vra_maximum = schema[key]['constraints']['max-value'];
                        }
                    }
                    if (schema[key]['constraints']['pattern']) {
                        grVariable.x_vmw_cloudservice_pattern = schema[key]['constraints']['pattern']['value'];
                        grVariable.x_vmw_cloudservice_pattern_message = schema[key]['constraints']['pattern']['message'];
                    }
                }
                if (schema[key]['signpost']) {
                    grVariable.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
					grVariable.show_help = true;
                }


                if (schema[key]['placeholder']) {
                    grVariable.example_text = schema[key]['placeholder'];
                }
                if (schema[key]['label']) {
                    grVariable.question_text = schema[key]['label'];
                } else {
                    grVariable.question_text = key;
                }

                if (displayValue == 'text') {
                    grVariable.type = '11';
                    if (schema[key]['default'] == 'undefined' || schema[key]['default'] == undefined || schema[key]['default'] == '' || typeof schema[key]['default'] == 'object') {
                        grVariable.question_text = displayValue;
                    } else {

                        grVariable.question_text = schema[key]['default'];
                    }
                    grVariable.x_vmw_cloudservice_cas_name = 'LAB__' + key;
                }
                if (grVariable.x_vmw_cloudservice_versions && version && !grVariable.x_vmw_cloudservice_versions.contains(version)) {
                    grVariable.x_vmw_cloudservice_versions = grVariable.x_vmw_cloudservice_versions + version + ",";
                }

                grVariable.active = 'true';
				if(!(custom_properties['nested_read'] == 'true' || custom_properties['nested_read'] == true)){
					grVariable.x_vmw_cloudservice_field_readonly = readOnly;
				}
                grVariable.x_vmw_cloudservice_field_visibility = visibility;
                grVariable.x_vmw_cloudservice_vraorginalkeyname = key;
                grVariable.visible_standalone = 'true';

                if (catalogType == 'action') {
                    grVariable.x_vmw_cloudservice_vra_day2_action = actionId;
                    grVariable.x_vmw_cloudservice_vra_day2_version = day2Versions;
                }
				
				if(custom_properties['custom_property_check'] == true || custom_properties['custom_property_check'] == 'true'){
					grVariable.x_vmw_cloudservice_datatype = 'objectfield';
					grVariable.x_vmw_cloudservice_property_container = contKey;
				}
                if (catalogType == 'action' && displayValue == 'checkbox') {
                    grVariable.order = this.order + 2;
                } else {
                    grVariable.order = this.order;
                }
                this.order = this.order + 3;

                grVariable.variable_width = '100';
                if (dropdown && !( /*displayValue == 'multiSelect' || displayValue == 'dualList' || */ displayValue == 'valuePicker' || displayValue == 'radio')) {
                    grVariable.include_none = 'true';
                }


                var Updatevariable = grVariable.update();
                if (dropdown == 'true') {
                    this.createChoices(schema[key]["valueList"], Updatevariable);
                    this.daoUtil.DeleteQuestionChoices(schema[key]["valueList"], Updatevariable);
                }

                var returnId = (isMacro) ? macroSysId + "" : Updatevariable + "";
                var varProperties = {
                    "sys_id": returnId,
                    "mandatory": isMandatory,
                    "type": displayValue,
                    "isDropdown": dropdown,
                    "value": default_val,
                    "name": (isMacro) ? 'macro_' + variable : variable,
                    "isMacro": isMacro,
					"isExternal_dropdown" : check_external_dropdown,
					"readonly" : readOnly
                };
				
                CASLogger.debug('Inside CatalogImport.updateVariable: returnId: ' + returnId + 'varProperties: ' + JSON.stringify(varProperties));
                return varProperties;
            }


        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.updateVariable: Exception Block: variable: ' + variable + ' versionCheck: ' + versionCheck + ' clientScriptVersion: ' + clientScriptVersion + ' dropdown: ' + dropdown + ' isMacro: ' + isMacro + ' macroSysId: ' + macroSysId + ' returnId: ' + returnId + ' varProperties: ' + varProperties + ' isMandatory: ' + isMandatory + ' def_val: ' + def_val + ' constraints: ' + constraints);
            CASLogger.error("Exception caught inside CatalogImport.updateVariable " + e + 'in Variable ' + key +  "catalog:" + catalog + ". Error found" + e.stack);
        }
    },


	
	updateDatagrid: function(key, catalog, version, schema, displayValue, visibility, readOnly, size, customCatalogType, catalogVraId,check_columns){
		try{
			CASLogger.debug('Inside Catch Block of CatalogImport.updateDatagrid: Exception Block: catalog: '  + catalog + ' key: '+ key  + ' catalogType: ' + customCatalogType + ' catalogId: ' + catalogVraId + ' version: ' + version);
			var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var VersionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
			var variableSet = '';
			
			if (version == '' || version == 'undefined' || version == 'undefined,') {
					variableSet = VersionCheck + "_mrvs";
			} else {
					var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
					variableSet = VersionCheck + "_mrvs" + "_" + versionEncrypt;
			}
			
			var grVariable = this.daoUtil.genericGRquery('io_set_item', 'variable_set.internal_name=' + variableSet + '^sc_cat_item=' + catalog, '1');
			grVariable.addQuery('sys_scope', scope);
			
			if (grVariable.next()) {
				var var_set = new GlideRecord(this.appUtil.configuration.table.variable_Set);
				var_set.addQuery('sys_id', grVariable.variable_set.sys_id); 
				var_set.query();
				
				if(var_set.next()){
				var varset = new sn_sc.CatalogItemVariableSet(var_set.getUniqueValue());

				var updateVarSet__id = var_set.sys_id;
				var dg_schema = schema[key]['type']['fields'];
				var len = schema[key]['type']['fields'].length;
				var label = schema[key]['label'];
					
				var attr = {
					'description': visibility,
					'title': label,
					'name': key,
				};
				
				var result = {};
				result[key] = [];
					
					for(var p =0 ; p< len ; p++){
						var dg_datatype = schema[key]['type']['fields'][p]['type']['dataType'];
						var dg_key_original_name = schema[key]['type']['fields'][p].id;
						var dg_key = '';
						var dg_key_new1 = variableSet + '__' +  schema[key]['type']['fields'][p].id.replace(rgx, ' ').trim().replaceAll(' ', '_');
						if (version == '' || version == 'undefined' || version == 'undefined,') {
							dg_key = variableSet + '__' +  schema[key]['type']['fields'][p].id.replace(rgx, ' ').trim().replaceAll(' ', '_');
						}else{
							dg_key = variableSet + '__' +  schema[key]['type']['fields'][p].id.replace(rgx, ' ').trim().replaceAll(' ', '_')  + '__' + versionEncrypt;
						}
						result[key].push({ "id": dg_key ,"dataType": dg_datatype});
						var dg_label = schema[key]['type']['fields'][p]['label'];
						var dg_def_val;
						if(schema[key]['type']['fields'][p]['default']){
							dg_def_val = schema[key]['type']['fields'][p]['default'];
						}else{
							dg_def_val = '';
						}
						var dg_constraints = [];
						if(schema[key]['type']['fields'][p]['constraints']){
							dg_constraints = schema[key]['type']['fields'][p]['constraints'];
						}
						var checkdg = this.checkVariable_dg(dg_key, variableSet, dg_schema, version, updateVarSet__id);
						
						var gr_var = new GlideRecord(this.appUtil.configuration.table.variable);
						if(checkdg == 'create'){
							gr_var.initialize();
							gr_var.sys_scope = scope;
							gr_var.variable_set = updateVarSet__id; 
							this.insertDataGridvariable(gr_var, dg_datatype, dg_label, dg_key, dg_key_original_name, updateVarSet__id, dg_def_val, dg_constraints, dg_key_new1);
						}
						if(checkdg == 'update'){
							gr_var.addQuery('sys_scope', scope);
							gr_var.addQuery('name',dg_key);
							gr_var.addQuery('variable_set', updateVarSet__id);
							gr_var.query();
							if(gr_var.next()){
								gr_var.validate_regex = '';
								gr_var.mandatory = 'false';
								var minValue = '';
								var maxValue = '';
								var pattern = '';
								var patternMessage = '';
								gr_var.x_vmw_cloudservice_cas_name = '';
								if(dg_datatype == 'string'){
									gr_var.type = '6';
								} else if (dg_datatype == 'boolean') {
									gr_var.type = '7';
								} else if (dg_datatype == 'integer') {
									if (!this.number) {
										var validationGR = new GlideRecord(this.appUtil.configuration.table.regex);
										validationGR.addEncodedQuery('active=true^name=Integer');
										validationGR.query();
										if (validationGR.next()) {
											this.number = validationGR.sys_id;
										}
									}
									gr_var.validate_regex = this.number;
									gr_var.type = '6';
								} else if (dg_datatype === 'decimal') {
        
									if (!this.decimal) {
										var decimalGR = new GlideRecord(this.appUtil.configuration.table.regex);
										decimalGR.addEncodedQuery('active=true^name=Decimal');
										decimalGR.query();
										if (decimalGR.next()) {
											this.decimal = decimalGR.sys_id;
										} else {
											decimalGR.initialize();
											decimalGR.name = 'Decimal';
											decimalGR.validation_message = 'Not a Decimal Number';
											decimalGR.regex = '^[-+]?\\d+(\\.\\d+)?$';
											this.decimal = decimalGR.insert();
										}
									}
									gr_var.validate_regex = this.decimal;
									gr_var.type = '6';
								} else if (dg_datatype == 'secureString') {
									gr_var.type = '25';
									gr_var.mask_use_encryption = true;
								} else if (dg_datatype == 'dateTime') {
									if(dg_def_val != ''){
										var d = new Date(dg_def_val);
                                        dg_def_val = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
									}
									gr_var.x_vmw_cloudservice_cas_name = 'DATE__' + dg_key_new1;
									gr_var.type = '10';
								}
								if (!(dg_constraints == undefined || dg_constraints == 'undefined')) {
									if (dg_constraints['required']) {
										gr_var.mandatory = 'true';
									}
									if (dg_constraints['max-value']) {
										if (dg_datatype == 'dateTime') {
											var d = new Date(dg_constraints['max-value']);
											var maxValue2 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
											maxValue = '"' + maxValue2 + '" ';
										} else {
											maxValue = dg_constraints['max-value'];
										}
										gr_var.x_vmw_cloudservice_vra_maximum = maxValue;

									}
									if (dg_constraints['min-value']) {
										if (dg_datatype == 'dateTime') {
											var d = new Date(dg_constraints['min-value']);
											var minValue2 = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
											minValue = '"' + minValue2 + '" ';
										} else {
											minValue = dg_constraints['min-value'];
										}
										gr_var.x_vmw_cloudservice_vra_minimum = minValue;
									}
									if (dg_constraints['pattern']) {
										pattern = dg_constraints['pattern']['value'];
										gr_var.x_vmw_cloudservice_pattern = pattern;
										patternMessage = dg_constraints['pattern']['message'];
										gr_var.x_vmw_cloudservice_pattern_message = patternMessage;
									}
								}
								gr_var.x_vmw_cloudservice_vraorginalkeyname = dg_key_original_name;
								gr_var.question_text = dg_label;
								gr_var.default_value = dg_def_val;
								gr_var.name = dg_key;
								gr_var.x_vmw_cloudservice_versions = version;
								gr_var.variable_set = var_set.sys_id;
								gr_var.order = this.order;
								var update_id = gr_var.update();
								this.order += 1;
								
								if(minValue || maxValue || pattern){
				this.clientscript = this.daoUtil.insertValidationScript(minValue, maxValue, pattern, dg_datatype, catalog, version, dg_key_new1, patternMessage, this.clientscript, updateVarSet__id);
								}
							}
						}
					}
					varset.update(attr, true);
				}
			}
			
			var flds = schema[key]['type']['fields'];
			this.createVarsetOnsubmit(flds,version,versionEncrypt,variableSet,updateVarSet__id, len);

			var constant_dep = 'false';
			
			var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){";
			var description = 'set_datagrid';
			
			if(schema[key]['default'] != 'undefined' &&  schema[key]['default'] != undefined && schema[key]['default']['type'] != 'scriptAction'){
				constant_dep = 'true';
				var def_vals = JSON.stringify(schema[key]['default']);
				var parsed_def_val = JSON.parse(def_vals);
				var newKey = '';
				parsed_def_val.forEach(function(obj) {
					Object.keys(obj).forEach(function(col, index) {
						var key1 = col.replace(rgx, ' ').trim().replaceAll(' ', '_');
						if (version == '' || version == 'undefined' || version == 'undefined,') {
							newKey = variableSet + '__' + key1;
						}else{
							newKey = variableSet + '__' + key1 + '__' + versionEncrypt;
						}
						for (var k = 0; k < result[key].length; k++) {
							var d_id = result[key][k].id;
							var dtype = result[key][k].dataType;
							if(dtype == 'dateTime' && d_id == newKey){
								this.appUtil = new CASAppUtil();
								var value = obj[col] + '';
								var d = new Date(value);
								value = d.getFullYear() + "-" + this.appUtil.appendLeadingZeroes(d.getMonth() + 1) + "-" + this.appUtil.appendLeadingZeroes(d.getDate()) + " " + this.appUtil.appendLeadingZeroes(d.getHours()) + ":" + this.appUtil.appendLeadingZeroes(d.getMinutes()) + ":" + this.appUtil.appendLeadingZeroes(d.getSeconds());
								obj[newKey] = value + '';
							}else if(!(dtype == 'dateTime')){
								obj[newKey] = obj[col] + '';
							}
						}
						delete obj[col];
					});
				});
				var new_def_vals = JSON.stringify(parsed_def_val);
				script +=  "var def  =  '" + new_def_vals + "' ; def = JSON.parse(def);var obj =(g_form.getValue('"+variableSet.toLowerCase()+"').length != 0) ?JSON.parse(g_form.getValue('"+variableSet.toLowerCase()+"')): [];for(var i=0; i < def.length; i++){obj.push(def[i]);}g_form.setValue('"+variableSet.toLowerCase()+"', JSON.stringify(obj));";	
			}
			
			if(readOnly != '' && (typeof(readOnly) != 'object')){
				constant_dep = 'true';
				script += "g_form.setReadOnly('"+variableSet.toLowerCase()+"', '"+readOnly+"');";
			}
			
			if((visibility == 'false' || visibility == false) && (typeof(visibility) != 'object')){
				constant_dep = 'true';
				script += "g_form.setVisible('"+variableSet.toLowerCase()+"', '"+visibility+"');g_form.setDisplay('"+variableSet.toLowerCase()+"', '"+visibility+"');";
				
			}
			
			script += '}';
			
			if(constant_dep == 'true'){
				this.daoUtil.insertClientScript(catalog, script,'', description, variableSet);
			}
			var varProperties = {
				"sys_id": updateVarSet__id,
                "mandatory": 'false',
                "type": displayValue,
                "isDropdown": 'false',
                "name":  variableSet,
                "isMacro": 'false',
				"isExternal_dropdown" : 'false'
            };
			
			CASLogger.debug('Inside the CatalogImport.updateDatagrid:---catalog: ' + catalog + ' version: ' + version + ' name: ' + variableSet + ' properties: ' + JSON.stringify(varProperties));
			
			return varProperties;
			
		}catch(e){
			CASLogger.debug('Inside Catch Block of CatalogImport.updateDatagrid: Exception Block:  '  + ' catalog: '  +  catalog + 'variableSet name: ' + variableSet + ' versionCheck: ' + VersionCheck  + ' sys_id: ' + updateVarSet__id + ' varProperties: ' + varProperties);
            CASLogger.error("Exception caught inside CatalogImport.updateDatagrid " + e + ". Error found" + e.stack);
		}
		
	},
	
	checkVariable_dg: function(dg_key, variableSet, dg_schema, version, update_id){
		try{
			CASLogger.debug('Inside the CatalogImport.checkVariable_dg: Update variable set: '  + update_id + ' name: ' + variableSet + ' update column: ' + dg_key + ' version: ' + version);
			var current_var = [];
			var scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
			var gr_var = new GlideRecord(this.appUtil.configuration.table.variable);
			gr_var.addQuery('sys_scope', scope);
			gr_var.addQuery('variable_set.sys_id', update_id); 
			gr_var.query();
			while(gr_var.next()){
				current_var.push(gr_var.getValue('name'));
			}
			if(current_var.indexOf(dg_key) !== -1){
				return 'update';
			}else{
				return 'create';
			}
			
		}catch(e){
			CASLogger.debug('Inside Catch Block of CatalogImport.checkVariable_dg: Exception Block: Update variable set: '  + update_id + ' name: ' + variableSet + ' column: ' + dg_key + ' version: ' + version);
            CASLogger.error("Exception caught inside CatalogImport.checkVariable_dg " + e + ". Error found" + e.stack);
		}
		
	},
	
	

    createChoices: function(choices, variable) {
        try {

            CASLogger.debug('Inside the CatalogImport.createChoices: variable: ' + variable + ' choices: ' + choices);
            for (var i = 0; i < choices.length; i++) {
                if (!(choices[i].label == 'undefined' || choices[i].label == undefined)) {
                    this.daoUtil.insertCustomChoice(choices[i].label, choices[i].value, variable, i);
                } else {
                    this.daoUtil.insertCustomChoice(choices[i], choices[i], variable, i);
                }
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createChoices: Exception Block: choices: ' + choices + ' variable: ' + variable);
            CASLogger.error("Exception caught inside CatalogImport.createChoices " + e + ". Error found" + e.stack);
        }
    },


    createMacroVariable: function(key, catalog, version, schema, displayValue, visibility, readOnly, size, catalogType, actionId, day2Versions) {
        try {
            CASLogger.debug('Inside the CatalogImport.createMacroVariable : reconcile CatalogItem----Version: ' + version + ' catalog: ' + catalog + ' catalogType: ' + catalogType + ' actionId: ' + actionId + ' day2Versions: ' + day2Versions);

            var macroVariable = new GlideRecord(this.appUtil.configuration.table.variable);
            macroVariable.initialize();
            macroVariable.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            macroVariable.x_vmw_cloudservice_cas_name = 'STR__' + key;
            macroVariable.mandatory = 'false';

            var clientScriptVersion = version;
            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogType == 'action') {
                    clientScriptVersion = day2Versions + '';
                } else {
                    clientScriptVersion = 'undefined';
                }
            }
            var macro_name = '';
            var name = '';
            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var VersionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
            if (version == '' || version == 'undefined' || version == 'undefined,') {
                if (catalogType == 'action') {
                    macroVariable.name = 'macro_' + VersionCheck + '__' + day2Versions;
                    macro_name = 'macro_' + VersionCheck + '__' + day2Versions;
                    name = VersionCheck + '__' + day2Versions;
                } else {
                    macroVariable.name = 'macro_' + VersionCheck;
                    macro_name = 'macro_' + VersionCheck;
                    name = VersionCheck;
                }
            } else {
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                macroVariable.name = 'macro_' + VersionCheck + '__' + versionEncrypt;
                macro_name = 'macro_' + VersionCheck + '__' + versionEncrypt;
                name = VersionCheck + '__' + versionEncrypt;
            }
            CASLogger.debug('Inside CatalogImport.createMacroVariable:----Name---- ' + name);

            var dropdown = 'false';
            var defaultClientScript = '';
            if (schema[key]['default']) {

                if (schema[key]['default']['type'] == 'scriptAction') {
                    if (schema[key]['default']['parameters'] == '' || schema[key]['default']['parameters'] == null) {
                        macroVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        defaultClientScript = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                    } else {
                        macroVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        defaultClientScript = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                    }

                } else {

                    if (typeof schema[key]['default'] === 'object') {

                        macroVariable.default_value = this.appUtil.stringify(schema[key]['default']);

                    } else {
                        macroVariable.default_value = schema[key]['default'];
                    }
                }

            }
            CASLogger.debug('Inside CatalogImport.createMacroVariable:----DisplayValue---- ' + displayValue);
            if (displayValue == 'multiSelect') {
                macroVariable.type = '17';
                var def_val = schema[key];
                var constraints = schema[key]['constraints'];
                constraints["read_only"] = readOnly;
                def_val['constraints'] = constraints;
                def_val["field_id"] = name;
                macroVariable.default_value = this.appUtil.stringify(def_val);
                macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_multiselect_widget_sysid);
                macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_multiselect_ui_macro_sysid);
            }

            if (displayValue == 'dualList') {
                macroVariable.type = '17';
                var def_val = schema[key];
                var constraints = schema[key]['constraints'];
                constraints["read_only"] = readOnly;
                def_val['constraints'] = constraints;
                def_val["field_id"] = name;
                macroVariable.default_value = this.appUtil.stringify(def_val);
                macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_duallist_widget_sysid);
                macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_duallist_ui_macro_sysid);
            }

            if (displayValue == 'valuePicker') {
                var macroJSON = {};
                if (catalogType == 'action') {
                    macroJSON = {
                        "field_name": key + '__' + day2Versions
                    };
                } else {
                    macroJSON = {
                        "field": {
                            "visible": visibility,
                            "versions": version + ",",
                            "read_only": readOnly,
                            "mandatory": (schema[key]['constraints']['required']) ? (schema[key]['constraints']['required']) : false,
                            "macro_name": macro_name,
                            "name": name,
                            "display_name": (schema[key]['label']) ? schema[key]['label'] : key,
                            "json": schema[key],
                            "defaultClientScript": defaultClientScript
                        }
                    };
                }
                macroVariable.type = '17';
                //   var def_val = schema[key];
                //   var constraints. = schema[key]['constraints'];
                //  constraints["read_only"] = readOnly;
                //   def_val['constraints'] = constraints;
                //   def_val["field_id"] = name;
                macroVariable.default_value = this.appUtil.stringify(macroJSON);
                macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_valuepicker_widget_sysid);
                macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_valuepicker_ui_macro_sysid);
            }

            if (displayValue == 'datagrid') {
				var defaultValue = [];
				if(schema[key]['default']){
					defaultValue = (schema[key]['default']['type'] == undefined) ? (schema[key]['default']) : [];
				}
                var macroJSON = {
                    "field": {
                        "visible": visibility,
                        "versions": version + ",",
                        "read_only": readOnly,
                        "macro_name": macro_name,
                        "name": name,
                        "display_name": (schema[key]['label']) ? schema[key]['label'] : key,
                        "json": schema[key],
                        "default_value": defaultValue,
                        "pageSize": size + '',
                        "defaultClientScript": defaultClientScript
                    }
                };

                macroVariable.type = '17';
                macroVariable.default_value = this.appUtil.stringify(macroJSON);
                macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_datagrid_widget_sysid);
                macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_datagrid_ui_macro_sysid);
            }



            if (schema[key]['constraints']) {
				if(schema[key]['constraints']['required']){
					if (displayValue != 'datagrid') {
						if (typeof visibility == 'object') {
							macroVariable.mandatory = schema[key]['constraints']['required'];
						} else {
							macroVariable.mandatory = (schema[key]['constraints']['required'] && visibility);
						}
					}
				}
                if (schema[key]['constraints']['min-value']) {
                    if (displayValue == 'dateTime') {
                        macroVariable.x_vmw_cloudservice_cas_min_date = schema[key]['constraints']['min-value'];
                    } else {
                        macroVariable.x_vmw_cloudservice_vra_minimum = schema[key]['constraints']['min-value'];
                    }
                }
                if (schema[key]['constraints']['max-value']) {
                    if (displayValue == 'dateTime') {
                        macroVariable.x_vmw_cloudservice_cas_max_date = schema[key]['constraints']['max-value'];
                    } else {
                        macroVariable.x_vmw_cloudservice_vra_maximum = schema[key]['constraints']['max-value'];
                    }
                }

                if (schema[key]['constraints']['pattern']) {
                    macroVariable.x_vmw_cloudservice_pattern = schema[key]['constraints']['pattern']['value'];
                    macroVariable.x_vmw_cloudservice_pattern_message = schema[key]['constraints']['pattern']['message'];
                }
            }

            if (schema[key]['signpost']) {
                macroVariable.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
				macroVariable.show_help = true;
            }


            if (schema[key]['placeholder']) {
                macroVariable.example_text = schema[key]['placeholder'];
            }
            if (schema[key]['label']) {
                macroVariable.question_text = schema[key]['label'];
            } else {
                macroVariable.question_text = key;
            }

            macroVariable.x_vmw_cloudservice_field_readonly = readOnly;
            macroVariable.x_vmw_cloudservice_field_visibility = visibility;
            macroVariable.display_title = 'true';
            macroVariable.cat_item = catalog;
            macroVariable.visible_standalone = visibility;

            macroVariable.x_vmw_cloudservice_versions = macroVariable.x_vmw_cloudservice_versions + version + ",";

            macroVariable.active = 'true';
            macroVariable.order = this.order;
            this.order = this.order + 3;
            macroVariable.visible_standalone = 'true';
            macroVariable.visible_bundle = 'true';
            macroVariable.visible_guide = 'true';
            macroVariable.x_vmw_cloudservice_vraorginalkeyname = key;
            macroVariable.visible_summary = 'false';
            if (schema[key]['label']) {
                macroVariable.question_text = schema[key]['label'];
            } else {
                macroVariable.question_text = key;
            }
            if (catalogType == 'action') {
                macroVariable.x_vmw_cloudservice_vra_day2_action = actionId;
                macroVariable.x_vmw_cloudservice_vra_day2_version = day2Versions;
            }


            var variable = macroVariable.insert();
            CASLogger.debug('Inside CatalogImport.createMacroVariable: variable: ' + variable);
            return variable + '';

        } catch (e) {
            CASLogger.debug('Inside the CatalogImport.createMacroVariable : Exception Block: macroVariable' + macroVariable + ' clientScriptVersion' + clientScriptVersion + ' macro_name: ' + macro_name + ' name: ' + name + ' VersionCheck: ' + VersionCheck + ' dropdown: ' + dropdown + ' variable: ' + variable + ' def_val' + def_val + ' constraints: ' + constraints + ' macroJSON: ' + macroJSON);
            CASLogger.error("Exception caught inside CatalogImport.createMacroVariable " + e + ". Error found" + e.stack);
        }
    },


    updateMacroVariable: function(key, catalog, version, schema, displayValue, visibility, readOnly, size) {
        try {
            CASLogger.debug('Inside the CatalogImport.updateMacroVariable : reconcile CatalogItem:---catalog: ' + catalog);

            var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
            var variable = '';
            var versionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
            CASLogger.debug('Inside updateMacroVariable----versionCheck: ' + versionCheck + ' version: ' + version);
            var clientScriptVersion;
            var name = '';
            var macroSysId = "";

            if (version == '' || version == "undefined" || version == "undefined,") {
                variable = 'macro_' + versionCheck;
                clientScriptVersion = 'undefined';
                name = versionCheck;
            } else {
                var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
                variable = "macro_" + versionCheck + "__" + versionEncrypt;
                clientScriptVersion = version;
                name = versionCheck + "__" + versionEncrypt;
            }

            var dropdown = 'false';
            var macroVariable = this.daoUtil.genericGRquery(this.appUtil.configuration.table.variable, 'name=' + variable + '^cat_item=' + catalog, '1');
            macroVariable.sys_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);
            if (!macroVariable.next()) {
                macroSysId = this.createMacroVariable(key, catalog, version, schema, displayValue, visibility, readOnly, size);
            } else {

                macroVariable.mandatory = 'false';
                macroVariable.default_value = '';
                macroVariable.x_vmw_cloudservice_cas_min_date = '';
                macroVariable.x_vmw_cloudservice_vra_minimum = '';
                macroVariable.x_vmw_cloudservice_cas_max_date = '';
                macroVariable.x_vmw_cloudservice_vra_maximum = '';
                macroVariable.x_vmw_cloudservice_pattern = '';
                macroVariable.x_vmw_cloudservice_pattern_message = '';
                macroVariable.x_vmw_cloudservice_step = '';
                macroVariable.tooltip = '';
                macroVariable.example_text = '';
                macroVariable.x_vmw_cloudservice_vra_value_client_script = '';
                macroVariable.x_vmw_cloudservice_vra_default_value_client_script = '';

                var defaultClientScript = '';
                if (schema[key]['default']) {

                    if (schema[key]['default']['type'] == 'scriptAction') {
                        if (schema[key]['default']['parameters'] == '' || schema[key]['default']['parameters'] == null) {
                            macroVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                            defaultClientScript = "OnLoad__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        } else {
                            macroVariable.x_vmw_cloudservice_vra_default_value_client_script = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                            defaultClientScript = "OnChange__" + schema[key]['default']['id'] + "__" + schema[key]['default']['type'] + "__" + this.appUtil.stringify(schema[key]['default']['parameters']) + '__' + clientScriptVersion;
                        }

                    } else {

                        if (typeof schema[key]['default'] === 'object') {

                            macroVariable.default_value = this.appUtil.stringify(schema[key]['default']);

                        } else {
                            macroVariable.default_value = schema[key]['default'];
                        }
                    }

                }
                CASLogger.debug('Inside CatalogImport.updateMacroVariable: DisplayValue: ' + displayValue);
                if (displayValue == 'multiSelect') {
                    var def_val = schema[key];
                    var constraints = schema[key]['constraints'];
                    constraints["read_only"] = readOnly;
                    def_val['constraints'] = constraints;
                    def_val["field_id"] = name;
                    macroVariable.default_value = this.appUtil.stringify(def_val);
                    macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_multiselect_widget_sysid);
                    macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_multiselect_ui_macro_sysid);
                }

                if (displayValue == 'dualList') {
                    var def_val = schema[key];
                    var constraints = schema[key]['constraints'];
                    constraints["read_only"] = readOnly;
                    def_val['constraints'] = constraints;
                    def_val["field_id"] = name;
                    macroVariable.default_value = this.appUtil.stringify(def_val);
                    macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_duallist_widget_sysid);
                    macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_duallist_ui_macro_sysid);
                }

                if (displayValue == 'valuePicker') {
                    var macroJSON = {
                        "field": {
                            "visible": visibility,
                            "versions": version + ",",
                            "read_only": readOnly,
                            "macro_name": macro_name,
                            "name": name,
                            "display_name": (schema[key]['label']) ? schema[key]['label'] : key,
                            "json": schema[key],
                            "defaultClientScript": defaultClientScript
                        }
                    };
                    macroVariable.type = '17';

                    macroVariable.default_value = this.appUtil.stringify(macroJSON);
                    //	macroVariable.x_vmw_cloudservice_field_json = this.appUtil.stringify(schema[key]);
                    //  macroVariable.x_vmw_cloudservice_step = size;
                    macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_valuepicker_widget_sysid);
                    macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_valuepicker_ui_macro_sysid);
                }

                if (displayValue == 'datagrid') {
					var defaultValue = [];
					if(schema[key]['default']){
						defaultValue = (schema[key]['default']['type'] == undefined) ? (schema[key]['default']) : [];
					}
                    var macroJSON = {
                        "field": {
                            "visible": visibility,
                            "versions": version + ",",
                            "read_only": readOnly,
                            "macro_name": variable,
                            "name": name,
                            "display_name": (schema[key]['label']) ? schema[key]['label'] : key,
                            "json": schema[key],
                            "default_value": defaultValue,
                            "pageSize": size + '',
                            "defaultClientScript": defaultClientScript
                        }
                    };
                    macroVariable.default_value = this.appUtil.stringify(macroJSON);
                    macroVariable.x_vmw_cloudservice_field_json = this.appUtil.stringify(schema[key]);
                    macroVariable.x_vmw_cloudservice_step = size;
                    macroVariable.sp_widget = gs.getProperty(this.appUtil.configuration.properties.cas_datagrid_widget_sysid);
                    macroVariable.macro = gs.getProperty(this.appUtil.configuration.properties.cas_datagrid_ui_macro_sysid);
                }

                if (schema[key]['constraints']) {
					if(schema[key]['constraints']['required']){
						if (displayValue != 'datagrid') {
							if (typeof visibility == 'object') {
								macroVariable.mandatory = schema[key]['constraints']['required'];
							} else {
								macroVariable.mandatory = (schema[key]['constraints']['required'] && visibility);
							}
						}
					}
                    if (schema[key]['constraints']['min-value']) {
                        if (displayValue == 'dateTime') {
                            macroVariable.x_vmw_cloudservice_cas_min_date = schema[key]['constraints']['min-value'];
                        } else {
                            macroVariable.x_vmw_cloudservice_vra_minimum = schema[key]['constraints']['min-value'];
                        }
                    }
                    if (schema[key]['constraints']['max-value']) {
                        if (displayValue == 'dateTime') {
                            macroVariable.x_vmw_cloudservice_cas_max_date = schema[key]['constraints']['max-value'];
                        } else {
                            macroVariable.x_vmw_cloudservice_vra_maximum = schema[key]['constraints']['max-value'];
                        }
                    }
                    if (schema[key]['constraints']['pattern']) {
                        macroVariable.x_vmw_cloudservice_pattern = schema[key]['constraints']['pattern']['value'];
                        macroVariable.x_vmw_cloudservice_pattern_message = schema[key]['constraints']['pattern']['message'];
                    }
                }
                if (schema[key]['signpost']) {
                    macroVariable.help_text = schema[key]['signpost'].split('<br>').join('\n').split('<BR>').join('\n').split('<Br>').join('\n').split('<bR>').join('\n');
					macroVariable.show_help = true;
                }


                if (schema[key]['placeholder']) {
                    macroVariable.example_text = schema[key]['placeholder'];
                }
                if (schema[key]['label']) {
                    macroVariable.question_text = schema[key]['label'];
                } else {
                    macroVariable.question_text = key;
                }

                if (!macroVariable.x_vmw_cloudservice_versions.contains(version)) {
                    macroVariable.x_vmw_cloudservice_versions = macroVariable.x_vmw_cloudservice_versions + version + ",";
                }

                macroVariable.active = 'true';
                macroVariable.x_vmw_cloudservice_field_readonly = readOnly;
                macroVariable.x_vmw_cloudservice_field_visibility = visibility;
                macroVariable.x_vmw_cloudservice_vraorginalkeyname = key;
                macroVariable.visible_standalone = 'true';
                macroVariable.order = this.order;
                this.order = this.order + 3;
                macroVariable.visible_summary = 'false';

                var Updatevariable = macroVariable.update();

                macroSysId = Updatevariable + '';
            }
            CASLogger.debug('Inside CatalogImport.updateMacroVariable: Value of macroSysId: ' + macroSysId);

            return macroSysId;
        } catch (e) {
            CASLogger.debug('Inside the CatalogImport.updateMacroVariable : Exception Block: rgx' + rgx + ' variable' + variable + ' versionCheck: ' + versionCheck + ' clientScriptVersion: ' + clientScriptVersion + ' name: ' + name + ' macroSysId: ' + macroSysId + ' dropdown: ' + dropdown + ' macroVariable: ' + macroVariable);
            CASLogger.error("Exception caught inside CatalogImport.updateMacroVariable " + e + ". Error found" + e.stack);
        }
    },



    reconcileCatalogItem: function(current) {

        try {
            CASLogger.debug('Inside the CatalogImport.reconcileCatalogItem : reconcile CatalogItem. ');
            var midserver = '';
            var catalogIdList = '';
            var endPoint = '';
            var token = '';

            if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                token = current.organization.api_token.getDecryptedValue().toString();
                endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=0&$orderby=name";
                CASLogger.debug('Inside CatalogImport.reconcileCatalogItem : cloud endpoint: ' + endPoint);
            }
            if (current.organization.select_automation_service == 'vrealizeAutomationService') {

                endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=0&$orderby=name";
                midserver = current.organization.mid_server.name;
                token = current.organization.api_token.getDecryptedValue().toString();
                CASLogger.debug('Inside CatalogImport.reconcileCatalogItem : endpoint: ' + endPoint + ' midserver: ' + midserver);

            }

            var response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
            CASLogger.debug('Inside CatalogImport.reconcileCatalogItem:---response: ' + response.getBody());
            if (response.haveError()) {
                var propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                for (var s = 0; s < propertyStatus.length; s++) {
                    if (propertyStatus[s] == response.getStatusCode()) {
                        CASLogger.error('Import::: Catalog: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.reconcileCatalogItem):");
                    } else {
                        CASLogger.error('Import::: Catalog: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n REST call error found inside CatalogImport.reconcileCatalogItem: \n Error found: ' + response.getErrorMessage());
                    }
                }

                return false;
            } else {
                var responsebody = response.getBody();
                var res = this.daoUtil.checkNull(responsebody);
                if (res == false || res == 'false') {
                    CASLogger.error('Inside null/empty if block of CatalogImport.reconcileCatalogItem:responsebody: ' + responsebody);
                    return false;
                } else {
                    CASLogger.debug('Inside Else---CatalogImport.reconcileCatalogItem: responsebody: ' + responsebody);
                    var obj = this.appUtil.parse(responsebody);
                    var catalogId = obj.content.length;
                    for (var i = 0; i < catalogId; i++) {
                        catalogIdList += obj.content[i].id + ";";
                        //CASLogger.debug('Inside for loop of catalogId of CatalogImport.reconcileCatalogItem:---catalogIdList: ' + catalogIdList);

                    }
                    CASLogger.debug('Inside CatalogImport.reconcileCatalogItem:---catalogIdList: ' + catalogIdList);
                    var pageElement = obj.totalPages;
                    for (var j = 1; j <= pageElement; j++) {

                        if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                            token = current.organization.api_token.getDecryptedValue().toString();
                            endPoint = current.organization.cas_url + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                        }
                        if (current.organization.select_automation_service == 'vrealizeAutomationService') {
                            endPoint = current.organization.hostname + this.appUtil.configuration.api.catalogItem + "?size=" + this.pageSize + "&page=" + j + "&$orderby=name";
                            midserver = current.organization.mid_server.name;
                            token = current.organization.api_token.getDecryptedValue().toString();
                        }

                        response = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                        CASLogger.debug('Inside for loop of pageElement of CatalogImport.reconcileCatalogItem:---response: ' + response);
                        if (response.haveError()) {
                            propertyStatus = gs.getProperty(this.appUtil.configuration.properties.statusCode).split(',');
                            for (s = 0; s < propertyStatus.length; s++) {
                                if (propertyStatus[s] == response.getStatusCode()) {
                                    CASLogger.error('Import::: Catalog: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n Error found: ' + this.appUtil.timeOutMessage(response.getStatusCode()) + ":(CatalogImport.reconcileCatalogItem):");
                                } else {
                                    CASLogger.error('Import::: Catalog: ' + '\n catalogId: ' + catalogId + '\n endPoint: ' + endPoint + '\n REST call error found inside CatalogImport.reconcileCatalogItem: \n Error found: ' + response.getErrorMessage());
                                }
                            }

                            return false;
                        } else {
                            responsebody = response.getBody();
                            var res = this.daoUtil.checkNull(responsebody);
                            if (res == false || res == 'false') {
                                CASLogger.error('Inside null/empty if block of CatalogImport.reconcileCatalogItem:responsebody: ' + responsebody);
                                return false;
                            } else {
                                obj = this.appUtil.parse(responsebody);
                                CASLogger.debug('Inside Else---CatalogImport.reconcileCatalogItem: Responsebody: ' + responsebody);
                                catalogId = obj.content.length;
                                for (i = 0; i < catalogId; i++) {
                                    catalogIdList += obj.content[i].id + ";";

                                }
                            }
                        }
                    }
                }
                CASLogger.debug('Inside CatalogImport.reconcileCatalogItem :---catalogIdList: ' + catalogIdList);
                if (catalogIdList) {

                    var checkCatalogId = this.daoUtil.reconcileCatalogCheck(catalogIdList, current);
                }
                return true;
            }
        } catch (e) {
            CASLogger.error("Import::: Catalog: " + "\n catalogId: " + catalogId + "\n endPoint: " + endPoint + "\n Exception caugth inside CatalogImport.reconcileCatalogItem " + e + ".\n Error found" + e.stack);
            CASLogger.debug('Inside the CatalogImport.reconcileCatalogItem : Exception Block: responsebody: ' + responsebody + ' catalogId: ' + catalogId + ' pageElement: ' + pageElement);
            return "exceptionError";
        }
    },

    checkobject: function(current, properties, CatalogVraId) {
        try {
            CASLogger.debug('Inside the CatalogImport.checkobject:---CatalogId: ' + CatalogVraId);
            var check = 'true';

            var XaaSWorkflowFilter = gs.getProperty(this.appUtil.configuration.properties.XaaSWorkflowFilter);
            if (XaaSWorkflowFilter == 'true' || XaaSWorkflowFilter == true) {

                CASLogger.debug('Inside if block of CatalogImport.checkobject:---XaaSWorkflowFilter: ' + XaaSWorkflowFilter);

                for (var key in properties) {

                    if (properties[key].type == 'object') {

                        this.daoUtil.customCatalogCheck(CatalogVraId, current.organization);

                        check = "false";

                    } else if (properties[key].type == 'array') {

                        if (properties[key]['items'].type == 'object' || properties[key]['items'].type == 'string' || properties[key]['items'].type == 'number') {

                            this.daoUtil.customCatalogCheck(CatalogVraId, current.organization);
                            //return false;
                            check = 'false';

                        }
                    }

                }
                CASLogger.debug('Inside CatalogImport.checkobject:---check: ' + check);
                return check;
            } else {
                return true;
            }
        } catch (e) {
            CASLogger.debug('Inside the CatalogImport.checkobject : Exception Block: check' + check + ' XaaSWorkflowFilter' + XaaSWorkflowFilter + ' CatalogId' + CatalogVraId);
            CASLogger.error("Exception caugth inside CatalogImport.checkobject " + e + ". Error found" + e.stack);
        }
    },

    /*	
    Function Name :createDefaultCatalogClientScript
    Comments: This function creates all the default client sripts for all the catalog items
    Updated On:14/05/2021, 05/07/2021, 29/07/2021,16/08/2021, 23/09/2021, 22/02/2022, 08/06/2022
    Updated By:Vaibhav Dane, vinod, Prateek,Ajay,Gayatri,Shivam Goyal, Prajakta
    Update Comments :Added condition in project client to make the project field read only if the project count is 1 and parsing the project id to getCatalogProjects function in FetchVersions script include. Added conditiom of the created Deployment name variable and makig the visibility and mandatory and phrasing the getDeployment in the FetchVersions
	Prateek Updates: Update the default client script for adding the Custom Aria Catalog Item Loader for Native UI and remove logs. 
	Ajay updates:- handeld the loader width and height witht he help of customer UI page
	Gayatri updates :-Update the onchange client script to get the system property value by using GlideAjax which checks if the answer is coming true then the loader will come and if false then won't come.
	Shivam updates:- Added condation in 'onLoadHideContainer'  to hide empty custom container on onload.
	Prajakta Updates : Added condition to make single version field as read-only.
    */
    createDefaultCatalogClientScript: function(catalog, catalogItemName) {
        try {
            CASLogger.debug('Inside the CatalogImport.createDefaultCatalogClientScript:---catalog: ' + catalog + ' catalogItemName: ' + catalogItemName);
            //var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var loadingDialog=new GlideDialogWindow('dialog_loading',true);loadingDialog.setPreference('table','loading');loadingDialog.setTitle('Loading...');loadingDialog.render();var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge');gAjax.addParam('sysparm_name','getVersions');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.getXMLAnswer(callBack);function callBack(response){var answer=response;if(answer=='[{\"label\":\"undefined\",\"value\":\"undefined\"}]'){g_form.setMandatory('u_version','false');g_form.setDisplay('u_version','false'); loadingDialog.destroy();}else {answer=answer.slice(0,-1);var arrVersion=answer.split(',');g_form.clearOptions('u_version');for(var i=0;i<arrVersion.length;i++){g_form.addOption('u_version',arrVersion[i],arrVersion[i]);}loadingDialog.destroy();}}}"; if(typeof g_form != 'undefined') catItemSysid = g_form.getValue('cat_item'); else

            var script = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad() { this.my_g_form = g_form; var currentUrl = this.location.href; var urlParams = new URLSearchParams(currentUrl); var catagoryId = urlParams.get('sysparm_link_parent') ? urlParams.get('sysparm_link_parent') : urlParams.get('sysparm_category'); var catItemSysId = ''; var RITMVersion = ''; var deleted_version = 'false'; g_form.setDisplay('variable_details', false); var cat_item = g_form.getValue('cat_item'); if (cat_item == '' || cat_item == undefined) { catItemSysId = g_form.getUniqueValue(); } else { catItemSysId = cat_item; RITMVersion = g_form.getValue('u_version'); } var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getVersions'); gAjax.addParam('sysparm_sys_id', catItemSysId); gAjax.addParam('sysparm_RITMVersion', RITMVersion); gAjax.getXML(callBack); sessionStorage.setItem('catalog_script_counter', 0); sessionStorage.setItem('catalog_script_counter', parseInt(sessionStorage.getItem('catalog_script_counter')) + 1); function callBack(response) { sessionStorage.setItem('catalog_script_counter', sessionStorage.getItem('catalog_script_counter') - 1); var answer = response.responseXML.documentElement.getAttribute('answer'); if (cat_item == '' || cat_item == undefined) { var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getCatalogProjects'); gAjax.addParam('sysparm_sys_id', catItemSysId); gAjax.addParam('sysparm_category_id', catagoryId); gAjax.getXMLAnswer(callBack1); sessionStorage.setItem('catalog_script_counter', parseInt(sessionStorage.getItem('catalog_script_counter')) + 1); function callBack1(response1) { sessionStorage.setItem('catalog_script_counter', sessionStorage.getItem('catalog_script_counter') - 1); if (response1 != 'false') { var values1 = JSON.parse(response1); g_form.clearOptions('u_project'); for (var i = 0; i < values1.length; i++) { g_form.addOption('u_project', values1[i].id, values1[i].name); } if (values1.length == 1) { g_form.setMandatory('u_project', false); g_form.setReadOnly('u_project', true); } } var versionArray = answer.split('||'); if (versionArray[1].startsWith('undefined') || versionArray[1] == undefined) { g_form.addOption('u_version', 'undefined', 'undefined'); g_form.setMandatory('u_version', false); g_form.setDisplay('u_version', false); } if (versionArray[0] == 'true') { var values = versionArray[1].split(','); g_form.clearOptions('u_version'); for (var i = 0; i < values.length - 1; i++) { g_form.addOption('u_version', values[i], values[i]); } if (values.length == 2) { g_form.setMandatory('u_version', false); g_form.setReadOnly('u_version', true); } } } } else { var versionArray = answer.split('||'); if (versionArray[1].startsWith('undefined') || versionArray[1] == undefined) { g_form.addOption('u_version', 'undefined', 'undefined'); g_form.setMandatory('u_version', false); g_form.setDisplay('u_version', false); } if (versionArray[0] == 'true') { var values = versionArray[1].split(','); g_form.clearOptions('u_version'); for (var i = 0; i < values.length - 1; i++) { g_form.addOption('u_version', values[i], values[i]); } if (values.length == 2) { g_form.setMandatory('u_version', false); g_form.setReadOnly('u_version', true); } } else { if (versionArray[1]) { var hideVariable = versionArray[1].split(','); for (var j = 0; j < hideVariable.length; j++) { g_form.setMandatory(hideVariable[j], false); g_form.setDisplay(hideVariable[j], false); } } deleted_version = 'true'; g_form.setDisplay('variable_details', true); } } var ver = g_form.getValue('u_version'); var abc = new GlideAjax('x_vmw_cloudservice.FetchVersions'); abc.addParam('sysparm_name', 'getDeployment'); abc.addParam('sysparm_sys_id', catItemSysId); abc.addParam('sysparm_version', ver); abc.getXML(callBackcode); function callBackcode(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer == 'correct') { g_form.setMandatory('u_deployment_name', false); g_form.setDisplay('u_deployment_name', false); } else { if(deleted_version == 'true' || deleted_version == true){ g_form.setMandatory('u_deployment_name', false); g_form.setDisplay('u_deployment_name', false); }else{ g_form.setMandatory('u_deployment_name', true); g_form.setDisplay('u_deployment_name', true); } } } } }";


            this.daoUtil.insertClientScript(catalog, script, catalogItemName, 'getVersionsAndProjects');

            //                         var scriptproject = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var currentUrl=this.location.href;var urlParams=new URLSearchParams(currentUrl);var catagoryId=urlParams.get('sysparm_link_parent')?urlParams.get('sysparm_link_parent'):urlParams.get('sysparm_category');var catItemSysid=g_form.getUniqueValue();var gAjax=new GlideAjax('x_vmw_cloudservice.FetchVersions');gAjax.addParam('sysparm_name','getCatalogProjects');gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.addParam('sysparm_category_id',catagoryId);gAjax.getXMLAnswer(callBack);sessionStorage.setItem('catalog_script_counter',parseInt(sessionStorage.getItem('catalog_script_counter'))+1);function callBack(response){sessionStorage.setItem('catalog_script_counter',sessionStorage.getItem('catalog_script_counter')-1);if(response!='false'){var values=JSON.parse(response);g_form.clearOptions('u_project');for(var i=0;i<values.length;i++){g_form.addOption('u_project',values[i].id,values[i].name);} if(values.length==1){g_form.setMandatory('u_project',false);g_form.setReadOnly('u_project',true);}}}}";


            //                         this.daoUtil.insertClientScript(catalog, scriptproject, catalogItemName, 'getProjects');



            var onLoadScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad() { var catItemSysid = ''; var cat_item = g_form.getValue('cat_item'); g_form.setDisplay('macro_upfront_price', false);g_form.setVisible('macro_upfront_price', false);g_form.setDisplay('upfront_price', false);g_form.setVisible('upfront_price', false); var flag = ''; var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); if(cat_item == '' || cat_item ==undefined){ catItemSysid = g_form.getUniqueValue(); gAjax.addParam('sysparm_name', 'getFieldProperties'); flag = 'true';}else{ catItemSysid = cat_item; gAjax.addParam('sysparm_name', 'getAllFields'); flag = 'false'; } gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.getXMLAnswer(callBack); function callBack(response) { if (response != 'false') { var fields = response.split('||'); var readonlyFields = fields[0].split(','); var hiddenFields = fields[1].split(','); for (var i = 0; i < readonlyFields.length; i++) { g_form.setReadOnly(readonlyFields[i], true); } for (var j = 0; j < hiddenFields.length; j++) { g_form.setReadOnly(hiddenFields[j], true); g_form.setDisplay(hiddenFields[j], false); } " + this.loadScript + " } } if (flag == 'true') { var gAjax1 = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); gAjax1.addParam('sysparm_name', 'checkUpfrontExpense'); gAjax1.addParam('sysparm_sys_id', catItemSysid); gAjax1.getXMLAnswer(callback1);function callback1(response) {g_form.setDisplay('macro_upfront_price', response); g_form.setVisible('macro_upfront_price', response);} } var price = g_form.getValue('upfront_price');if (price && flag == 'false') {g_form.setDisplay('upfront_price', 'true');g_form.setVisible('upfront_price', 'true');}} ";

            this.daoUtil.insertClientScript(catalog, onLoadScript, catalogItemName, 'makeFieldsReadOnly');

            var onChangeScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; } var catItemSysid = ''; var cat_item = g_form.getValue('cat_item'); if (cat_item == '' || cat_item == undefined) { catItemSysid = g_form.getUniqueValue(); } else { catItemSysid = cat_item; } if (sessionStorage.getItem('catalog_script_counter') == 0) { var ga = new GlideAjax('x_vmw_cloudservice.CSClientScriptBridge'); ga.addParam('sysparm_name', 'getProperty'); ga.getXML(result); function result(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ans = answer.toLowerCase(); if (ans == 'true' || ans == true) { try { var loadingDialog3 = new GlideDialogWindow('x_vmw_cloudservice_Loader_Catalog', true, '500', '200'); loadingDialog3.setTitle(''); loadingDialog3.render(); var interval = setInterval(function() { if (sessionStorage.getItem('catalog_script_counter') == 0) { loadingDialog3.destroy(); clearInterval(interval); } }, 500); } catch (e) {} } } } var ver = g_form.getValue('u_version'); var abc = new GlideAjax('x_vmw_cloudservice.FetchVersions'); abc.addParam('sysparm_name', 'getDeployment'); abc.addParam('sysparm_sys_id', catItemSysid); abc.addParam('sysparm_version', ver); abc.getXML(callBackcode); function callBackcode(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer == 'correct') { g_form.setMandatory('u_deployment_name', false); g_form.setDisplay('u_deployment_name', false); } else { g_form.setMandatory('u_deployment_name', true); g_form.setDisplay('u_deployment_name', true); } } var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getVersionsFields'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.addParam('sysparm_version', newValue.toString()); gAjax.getXMLAnswer(callBack); var gAjax2 = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax2.addParam('sysparm_name', 'getHiddenContainers'); gAjax2.addParam('sysparm_sys_id', catItemSysid); gAjax2.getXMLAnswer(callBack2); function callBack(response) { if (response != 'false') { var result = response.split('||'); var fieldsArray = result[0].split(','); var mandatoryFields = result[1].split(','); var hiddenFields = result[2].split(','); for (var i = 0; i < fieldsArray.length; i++) { g_form.setVisible(fieldsArray[i], true); g_form.setDisplay(fieldsArray[i], true); } for (var j = 0; j < mandatoryFields.length; j++) { g_form.setMandatory(mandatoryFields[j], true); } for (var k = 0; k < hiddenFields.length; k++) { g_form.setMandatory(hiddenFields[k], false); g_form.setVisible(hiddenFields[k], false); g_form.setDisplay(hiddenFields[k], false); } } if (cat_item == '' || cat_item == undefined) { catItemSysid = g_form.getUniqueValue(); var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getDatagridFields'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.getXMLAnswer(callBack1); } else { var catItemSysid = g_form.getValue('cat_item'); var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getMacroFields'); gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.getXMLAnswer(callBack3); } " + this.changeScript + " } function callBack1(response) { if (response != 'false') { var datagridFields = response.split(','); for (var j = 0; j < datagridFields.length; j++) { g_form.setMandatory(datagridFields[j], false); g_form.setDisplay(datagridFields[j], false); } " + this.changeScript + " } } function callBack2(response) { if (response != 'false' && response != null) { var hiddenContainer = JSON.parse(response); for (var j = 0; j < hiddenContainer.length; j++) { g_form.setDisplay(hiddenContainer[j], false); g_form.setDisplay(hiddenContainer[j] + '_end', false);g_form.setVisible(hiddenContainer[j], false);g_form.setVisible(hiddenContainer[j] + '_end', false); } " + this.changeScript + " } } function callBack3(response) { if (response != 'false') { var macroFields = response.split(','); for (var i = 0; i < macroFields.length; i++) { g_form.setMandatory(macroFields[i], false); g_form.setDisplay(macroFields[i], false); } " + this.changeScript + " } } }";

            this.daoUtil.insertClientScript(catalog, onChangeScript, catalogItemName, 'versionOnChange');

            var onLoadOAuthScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var gajax=new GlideAjax('x_vmw_cloudservice.FetchVersions');gajax.addParam('sysparm_name','isUserAuthorized');gajax.addParam('sysparm_userID',g_user.userID);gajax.getXMLAnswer(callBack);function callBack(response){if(response!='true'){alert('You are being redirected to VMware Aria Automation Cloud Login Page');top.window.open(response,'','height=500,width=800');}}}";

            this.daoUtil.insertClientScript(catalog, onLoadOAuthScript, catalogItemName, 'onLoadOAuthValidation');

            var onLoadHideContainerScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad() { var catItemSysid = ''; var cat_item = g_form.getValue('cat_item'); var gAjax = new GlideAjax('x_vmw_cloudservice.FetchVersions'); gAjax.addParam('sysparm_name', 'getHiddenContainers');if (cat_item == '' || cat_item == undefined) { catItemSysid = g_form.getUniqueValue(); } else { catItemSysid = cat_item; } gAjax.addParam('sysparm_sys_id', catItemSysid); gAjax.getXMLAnswer(callBack); function callBack(response) { if (response != 'false' && response != null) {var hiddenContainer = JSON.parse(response);for (var j = 0; j < hiddenContainer.length; j++) { g_form.setDisplay(hiddenContainer[j], false);g_form.setVisible(hiddenContainer[j], false); g_form.setDisplay(hiddenContainer[j]+'_end', false);g_form.setVisible(hiddenContainer[j] + '_end', false); } } }  var gAjax1 = new GlideAjax('x_vmw_cloudservice.FetchVersions');gAjax1.addParam('sysparm_name', 'customContainerHide');gAjax1.addParam('sysparm_sys_id', catItemSysid);gAjax1.getXMLAnswer(callBack1);function callBack1(response1) {if (response1 != 'false') {var result = response1.split('||');var fieldsArray = result[0].split(','); var hiddenFields = result[1].split(','); for (var i = 0; i < fieldsArray.length; i++) {  g_form.setVisible(fieldsArray[i], true);g_form.setDisplay(fieldsArray[i], true);}for (var k = 0; k < hiddenFields.length; k++) {g_form.setVisible(hiddenFields[k], false);g_form.setDisplay(hiddenFields[k], false);}}}}";

            this.daoUtil.insertClientScript(catalog, onLoadHideContainerScript, catalogItemName, 'onLoadHideContainer');

        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.createDefaultCatalogClientScript: Exception Block: catalogItemName: ' + catalogItemName);
            CASLogger.error("Exception caugth inside CatalogImport.createDefaultCatalogClientScript " + e + ". Error found" + e.stack);
        }
    },

    /*
    Function Name: createClientScriptForDynamicDatatype
    Comments: This function is use for creating the Client Scripts for the Dynamic Datatypes.
    Updated On: 15 July 2021
    Updated By: Bharat
    Update Comments : Handle the fallback condition for Valuepicker in Deplyment Action due to Direct Binding change.
	Add sessionStorage variable check on onSubmit scripts for hide/unhide task
    */
    createClientScriptForDynamicDatatype: function(catalog, displayValue, key, version, def_val_json, catalogType, catalogVraId, actionId, day2Versions) {

        CASLogger.debug('Inside CatalogImport.createClientScriptForDynamicDatatype: DisplayValue ' + displayValue + ' catalog: ' + catalog + ' catalogType: ' + catalogType + ' catalogId: ' + catalogVraId + ' version: ' + version + ' actionId: ' + actionId + ' day2Versions: ' + day2Versions);

        if (displayValue == 'datagrid' || displayValue == 'dualList' || displayValue == 'multiSelect' || displayValue == 'valuePicker') {

            var grClientScript = new GlideRecord(this.appUtil.configuration.table.clientScript);
            grClientScript.addQuery('cat_item', catalog);
            grClientScript.addQuery('name', 'OnLoad to set Macro fields hidden');
            grClientScript.query();
            if (!grClientScript.next()) {
                var macroScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var catItemSysid='';var cat_item=g_form.getValue('cat_item');var gAjax=new GlideAjax('x_vmw_cloudservice.FetchVersions');if(cat_item==''||cat_item==undefined){catItemSysid=g_form.getUniqueValue();gAjax.addParam('sysparm_name','getMacroFields');}else{catItemSysid=cat_item;gAjax.addParam('sysparm_name','getMacroFields');} gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.getXMLAnswer(callBack);function callBack(response){if(response!='false'){var macroFields=response.split(',');for(var i=0;i<macroFields.length;i++){g_form.setDisplay(macroFields[i],false);}}}}";
                this.daoUtil.insertClientScript(catalog, macroScript, '', 'OnLoad to set Macro fields hidden');

                var datagridScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+"function onLoad(){var catItemSysid='';var cat_item=g_form.getValue('cat_item');var gAjax=new GlideAjax('x_vmw_cloudservice.FetchVersions');if(cat_item==''||cat_item==undefined){catItemSysid=g_form.getUniqueValue();gAjax.addParam('sysparm_name','getDatagridFields');}else{catItemSysid=cat_item;gAjax.addParam('sysparm_name','getDatagridFields');} gAjax.addParam('sysparm_sys_id',catItemSysid);gAjax.getXMLAnswer(callBack);function callBack(response){if(response!='false'){var datagridFields=response.split(',');for(var j=0;j<datagridFields.length;j++){g_form.setMandatory(datagridFields[j],false);g_form.setDisplay(datagridFields[j],false);}}}}";
                this.daoUtil.insertClientScript(catalog, datagridScript, '', 'OnLoad to set datagrid hidden');
            }
        }

        var rgx = new RegExp('[^a-zA-Z0-9]', 'g');
        var VersionCheck = key.replace(rgx, ' ').trim().replaceAll(' ', '_');
        var field_name = '';
        if (version == '' || version == 'undefined' || version == 'undefined,') {
            if (catalogType == 'action') {
                field_name = VersionCheck + '__' + day2Versions;
            } else {
                field_name = VersionCheck;
            }
        } else {
            var versionEncrypt = version.replace(rgx, ' ').trim().replaceAll(' ', '_');
            field_name = VersionCheck + '__' + versionEncrypt;
        }
        var app_scope = gs.getProperty(this.appUtil.configuration.properties.applicationSysID);


        if (displayValue == 'dualList') {
            var onLoadScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onLoad(){var field_id="' + field_name + '"; g_form.setMandatory(field_id,false); g_form.setDisplay(field_id,false);var options=' + JSON.stringify(def_val_json) + ';var data={};var formElement=g_form.getControl("macro_"+field_id);if(!formElement.querySelector) return;var fieldIdElement=formElement.querySelector("#field_id");fieldIdElement.value=field_id; updateElementIds();getData();setData();function getData(){var defArr = []; data.options=options;data.all_options=(options.valueList||[]);if(typeof data.all_options[0]!="object"&&!data.all_options.id){data.all_options=data.all_options.map(function(item){return{"value":item,"label":item};});} if (options["valueList"] != "" && Array.isArray(options["valueList"]) && options["default"] && Array.isArray(options["default"])) { for (var i = 0; i < options["default"].length; i++) { for (var j = 0; j < options["valueList"].length; j++) { var val = (options["valueList"][j].value) ? options["valueList"][j].value : options["valueList"][j]; if (options["default"][i] == val) { defArr.push(options["default"][i]); break;} } } data.default_value = (defArr || []); } else if (options["default"] && Array.isArray(options["default"]) && data.all_options == "") { var newOption = options["default"].map(function(item) { return { "label": item, "value": item, }; }); data.all_options = newOption; data.default_value = (options["default"] || []); } else { data.default_value = (options["default"] || []); }  data.field_id=options.field_id;data.constraints=options.constraints;} function setData(){if(!data)return;formElement.querySelector("#json"+field_id).value=JSON.stringify((options||""));formElement.querySelector("#all_options"+field_id).value=JSON.stringify((data.all_options||""));formElement.querySelector("#default_values"+field_id).value=JSON.stringify((data.default_value||""));formElement.querySelector("#constraints"+field_id).value=JSON.stringify((data.constraints||""));} function updateElementIds(){formElement.querySelector("#duallist-container").id+=field_id;formElement.querySelector("#error-message").id+=field_id;formElement.querySelector("#selected").id+=field_id;formElement.querySelector("#unselected").id+=field_id;formElement.querySelector("#selectOptionButton").id+=field_id;formElement.querySelector("#unselectOptionButton").id+=field_id;formElement.querySelector("#selectAllOptionsButton").id+=field_id;formElement.querySelector("#unselectAllOptionsButton").id+=field_id;formElement.querySelector("#read_only").id+=field_id;formElement.querySelector("#all_options").id+=field_id;formElement.querySelector("#default_values").id+=field_id;formElement.querySelector("#constraints").id+=field_id;formElement.querySelector("#answer").id+=field_id;formElement.querySelector("#json").id+=field_id;}}';

            var onloadClientScript = new sn_sc.CatalogClientScript();
            onloadClientScript.setAttributes({
                'name': "OnLoad for " + field_name,
                'description': 'x_vmw_clientScript_' + 'onLoad ' + field_name,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onLoad',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
            });

            onloadClientScript.addScript(onLoadScript);
            onloadClientScript.appliesToCatalogItem(true);
            var onLoadClientScriptId = onloadClientScript.create();

            var onSubmitScript = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onSubmit(){ var version = g_form.getValue("u_version"); var field_id="' + field_name + '"; var rgx = new RegExp("[^a-zA-Z0-9]", "g"); var VersionCheck = version.replace(rgx, " ").trim().replaceAll(" ", "_"); if (version != "undefined" && VersionCheck != field_id.split("__").pop()) return; var formElement=g_form.getControl("macro_"+field_id);var answer;var constraints;if(sessionStorage["macro_"+field_id+"_container"] + "" == "false" || sessionStorage["macro_"+field_id+"_variable"] + "" == "false"){return true;} if(formElement.querySelector){answer=formElement.querySelector("#answer"+field_id).value;var options=formElement.querySelector("#json"+field_id).value;options=options?JSON.parse(options):{};answer=answer?JSON.parse(answer):[];constraints=formElement.querySelector("#constraints"+field_id).value;constraints=constraints?JSON.parse(constraints):{};if(constraints){if(constraints.required&&!answer.length){g_form.addErrorMessage("The following mandatory fields are not filled in: "+options.label);formElement.querySelector("#selected"+field_id).style.border="1px solid #c83c36";formElement.querySelector("#unselected"+field_id).style.border="1px solid #c83c36";return false;} else if(constraints["max-value"]<answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+options.label);formElement.querySelector("#selected"+field_id).style.border="1px solid #c83c36";formElement.querySelector("#unselected"+field_id).style.border="1px solid #c83c36";return false;} else if(constraints["min-value"]>answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+options.label);formElement.querySelector("#selected"+field_id).style.border="1px solid #c83c36";formElement.querySelector("#unselected"+field_id).style.border="1px solid #c83c36";return false;}} g_form.clearOptions(field_id);g_form.addOption(field_id,answer,answer);g_form.setValue(field_id,answer);} else if(g_form.getField(field_id).choices){answer=g_form.getField(field_id).answer; var duallistData=g_form.getField(field_id).duallist_data; constraints=duallistData.constraints;if(constraints["max-value"]<answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+duallistData.options.label);return false;} else if(constraints["min-value"]>answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+duallistData.options.label);return false;}else if(constraints.required && !answer.length) {             g_form.addErrorMessage("The following mandatory fields are not filled in: " + duallistData.options.label); return false }} return true;}';

            var onSubmitClientScript = new sn_sc.CatalogClientScript();
            onSubmitClientScript.setAttributes({
                'name': "OnSubmit for " + field_name,
                'description': 'x_vmw_clientScript_' + 'onSubmit ' + field_name,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onSubmit',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
            });

            onSubmitClientScript.addScript(onSubmitScript);
            onSubmitClientScript.appliesToCatalogItem(true);
            var onSubmitClientScriptId = onSubmitClientScript.create();
            CASLogger.debug('Inside if block of dualList: CatalogImport.createClientScriptForDynamicDatatype. ');
        }
        if (displayValue == 'multiSelect') {

            var onLoadScriptMS = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onLoad(){var field_id="' + field_name + '";g_form.setMandatory(field_id,false);g_form.setDisplay(field_id,false);var options=' + JSON.stringify(def_val_json) + ';var data={};var formElement=g_form.getControl("macro_"+field_id);if(!formElement.querySelector)return;var fieldIdElement=formElement.querySelector("#field_id");fieldIdElement.value=field_id;updateElementIds();getData();setData();function getData(){var defArr = []; data.options=options;data.all_options=(options.valueList||[]);if(typeof data.all_options[0]!="object"&&!data.all_options.id){data.all_options=data.all_options.map(function(item){return{"value":item,"label":item};});} if (options["valueList"] != "" && Array.isArray(options["valueList"]) && options["default"] && Array.isArray(options["default"])) {for (var i = 0; i < options["default"].length; i++) { for (var j = 0; j < options["valueList"].length; j++) { var val = (options["valueList"][j].value) ? options["valueList"][j].value : options["valueList"][j]; if (options["default"][i] == val) { defArr.push(options["default"][i]); break; } } } data.default_value = (defArr || []); } else if (options["default"] && Array.isArray(options["default"]) && data.all_options == "") {var newOption = options["default"].map(function(item) { return { "label": item, "value": item, }; }); data.all_options = newOption; data.default_value = (options["default"] || []); } else { data.default_value = (options["default"] || []); } data.field_id=options.field_id;data.constraints=options.constraints;} function setData(){if(!data)return;formElement.querySelector("#json"+field_id).value=JSON.stringify((options||""));formElement.querySelector("#all_options"+field_id).value=JSON.stringify((data.all_options||""));formElement.querySelector("#default_values"+field_id).value=JSON.stringify((data.default_value||""));formElement.querySelector("#constraints"+field_id).value=JSON.stringify((data.constraints||""));} function updateElementIds(){formElement.querySelector("#multiselect-container").id+=field_id; formElement.querySelector("#error-message").id+=field_id; formElement.querySelector("#multiselect").id+=field_id; formElement.querySelector("#read_only").id+=field_id; formElement.querySelector("#all_options").id+=field_id; formElement.querySelector("#default_values").id+=field_id; formElement.querySelector("#constraints").id+=field_id; formElement.querySelector("#answer").id+=field_id; formElement.querySelector("#json").id+=field_id;}}';


            var onloadClientScriptMS = new sn_sc.CatalogClientScript();
            onloadClientScriptMS.setAttributes({
                'name': "OnLoad for " + field_name,
                'description': 'x_vmw_clientScript_' + 'onLoad ' + field_name,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onLoad',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
            });

            onloadClientScriptMS.addScript(onLoadScriptMS);
            onloadClientScriptMS.appliesToCatalogItem(true);
            onloadClientScriptMS.create();

            var onSubmitScriptMS = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onSubmit(){var version = g_form.getValue("u_version"); var field_id="' + field_name + '"; var rgx = new RegExp("[^a-zA-Z0-9]", "g"); var VersionCheck = version.replace(rgx, " ").trim().replaceAll(" ", "_"); if (version != "undefined" && VersionCheck != field_id.split("__").pop()) return; var formElement=g_form.getControl("macro_"+field_id);var answer;var constraints; if(sessionStorage["macro_"+field_id+"_container"] + "" == "false" || sessionStorage["macro_"+field_id+"_variable"] + "" == "false"){return true;} if(formElement.querySelector){answer=formElement.querySelector("#answer"+field_id).value;var options=formElement.querySelector("#json"+field_id).value; options=options?JSON.parse(options):{}; answer=answer?JSON.parse(answer):[]; constraints=formElement.querySelector("#constraints"+field_id).value; constraints=constraints?JSON.parse(constraints):{};if(constraints){if(constraints.required&&!answer.length){g_form.addErrorMessage("The following mandatory fields are not filled in: "+options.label);formElement.querySelector("#multiselect"+field_id).style.border="1px solid #c83c36";return false;}else if(constraints["max-value"]<answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+options.label);formElement.querySelector("#multiselect"+field_id).style.border="1px solid #c83c36";return false;}else if(constraints["min-value"]>answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+options.label);formElement.querySelector("#multiselect"+field_id).style.border="1px solid #c83c36";return false;}} g_form.clearOptions(field_id);g_form.addOption(field_id,answer,answer);g_form.setValue(field_id,answer);}else if(g_form.getField(field_id).choices){answer=g_form.getField(field_id).answer;var multiselectData=g_form.getField(field_id).duallist_data;constraints=multiselectData.constraints;if(constraints["max-value"]<answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+multiselectData.options.label);return false;}else if(constraints["min-value"]>answer.length){g_form.addErrorMessage("Correct the highlighted errors in: "+multiselectData.options.label);return false;}else if(constraints.required && !answer.length) { g_form.addErrorMessage("The following mandatory fields are not filled in: " + multiselectData.options.label); return false; }} return true;}';

            var onSubmitClientScriptMS = new sn_sc.CatalogClientScript();
            onSubmitClientScriptMS.setAttributes({
                'name': "OnSubmit for " + field_name,
                'description': 'x_vmw_clientScript_' + 'onSubmit ' + field_name,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onSubmit',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
            });

            onSubmitClientScriptMS.addScript(onSubmitScriptMS);
            onSubmitClientScriptMS.appliesToCatalogItem(true);
            onSubmitClientScriptMS.create();
            CASLogger.debug('Inside if block of multiselect: CatalogImport.createClientScriptForDynamicDatatype. ');
        }

        if (displayValue == 'valuePicker') {


            var fieldSysID = '';
            var varGR = new GlideRecord(this.appUtil.configuration.table.variable);
            var query = '';
            query = 'name=u_version';

            varGR.addEncodedQuery(query);
            varGR.query();
            if (varGR.next()) {
                fieldSysID = varGR.sys_id;
            }

            CASLogger.debug('Inside if block of valuepicker: CatalogImport.createClientScriptForDynamicDatatype: catalogType ' + catalogType);
            if (catalogType === 'action') {

                var constraints = JSON.stringify(def_val_json.constraints);

                var grCat = new GlideRecord(this.appUtil.configuration.table.catalogItem);
                var deploymentCat = gs.getProperty(this.appUtil.configuration.properties.deploymentCategory);
                var machineCat = gs.getProperty(this.appUtil.configuration.properties.machineCategory);
                var deploymentActionDeploymentSysId = gs.getProperty(this.appUtil.configuration.properties.deploymentActionDeploymentSysId);
                var resourceActionResourceSysId = gs.getProperty(this.appUtil.configuration.properties.resourceActionResourceSysId);

                var onChangeVariable = '';
                var actionType = '';

                if (grCat.get(catalog)) {
                    var currentCategory = grCat.category;
                    if (currentCategory == deploymentCat) {
                        actionType = 'Deployment';
                        onChangeVariable = deploymentActionDeploymentSysId;
                    } else if (currentCategory == machineCat) {
                        actionType = 'Machine';
                        onChangeVariable = resourceActionResourceSysId;
                    }
                }

                var onChangeScriptVP = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onChange(control,oldValue,newValue,isLoading){if(isLoading||newValue==""){return;} var catalog=g_form.getUniqueValue();var gAjax2=new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge"); gAjax2.addParam("sysparm_name","getSchema"); gAjax2.addParam("sysparm_deploymentid",newValue);gAjax2.addParam("sysparm_catalogid",catalog);gAjax2.addParam("sysparm_type","' + actionType + '");gAjax2.getXMLAnswer(callBack);function callBack(response){var field_id="' + field_name + '"; var field = "' + VersionCheck + '";var fieldResponse = JSON.parse(response);var parsed1 = fieldResponse.schema;var version = fieldResponse.versions;var parsed = JSON.parse(parsed1);if(parsed.model.schema[field]){var SPValuepicker=parsed;SPValuepicker.id=field;g_form.setValue("macro_"+field_id,JSON.stringify(SPValuepicker));var schema=parsed.model.schema[field];g_form.setMandatory(field_id,false);g_form.setDisplay(field_id,false);var valuePickerType=schema.type;var valuePickerDataType=schema.type.dataType;var valuePickerReferenceType=schema.type.referenceType;var valueList=schema.valueList||[];var defaultValue=schema["default"]||(parsed.model.binding?parsed.model.binding.entries?getDirectBindingValue(parsed.model.binding.entries):"":"");var valuePickerURI=valueList?valueList.id:"";var datasource=valueList?valueList.type:"";var constraints=' + constraints + ';var getValueFunctionString="";var getDefaultValueFunctionString="";if((valuePickerType.referenceType||"").toLowerCase()==="properties"&&!Array.isArray(valueList)){getValueFunctionString=function getValue(keyword,callBack){var parameters=[];var uri=valuePickerURI;var datasource=datasource;var projectId=g_form.getValue("u_project");var catItemSysid=g_form.getUniqueValue();var deploymentSysId=g_form.getValue("deployment");var gAjax=new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge");gAjax.addParam("sysparm_name","dynamicDropDownValues");gAjax.addParam("sysparm_sys_id",catItemSysid);gAjax.addParam("sysparm_deployment_sys_id",deploymentSysId);gAjax.addParam("sysparm_url",uri);gAjax.addParam("sysparm_datasource",datasource);gAjax.addParam("sysparm_parameter",JSON.stringify(parameters));gAjax.addParam("sysparm_projectId",projectId);gAjax.getXMLAnswer(function(response){var responseObject=JSON.parse(response);valueList=responseObject.data.length?responseObject.data:"Empty_Array";callBack(filterList(valueList,keyword));});};}else if(valuePickerType.referenceType&&!valuePickerURI){getValueFunctionString=function getValue(keyword,callBack){var type=valuePickerDataType;var refrencetype=valuePickerReferenceType;var catItemSysid=catalog;var deploymentSysId=g_form.getValue("deployment");var gAjax=new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge");gAjax.addParam("sysparm_name","referenceValuePicker");gAjax.addParam("sysparm_sys_id",catItemSysid);gAjax.addParam("sysparm_filter",keyword);gAjax.addParam("sysparm_reftype",refrencetype);gAjax.addParam("sysparm_deployment_sys_id",deploymentSysId);gAjax.getXMLAnswer(function(response){var responseObject=JSON.parse(response);valueList=responseObject.items;callBack(filterList(valueList,""));});};}else{getValueFunctionString=function getValue(keyword,callBack){var result=[];var options=schema;valueList=options.valueList;callBack(filterList(valueList,keyword));};} var formElement=g_form.getControl("macro_"+field_id);if(!formElement.querySelector)return;var valuePickerElement=formElement.querySelector("#value_picker");var valuePickerInputElement=formElement.querySelector("#value_picker_input");var optionsContainerElement=formElement.querySelector("#options_container");var valuePickerDropdownElement=formElement.querySelector("#valuepicker_dropdown");var answerContainerElement=formElement.querySelector("#answer_container");var constraintContainerElement=formElement.querySelector("#constraint_container");var searchButtonElement=formElement.querySelector("#search_button");var clearButtonElement=formElement.querySelector("#clear_button");var errorMessageElement=formElement.querySelector("#error-message");var optionCountContainerElement=formElement.querySelector("#option_count_container");updateElements(formElement,field_id);getDefaultValue(function(value,label){var answer={id:value,type:valuePickerType.referenceType,label:label};valuePickerInputElement.value=label;answerContainerElement.value=JSON.stringify(answer);});function updateElements(formElement,field_id){if(!formElement||!field_id){return;} constraintContainerElement.value=JSON.stringify(constraints);if((constraints.read_only===true||constraints.read_only==="true")){valuePickerInputElement.readOnly=true;return;} valuePickerElement.addEventListener("blur",function(e){valuePickerDropdownElement.classList.remove("cas_valuepicker_visible");});searchButtonElement.addEventListener("click",function(e){valuePickerDropdownElement.classList.add("cas_valuepicker_visible");valuePickerElement.focus();optionsContainerElement.innerHTML="";optionCountContainerElement.innerText="Loading...";var keyword=valuePickerInputElement.value;getValueFunctionString(keyword,function(filteredList){optionsContainerElement.innerHTML=(filteredList||[]).reduce(function(acc,item){return acc+"<div class=\'cas_valuepicker_option\' value=\'"+item.value+"\' label=\'"+item.label+"\'>"+item.label+"</div>";},"");optionCountContainerElement.innerText="Showing "+filteredList.length+" of "+filteredList.length+" results.";});});clearButtonElement.addEventListener("click",function(e){valuePickerInputElement.value="";optionsContainerElement.innerHTML="";answerContainerElement.value="";valuePickerDropdownElement.classList.remove("cas_valuepicker_visible");});optionsContainerElement.addEventListener("click",function(e){valuePickerElement.focus();var optionElement=(e.target||{});var label=optionElement.getAttribute?optionElement.getAttribute("label"):"";var value=optionElement.getAttribute?optionElement.getAttribute("value"):"";if(value){var answer=JSON.stringify({id:value,type:valuePickerType.referenceType,label:label});}else{answer="";} valuePickerDropdownElement.classList.remove("cas_valuepicker_visible");valuePickerInputElement.value=label;answerContainerElement.value=answer;});} function getDefaultValue(callBack){var tempDefaultValue=(defaultValue)?JSON.stringify(defaultValue):"";defaultValue?callBack(defaultValue.value,defaultValue.label):"";} function filterList(list,keyword){return(list||[]).filter(function(value){return(value.label||"").toLowerCase().includes((keyword||"").toLowerCase());});} function getDirectBindingValue(binding){if(binding.length){for(var i=0;i<binding.length;i++){if(binding[i].key===field){if(binding[i].value.value){return binding[i].value.value;}}}} return"";}}}}';

                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.setAttributes({
                    'name': field_name,
                    'description': 'x_vmw_clientScript_' + 'onChange' + field_name,
                    'applies_to': 'all',
                    'ui_type': '10',
                    'type': 'onChange',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder,
                    'cat_variable': 'IO:' + onChangeVariable

                });
                this.clientscriptorder++;
                catalogClientScript.addScript(onChangeScriptVP);
                catalogClientScript.appliesToCatalogItem(true);
                var catalogClientScriptId = catalogClientScript.create();

            } else {

                //onChange Script
                var valuePickerType = def_val_json.type;
                var valuePickerDataType = def_val_json.type.dataType;
                var valuePickerReferenceType = def_val_json.type.referenceType;
                var valueList = def_val_json.valueList;
                var defaultValue = def_val_json["default"];

                //For external value case
                var valuePickerURI = valueList ? valueList.id : '';
                var datasource = valueList ? valueList.type : '';

                //Constraints
                var constraints = JSON.stringify(def_val_json.constraints);

                var getValueFunctionString = "";
                var getDefaultValueFunctionString = "";

                if ((valuePickerType.referenceType || '').toLowerCase() === "properties" && !Array.isArray(valueList)) {
                    //Exernal Source
                    getValueFunctionString = 'function getValue(keyword, callBack) {' +
                        'if(!valueList.length && Array.isArray(valueList)){' +
                        'var parameters = [];' +
                        'var uri = "' + valuePickerURI + '";' +
                        'var datasource = "' + datasource + '";' +
                        'var projectId = g_form.getValue("u_project");' +
                        'var catItemSysid = g_form.getUniqueValue();' +
                        'var deploymentSysId = g_form.getValue("deployment");' +
                        'var gAjax = new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge");' +
                        'gAjax.addParam("sysparm_name", "dynamicDropDownValues");' +
                        'gAjax.addParam("sysparm_sys_id", catItemSysid);' +
                        'gAjax.addParam("sysparm_deployment_sys_id", deploymentSysId );' +
                        'gAjax.addParam("sysparm_url", uri);' +
                        'gAjax.addParam("sysparm_datasource", datasource);' +
                        'gAjax.addParam("sysparm_parameter", JSON.stringify(parameters));' +
                        'gAjax.addParam("sysparm_projectId", projectId);' +

                        'gAjax.getXMLAnswer(function(response) {' +
                        'var responseObject = JSON.parse(response);' +
                        'valueList = responseObject.data.length?responseObject.data:"Empty_Array";' +
                        'callBack(filterList(valueList, keyword));' +
                        '});' +
                        '}' +

                        'else if(valueList.length){' +
                        'callBack(filterList(valueList, keyword));' +
                        '}' +

                        'else{' +
                        'callBack([], keyword);' +
                        '}' +
                        '}';
                } else if (valuePickerType.referenceType && !valuePickerURI) {
                    //Reference Type
                    getValueFunctionString = 'function getValue(keyword, callBack) {' +
                        'var type = "' + valuePickerDataType + '";' +
                        'var refrencetype = "' + valuePickerReferenceType + '";' +
                        'var catItemSysid = g_form.getUniqueValue();' +
                        'var deploymentSysId = g_form.getValue("deployment");' +
                        'var gAjax = new GlideAjax("x_vmw_cloudservice.CSClientScriptBridge");' +
                        'gAjax.addParam("sysparm_name", "referenceValuePicker");' +
                        'gAjax.addParam("sysparm_sys_id", catItemSysid);' +
                        'gAjax.addParam("sysparm_filter", keyword);' +
                        'gAjax.addParam("sysparm_reftype", refrencetype);' +
                        'gAjax.addParam("sysparm_deployment_sys_id", deploymentSysId );' +

                        'gAjax.getXMLAnswer(function (response) {' +
                        'var responseObject = JSON.parse(response);' +
                        'valueList = responseObject.items;' +
                        'callBack(filterList(valueList, ""));' +
                        '});' +
                        '}';
                } else {
                    //constant
                    getValueFunctionString = 'function getValue(keyword, callBack) {' +
                        'var result = [];' +
                        'var options = ' + JSON.stringify(def_val_json) + ';' +

                        'valueList = options.valueList;' +
                        'callBack(filterList(valueList, keyword));' +
                        '}';
                }



                getDefaultValueFunctionString = 'function getDefaultValue(callBack) {' +
                    (defaultValue ? 'defaultValue = ' + JSON.stringify(defaultValue) + ';' : '') +
                    (defaultValue ? 'callBack(defaultValue.value, defaultValue.label);' : '') +
                    '}';


                var scriptType = (version === '' && catalogVraId !== undefined && catalogVraId !== '') ? 'onLoad' : 'onChange';

                var initialLinesOnChange = 'function onChange(control, oldValue, newValue, isLoading) { if (newValue == "") { return; } if (g_form.getValue("u_version") != "' + version + '") { return; } var catItemSysid = ""; var cat_item = g_form.getValue("cat_item"); if (cat_item == "" || cat_item == undefined) { catItemSysid = g_form.getUniqueValue(); } else { catItemSysid = cat_item; } ';

                var initialLinesOnLoad = 'function onLoad(control, oldValue, newValue, isLoading) { var catItemSysid = ""; var cat_item = g_form.getValue("cat_item"); if (cat_item == "" || cat_item == undefined) { catItemSysid = g_form.getUniqueValue(); } else { catItemSysid = cat_item; } ';

                var initialLines = (scriptType === 'onLoad') ? initialLinesOnLoad : initialLinesOnChange;

                var onChangeScriptVP = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+ initialLines + 'var field_id = "' + field_name + '"; g_form.setMandatory(field_id, false); g_form.setDisplay(field_id, false); var formElement = g_form.getControl("macro_" + field_id);if(!formElement.querySelector)return; var valuePickerElement = formElement.querySelector("#value_picker"); var valuePickerInputElement = formElement.querySelector("#value_picker_input"); var optionsContainerElement = formElement.querySelector("#options_container"); var valuePickerDropdownElement = formElement.querySelector("#valuepicker_dropdown"); var answerContainerElement = formElement.querySelector("#answer_container"); var constraintContainerElement = formElement.querySelector("#constraint_container"); var searchButtonElement = formElement.querySelector("#search_button"); var clearButtonElement = formElement.querySelector("#clear_button"); var errorMessageElement = formElement.querySelector("#error-message"); var optionCountContainerElement = formElement.querySelector("#option_count_container"); var valuePickerType = "' + valuePickerReferenceType + '"; var constraints = ' + constraints + '; var valueList = []; var defaultValue = ""; updateElements(formElement, field_id); getDefaultValue(function(value, label) { var answer = { id: value, type: valuePickerType, label: label }; valuePickerInputElement.value = label; answerContainerElement.value = JSON.stringify(answer); }); function updateElements(formElement, field_id) { if (!formElement || !field_id) { return; } constraintContainerElement.value = JSON.stringify(constraints); if ((constraints.read_only === true || constraints.read_only === "true")) { valuePickerInputElement.readOnly = true; return; } valuePickerElement.addEventListener("blur", function(e) { valuePickerDropdownElement.classList.remove("cas_valuepicker_visible"); }); searchButtonElement.addEventListener("click", function(e) { valuePickerDropdownElement.classList.add("cas_valuepicker_visible"); valuePickerElement.focus(); optionsContainerElement.innerHTML="";optionCountContainerElement.innerText="Loading...";var keyword = valuePickerInputElement.value; getValue(keyword, function(filteredList) { optionsContainerElement.innerHTML = (filteredList || []).reduce(function(acc, item) { return acc + "<div class=\'cas_valuepicker_option\' value=\'" + item.value + "\' label=\'" + item.label + "\'>" + item.label + "</div>"; }, ""); optionCountContainerElement.innerText = "Showing " + filteredList.length + " of " + filteredList.length + " results."; }); }); clearButtonElement.addEventListener("click", function(e) { valuePickerInputElement.value = ""; optionsContainerElement.innerHTML = ""; answerContainerElement.value = ""; valuePickerDropdownElement.classList.remove("cas_valuepicker_visible"); }); optionsContainerElement.addEventListener("click", function(e) { valuePickerElement.focus(); var optionElement = (e.target || {}); var label = optionElement.getAttribute ? optionElement.getAttribute("label") : ""; var value = optionElement.getAttribute ? optionElement.getAttribute("value") : ""; if (value) { var answer = JSON.stringify({ id: value, type: valuePickerType, label: label }); } else { answer = ""; } valuePickerDropdownElement.classList.remove("cas_valuepicker_visible"); valuePickerInputElement.value = label; answerContainerElement.value = answer; }); } ' + getDefaultValueFunctionString + ' ' + getValueFunctionString + ' function filterList(list, keyword) { return (list || []).filter(function(value) { return (value.label || "").toLowerCase().includes((keyword || "").toLowerCase()); }); } }';

                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.setAttributes({
                    'name': field_name,
                    'description': (scriptType === 'onLoad') ? 'x_vmw_clientScript_' + 'onLoad' : ('x_vmw_clientScript_' + 'onChange' + field_name),
                    'applies_to': 'all',
                    'ui_type': '10',
                    'type': (scriptType === 'onLoad') ? 'onLoad' : 'onChange',
                    'sys_scope': app_scope,
                    'cat_item': catalog,
                    'active': 'true',
                    'order': this.clientscriptorder,
                    'cat_variable': 'IO:' + fieldSysID

                });
                this.clientscriptorder++;
                catalogClientScript.addScript(onChangeScriptVP);
                catalogClientScript.appliesToCatalogItem(true);
                var catalogClientScriptId = catalogClientScript.create();

            }

            var onSubmitInitialLines = '';
            if (catalogType === 'action' || (version === '' && catalogVraId !== undefined && catalogVraId !== '')) {
                onSubmitInitialLines = 'var field_id = "' + field_name + '";';
            } else {
                onSubmitInitialLines = 'var version = g_form.getValue("u_version"); var field_id = "' + field_name + '"; var rgx = new RegExp("[^a-zA-Z0-9]", "g"); var VersionCheck = version.replace(rgx, " ").trim().replaceAll(" ", "_"); if (VersionCheck != field_id.split("__").pop()) return;';
            }

            var onSubmitScriptVP = "/* ***********************************************************\n* Copyright (c) 2019-2023 VMware, Inc. All Rights Reserved.\n* You may not use this product except in compliance with the License.\n* This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.\n************************************************************ */\n/*This script is auto-generated. Please do not change the script*/\n"+'function onSubmit() {' + onSubmitInitialLines + ' var formElement = g_form.getControl("macro_" + field_id); var answer; var constraints; if(sessionStorage["macro_"+field_id+"_container"] + "" == "false" || sessionStorage["macro_"+field_id+"_variable"] + "" == "false"){return true;} if (formElement.querySelector) { var fieldLabel = g_form.getLabelOf("macro_" + field_id); var answerContainerElement = formElement.querySelector("#answer_container"); var constraintContainerElement = formElement.querySelector("#constraint_container"); answer = answerContainerElement.value || ""; constraints = JSON.parse(constraintContainerElement.value || "{}"); if (constraints) { if (constraints.required && !answer) { g_form.addErrorMessage("The following mandatory fields are not filled in: " + fieldLabel); formElement.querySelector("#value_picker_input").style.border = "1px solid #c83c36"; return false; } } g_form.setValue(field_id, answer); } else if (g_form.getField("macro_" + field_id).portal == "service portal") { var answer = g_form.getField("macro_" + field_id).answer; var mandatory = g_form.getField("macro_" + field_id).mandatory; if (mandatory && Object.keys(answer).length == 0) { g_form.addErrorMessage("The following mandatory fields are not filled : " + g_form.getField("macro_" + field_id).label); return false; } } return true; }';


            var onSubmitClientScriptVP = new sn_sc.CatalogClientScript();
            onSubmitClientScriptVP.setAttributes({
                'name': "OnSubmit for " + field_name,
                'description': 'x_vmw_clientScript_' + 'onSubmit ' + field_name,
                'applies_to': 'item',
                'ui_type': '10',
                'type': 'onSubmit',
                'sys_scope': app_scope,
                'cat_item': catalog,
                'active': 'true',
            });

            onSubmitClientScriptVP.addScript(onSubmitScriptVP);
            onSubmitClientScriptVP.appliesToCatalogItem(true);
            var onSubmitClientScriptIdVP = onSubmitClientScriptVP.create();
        }

    },



    //To get display name of valuePicker from schema.
    getDisplayName: function(schema, id) {
        try {
            var pages = schema.model.layout.pages;
            var displayName = '';
            pages.forEach(function(page) {
                page.sections.forEach(function(section) {
                    section.fields.forEach(function(field) {
                        if (field.id === id) {
                            displayName = field.display;
                        }
                    });
                });
            });
            CASLogger.debug('Inside CatalogImport.getDisplayName: DisplayName: ' + displayName + ' id: ' + id);

            return displayName;
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.getDisplayName: Exception Block: pages: ' + pages + ' displayName: ' + displayName + ' id: ' + id);
            CASLogger.error("Exception caught inside CatalogImport.getDisplayName" + e + ". Error found" + e.stack);
            return '';
        }
    },
	
	
	fetchIcon: function(catalog, icon, current) {
        try {
            var token = '';
            var endPoint = '';
            var midserver = '';
            var iconCheck = true;
            var sysAttach = new GlideRecord(this.appUtil.configuration.table.sys_attachment);
            sysAttach.addEncodedQuery("table_sys_id=" + catalog);
            sysAttach.query();
            if (sysAttach.next()) {
                var iconId = sysAttach.file_name.split("/")[0];
                if (iconId == icon) {
                    CASLogger.debug('Inside if block of CatalogImport.fetchIcon: IconId ' + iconId);
                    iconCheck = false;
                } else {
					CASLogger.debug('Inside else block of CatalogImport.fetchIcon: Deleted ' + catalog);
					var attachment = new GlideSysAttachment();
					var attachmentSysID = sysAttach.sys_id+'';
					attachment.deleteAttachment(attachmentSysID);
                }
            }

            if (iconCheck == true || iconCheck == "true") {
                if (current.organization.select_automation_service == 'vRealiseAutomationCloud') {
                    token = current.organization.api_token.getDecryptedValue().toString();
                    endPoint = current.organization.cas_url + "/icon/api/icons/" + icon;
                    CASLogger.debug('Inside if block of CatalogImport.fetchIcon: endPoint' + endPoint);

                }
                if (current.organization.select_automation_service == 'vrealizeAutomationService') {

                    endPoint = current.organization.hostname + "/icon/api/icons/" + icon;
                    midserver = current.organization.mid_server.name;
                    token = current.organization.api_token.getDecryptedValue().toString();
                    CASLogger.debug('Inside if block of CatalogImport.fetchIcon: endPoint ' + endPoint);
                }
                var response = new CASAppUtil().makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token);
                var statusCode = response.getStatusCode();
                var headerVal = response.getHeader("Content-Type");
                var fileName = headerVal.replaceAll("image", icon);
                if (headerVal == "image/jpeg" || headerVal == "image/png" || headerVal == "image/jpg" || headerVal == "image/bmp") {
                    var attachImage = this.appUtil.makeApiCall(endPoint, 'get', '', midserver, "application/json", "application/json", 'Bearer ' + token + '','', catalog, fileName);
                    CASLogger.debug('Inside else block of CatalogImport.fetchIcon: Supported ' + endPoint + " Catalog : " + catalog + " Extension Supported : " + headerVal +"FileName : " + fileName);
                } else {
                    CASLogger.debug('Inside else block of CatalogImport.fetchIcon: Unsupported ' + endPoint + " Catalog : " + catalog + " Extension not Supported : " + headerVal);
                }
            }
            return "true";
        } catch (e) {
            CASLogger.debug('Inside catch block of CatalogImport.fetchIcon:' + "endPoint : " + endPoint + " statusCode : " + statusCode + ".\n Error found" + e.stack);
            CASLogger.error('Inside catch block of CatalogImport.fetchIcon:' + e);
        }


    },


    catalogCheck: function(catalogId) {
        try {
            CASLogger.debug('Inside the CatalogImport.catalogCheck: CatalogId: ' + catalogId);
            var grQue = new GlideRecord(this.appUtil.configuration.table.queue);
            grQue.addEncodedQuery('topic=PreImportCatalog^stateINProcessing,Ready^request=' + catalogId);
            grQue.query();
            if (grQue.next()) {
                return true;
            } else {
                CASLogger.debug('Inside Else Block of CatalogImport.catalogCheck: CatalogId: ' + catalogId);
                return false;
            }
        } catch (e) {
            CASLogger.debug('Inside Catch Block of CatalogImport.catalogCheck: Exception Block: ' + ' catalogId: ' + catalogId);
            CASLogger.error("Exception caught inside CatalogImport.catalogCheck" + e + ". Error found" + e.stack);
        }
    },

    type: 'CatalogImport'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-15 13:04:34</sys_created_on>
        <sys_id>41f6be1b1b263300e61b21b6bc4bcb76</sys_id>
        <sys_mod_count>1591</sys_mod_count>
        <sys_name>CatalogImport</sys_name>
        <sys_package display_value="VMware Aria Automation Plugin" source="x_vmw_cloudservice">0d6a0ec1db11bb407c83712ebf96194d</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="VMware Aria Automation Plugin">0d6a0ec1db11bb407c83712ebf96194d</sys_scope>
        <sys_update_name>sys_script_include_41f6be1b1b263300e61b21b6bc4bcb76</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-14 09:06:06</sys_updated_on>
    </sys_script_include>
</record_update>
